<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>enomotodev</title>
    <link>http://enomotodev.github.io/</link>
    <description>Recent content on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2015 Takafumi Enomoto.</copyright>
    <lastBuildDate>Sat, 14 Nov 2015 14:17:08 +0900</lastBuildDate>
    <atom:link href="http://enomotodev.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>fluentdつかってみた</title>
      <link>http://enomotodev.github.io/post/install-fluentd/</link>
      <pubDate>Sat, 14 Nov 2015 14:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-fluentd/</guid>
      <description>

&lt;h2 id=&#34;fluentd-とは&#34;&gt;fluentd とは&lt;/h2&gt;

&lt;p&gt;fluentd とは&lt;a href=&#34;http://www.treasuredata.com/&#34;&gt;Treasure Data&lt;/a&gt;という会社が開発している、さまざまなログの収集手段を提供するログ管理ツールです。&lt;br /&gt;
今回は CentOS 6.7 で実際にインストールしてつかってみることによって基本的な設定を学んでいきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;td-agent-をインストール&#34;&gt;td-agent をインストール&lt;/h2&gt;

&lt;p&gt;td-agent ？ となるかと思いますが、td-agent には以下のものが同梱されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;コアライブラリ&lt;/li&gt;
&lt;li&gt;fluentd とプラグイン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、ad-agent の中に fluentd が入っていて、プラグインなども一緒に入っているので、通常は td-agent をインストールします。&lt;/p&gt;

&lt;p&gt;インストールにあたっては公式にインストールスクリプトが公開されているので今回はそちらをつかってインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は次のコマンドでできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/td-agent start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定ファイルの編集&#34;&gt;設定ファイルの編集&lt;/h2&gt;

&lt;p&gt;それでは設定ファイルを編集してみましょう。&lt;br /&gt;
まずは、ログ収集の設定を行います。なお、デフォルトの設定はすべて削除してしまって問題ありません。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
    # 入力に in_tail プラグインを指定
    type tail
    # 監視するログファイルのパスを指定
    path /var/log/httpd/access_log
    # ログにつけるタグを指定
    tag apache.access
    # 監視するファイルをどの行まで読み込んだかを記録するファイルの指定
    pos_file /var/log/td-agent/httpd-access_log.pos
    # ログの書式を指定
    format apache2
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に上記の記述の下にログ出力の設定を追記していきます。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 上で指定したタグを設定
&amp;lt;match apache.access&amp;gt;
    # 出力に out_file プラグインを指定
    type file
    # 出力先のファイルを指定
    path /var/log/td-agent/httpd/access.log
    # ファイル名に含める日時情報を指定
    time_slice_format %Y%m%d
    # ログファイルの更新後に旧ログファイルへのログ記録を継続する時間を指定
    time_slice_wait 10m
    # ログをgzip形式で圧縮
    compress gzip
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このままだと /var/log/httpd ディレクトリのパーミッションエラーになってしまうので、/var/log/httpd　ディレクトリに一般ユーザー実行権限を与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod o+x /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定は以上となるので、td-agent をリロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで apache にアクセスした後に実際にログが保存されるか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /var/log/td-agent/httpd/
access.log.20151114.b524785e8e3b0d946
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent によってログが保存されたのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;ログをmongodbに保存&#34;&gt;ログをMongoDBに保存&lt;/h2&gt;

&lt;p&gt;まずは MongoDB をインストールするのでレポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/10gen.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10gen]
name=10gen Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686
gpgcheck=0
enabled=1
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum インストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mongo-10gen mongo-10gen-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB を起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定もしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig mongod on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB にアクセスして fluentd という名前のデータベースを作成します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type &amp;quot;help&amp;quot;.
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB の設定はこれで完了したので、td-agent の設定を変更してログの出力先を MongoDBに変更しましょう。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    # 出力に out_mongo プラグインを指定
    type mongo
    # ホスト指定
    host localhost
    # ポート指定
    port 27017
    # データベースを指定
    database fluentd
    # Collectionを指定
    collection apache_access
    # Capped Collection 機能を利用する
    capped
    # Collection の上限サイズを 1G に設定
    capped_size 1024m
    # 10秒おきにログを MongoDB に flush する
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent をリロードして設定を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは MongoDB にアクセスして『/』というパスへのアクセスのログ件数を確認することで、ログが MongoDB に保存されているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; db.apache_access.count({path: &amp;quot;/&amp;quot;});

23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログが23件保存されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;fluentd はリモートのサーバにログを送ることもでき、本番環境ではそのような構成になりますが、今回 fluentd の最低限の知識や基本的な設定はこれである程度学ぶことができたかと思います。&lt;br /&gt;
ここから先の細い設定などは&lt;a href=&#34;http://www.fluentd.org/&#34;&gt;公式サイト&lt;/a&gt;などでさらに学習していきましょう！&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Gooseつかってみた</title>
      <link>http://enomotodev.github.io/post/use-goose/</link>
      <pubDate>Wed, 11 Nov 2015 19:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/use-goose/</guid>
      <description>

&lt;h2 id=&#34;gooseとは&#34;&gt;Gooseとは&lt;/h2&gt;

&lt;p&gt;GooseとはGo言語で作られたDBマイグレーションツールです。&lt;br /&gt;
develop環境やproduction環境など各環境に簡単に設定を変更でき、かなり便利そうなので実際にMySQLで試してみました。&lt;/p&gt;

&lt;h2 id=&#34;gooseパッケージの取得&#34;&gt;Gooseパッケージの取得&lt;/h2&gt;

&lt;p&gt;まずは go get して Goose パッケージを取得します。&lt;br /&gt;
※ Goをインストールしていない人や、GOPATHを設定していない人は&lt;a href=&#34;http://golang-jp.org/doc/install#install&#34; target=&#34;_blank&#34;&gt;公式ドキュメント&lt;/a&gt;を参考に導入してみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get bitbucket.org/liamstask/goose/cmd/goose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dbディレクトリの作成&#34;&gt;dbディレクトリの作成&lt;/h2&gt;

&lt;p&gt;プロジェクトのルート直下に db ディレクトリを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir db
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの作成&#34;&gt;configファイルの作成&lt;/h2&gt;

&lt;p&gt;取得したGooseパッケージのサンプルからconfigファイルをコピーします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp $GOPATH/src/bitbucket.org/liamstask/goose/db-sample/dbconf.yml db/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの編集&#34;&gt;configファイルの編集&lt;/h2&gt;

&lt;p&gt;まずは先ほどコピーしてきたconfigファイルの中身をのぞいてみます。&lt;br /&gt;
デフォルトで test / develop / production のそれぞれの環境に PostgreSQL の driver が設定してあるのが、なんとなくわかるかと思います。&lt;/p&gt;

&lt;p&gt;db/dbconf.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

development:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

production:
    driver: postgres
    open: user=liam dbname=tester sslmode=verify-full

customimport:
    driver: customdriver
    open: customdriver open
    import: github.com/custom/driver
    dialect: mysql

environment_variable_config:
    driver: $DB_DRIVER
    open: $DATABASE_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は試すだけなので、developの部分のみ編集してみます。&lt;br /&gt;
MySQL のdriverは mymysql とのことなので、 driver には mymysql を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: user=liam dbname=tester sslmode=disable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に DB に接続するために open の箇所にユーザ名やデータベース名を設定します。&lt;br /&gt;
何種類か設定の仕方があるようなので下記を参考にしてみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;cloudsql:INSTANCE*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考までに下記のような場合の設定を載せておきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Host：localhost&lt;br /&gt;
Port：3306&lt;br /&gt;
データベース：test&lt;br /&gt;
ユーザ：root&lt;br /&gt;
パスワード：pass&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: tcp:localhost:3306*test/root/pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでDBの設定は完了です。&lt;/p&gt;

&lt;h2 id=&#34;db接続確認&#34;&gt;DB接続確認&lt;/h2&gt;

&lt;p&gt;goose status コマンドでDBに問題なく接続できているか確認できます。&lt;br /&gt;
これ以降の goose コマンドも全てプロジェクトルートで実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose status
goose: status for environment &#39;development&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようにエラーなく表示されたらOKです。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションファイルの作成&#34;&gt;マイグレーションファイルの作成&lt;/h2&gt;

&lt;p&gt;それではDB接続もOKなので、早速マイグレーションファイルを作りましょう。&lt;/p&gt;

&lt;p&gt;マイグレーションファイルは Go または SQL で書けるようなので、今回は簡単なSQLで書いてみます。&lt;/p&gt;

&lt;p&gt;それでは、goose create コマンドでマイグレーションファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose create CreateUsersTable sql
goose: created /project/db/migrations/20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでマイグレーションファイルのひな型が作成されました。&lt;br /&gt;
早速中身を見てみましょう。&lt;/p&gt;

&lt;p&gt;db/migrations/20151111194459_CreateUsersTable.sql.sql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied


-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルにCREATE文とDROP文をそれぞれ書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied
CREATE TABLE IF NOT EXISTS `users` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL COMMENT &#39;ユーザ名&#39;,
    PRIMARY KEY (`id`)
) ENGINE = InnoDB;

-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
DROP TABLE `users`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでマイグレーションファイルの準備はできたので、実際に実行してテーブルが作成されるか確認してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションの実行&#34;&gt;マイグレーションの実行&lt;/h2&gt;

&lt;p&gt;goose up コマンドでマイグレーションが実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose up
goose: migrating db environment &#39;development&#39;, current version: 0, target: 20151111194459
OK    20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーブルが作成されているか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
| users            |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; desc goose_db_version;
+------------+---------------------+------+-----+-------------------+----------------+
| Field      | Type                | Null | Key | Default           | Extra          |
+------------+---------------------+------+-----+-------------------+----------------+
| id         | bigint(20) unsigned | NO   | PRI | NULL              | auto_increment |
| version_id | bigint(20)          | NO   |     | NULL              |                |
| is_applied | tinyint(1)          | NO   |     | NULL              |                |
| tstamp     | timestamp           | YES  |     | CURRENT_TIMESTAMP |                |
+------------+---------------------+------+-----+-------------------+----------------+
4 rows in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
+----+----------------+------------+---------------------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが作成されているのと、マイグレーションのバージョン管理用の goose_db_version テーブルが作成されているのが確認できました。&lt;br /&gt;
次に今実行したマイグレーションをロールバックしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose down
goose: migrating db environment &#39;development&#39;, current version: 20151111194459, target: 0
OK    20151111194459_CreateUsersTable.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
|  3 | 20151111194459 |          0 | 2015-11-11 19:53:28 |
+----+----------------+------------+---------------------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが削除されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;goose をつかうことによって、簡単にマイグレーションすることができました。&lt;br /&gt;
最近、Go言語を使ったプロジェクトも増えてきているようなので、goose もこれからさらに活躍する場面が増えるのではないでしょうか。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>