<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on enomotodev</title>
    <link>http://enomotodev.github.io/tags/mysql/</link>
    <description>Recent content in Mysql on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2016 enomotodev</copyright>
    <lastBuildDate>Mon, 12 Sep 2016 23:23:16 +0900</lastBuildDate>
    
	<atom:link href="http://enomotodev.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOS 7 に Re:dash インストールして MySQL のデータをグラフ表示してみた</title>
      <link>http://enomotodev.github.io/post/install-redash/</link>
      <pubDate>Mon, 12 Sep 2016 23:23:16 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-redash/</guid>
      <description>作業環境  CentOS 7.2 Java 1.8.0_101 MySQL 5.7.14 Git 1.8.3.1  Docker + Docker Compose のインストール Re:dash は CentOS では Docker のコンテナ上で起動させるので、まずは Docker をインストールします。
Kernel のバージョンを確認する CentOS 7 に Docker をインストールするには Kernel が 3.10 以上ではないといけないようなので Kernel のバージョンを確認します。
$ uname -r 3.10.0-327.el7.x86_64  3.10 以上なので、Docker のインストールを進めていきます。
Docker のインストール まずは root ユーザに変更します。
$ sudo su -  ここからは root ユーザでの作業にになります。
次のコマンドで Docker のインストールができます。
# curl -fsSL https://get.docker.com/ | sh  インストールが完了したので、バージョンを確認します。</description>
    </item>
    
    <item>
      <title>Embulk を使って CSV から MySQL へデータ投入してみた</title>
      <link>http://enomotodev.github.io/post/embulk_csv_mysql/</link>
      <pubDate>Tue, 06 Sep 2016 23:19:17 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/embulk_csv_mysql/</guid>
      <description>今回は Embulk を使って、CSV から MySQL にデータを投入してみたいと思います。
Embulk とは Embulk とはバルクデータローダーと呼ばれる、データ転送ツールです。
Fluentd を開発した Tresure Data によって開発され、Fluentd を知っている方は、Fluentd のバッチ版だと考えると理解しやすいと思います。
（Fluentd についてはこちらで記事にしています）
Fluentd のように入力・出力のプラグインは多数公開されており、例えば、MySQL の入力プラグインと、ElasticSearch の出力プラグインを組み合わせることによって、MySQL のデータを ElasticSearch に移したりなど、異なるデータストア間でのデータの交換が容易に行うことができます。
作業環境  CentOS 7.2 Java 1.8.0_101 MySQL 5.7.14  ※ Embulk の実行には Java が必須となるので、事前にインストールしておきましょう。
Embulk のインストール GitHub に記載されている通りにコマンドを叩いていきます。
$ curl --create-dirs -o ~/.embulk/bin/embulk -L &amp;quot;http://dl.embulk.org/embulk-latest.jar&amp;quot; $ chmod +x ~/.embulk/bin/embulk $ echo &#39;export PATH=&amp;quot;$HOME/.embulk/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc $ source ~/.bashrc  以上で完了となるので、バージョンを確認してみます。
$ embulk --version embulk 0.</description>
    </item>
    
    <item>
      <title>CentOS 7 に MySQL 5.7 を yum インストールして初期設定までやってみた</title>
      <link>http://enomotodev.github.io/post/centos7_mysql57/</link>
      <pubDate>Thu, 01 Sep 2016 22:52:35 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/centos7_mysql57/</guid>
      <description>CentOS 7.2 上に MySQL 5.7 を yum インストールして、初期設定まで行ったので、その手順を記していきたいと思います。
はじめに CentOS 7 よりデータベースサーバの MySQL が MariaDB に置き換えられました。
もしすでに MariaDB がインストールされている場合はこれからインストールする MySQL と競合を起こさないように削除しましょう。
$ sudo yum remove mariadb-libs $ sudo rm -rf /var/lib/mysql  これで MariaDB 本体とデータフォルダを削除できました。
yum リポジトリの追加 CentOS 7 に MySQL 公式の yum リポジトリを追加します。
$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm  MySQL のインストール MySQL 公式の yum リポジトリが追加できたので、yum install コマンドでインストールしましょう。
$ sudo yum install mysql-community-server  バージョンを確認します。
$ mysqld --version mysqld Ver 5.</description>
    </item>
    
    <item>
      <title>閉包テーブル（Closure Table）を試してみた</title>
      <link>http://enomotodev.github.io/post/closure-table/</link>
      <pubDate>Thu, 19 Nov 2015 23:53:29 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/closure-table/</guid>
      <description>はじめに SQLアンチパターンという本を読んでいたら、再帰的なデータに対して『閉包テーブル（Closure Table）』という考え方があっったので、MySQL 5.6 で試してみました。
再帰的なデータとは、例えば上司を1人までもつことができ、部下は複数持つことができる、下記の組織図のようなツリー構造のデータのことを指します。
テーブル作成 それでは早速テーブルを作成してみましょう。
CREATE TABLE `Employees` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `name` varchar(255) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE `TreePaths` ( `ancestor` bigint(20) NOT NULL, `descendant` bigint(20) NOT NULL, PRIMARY KEY (`ancestor`,`descendant`), KEY `descendant` (`descendant`), CONSTRAINT `TreePaths_ibfk_1` FOREIGN KEY (`ancestor`) REFERENCES `Employees` (`id`), CONSTRAINT `TreePaths_ibfk_2` FOREIGN KEY (`descendant`) REFERENCES `Employees` (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  閉包テーブルでは、Employees テーブルに自分自身の id を親に持つカラムを設けるのではなく、別のテーブルを用いて、ツリー構造の情報を格納します。</description>
    </item>
    
    <item>
      <title>Gooseつかってみた</title>
      <link>http://enomotodev.github.io/post/use-goose/</link>
      <pubDate>Wed, 11 Nov 2015 19:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/use-goose/</guid>
      <description>Gooseとは GooseとはGo言語で作られたDBマイグレーションツールです。
develop環境やproduction環境など各環境に簡単に設定を変更でき、かなり便利そうなので実際にMySQLで試してみました。
Gooseパッケージの取得 まずは go get して Goose パッケージを取得します。
※ Goをインストールしていない人や、GOPATHを設定していない人は公式ドキュメントを参考に導入してみてください。
$ go get bitbucket.org/liamstask/goose/cmd/goose  dbディレクトリの作成 プロジェクトのルート直下に db ディレクトリを作成します。
$ mkdir db  configファイルの作成 取得したGooseパッケージのサンプルからconfigファイルをコピーします。
$ cp $GOPATH/src/bitbucket.org/liamstask/goose/db-sample/dbconf.yml db/  configファイルの編集 まずは先ほどコピーしてきたconfigファイルの中身をのぞいてみます。
デフォルトで test / develop / production のそれぞれの環境に PostgreSQL の driver が設定してあるのが、なんとなくわかるかと思います。
db/dbconf.yml
test: driver: postgres open: user=liam dbname=tester sslmode=disable development: driver: postgres open: user=liam dbname=tester sslmode=disable production: driver: postgres open: user=liam dbname=tester sslmode=verify-full customimport: driver: customdriver open: customdriver open import: github.</description>
    </item>
    
  </channel>
</rss>