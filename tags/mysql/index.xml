<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mysql on enomotodev</title>
    <link>http://enomotodev.github.io/tags/mysql/index.xml</link>
    <description>Recent content in Mysql on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2016 enomotodev</copyright>
    <atom:link href="http://enomotodev.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CentOS 7 に Re:dash インストールして MySQL のデータをグラフ表示してみた</title>
      <link>http://enomotodev.github.io/post/install-redash/</link>
      <pubDate>Mon, 12 Sep 2016 23:23:16 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-redash/</guid>
      <description>

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;li&gt;Java 1.8.0_101&lt;/li&gt;
&lt;li&gt;MySQL 5.7.14&lt;/li&gt;
&lt;li&gt;Git 1.8.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker-docker-compose-のインストール&#34;&gt;Docker + Docker Compose のインストール&lt;/h2&gt;

&lt;p&gt;Re:dash は CentOS では Docker のコンテナ上で起動させるので、まずは Docker をインストールします。&lt;/p&gt;

&lt;h3 id=&#34;kernel-のバージョンを確認する&#34;&gt;Kernel のバージョンを確認する&lt;/h3&gt;

&lt;p&gt;CentOS 7 に Docker をインストールするには Kernel が 3.10 以上ではないといけないようなので Kernel のバージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uname -r
3.10.0-327.el7.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.10 以上なので、Docker のインストールを進めていきます。&lt;/p&gt;

&lt;h3 id=&#34;docker-のインストール&#34;&gt;Docker のインストール&lt;/h3&gt;

&lt;p&gt;まずは root ユーザに変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo su -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここからは root ユーザでの作業にになります。&lt;/p&gt;

&lt;p&gt;次のコマンドで Docker のインストールができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# curl -fsSL https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、バージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker --version
Docker version 1.12.1, build 23cf638
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker を起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# service docker start
Redirecting to /bin/systemctl start  docker.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# chkconfig docker on
Note: Forwarding request to &#39;systemctl enable docker.service&#39;.
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Docker のインストールは完了です。&lt;/p&gt;

&lt;h3 id=&#34;docker-compose-のインストール&#34;&gt;Docker Compose のインストール&lt;/h3&gt;

&lt;p&gt;Re:dash は Docker コンテナの管理を Docker Compose で行っているので、Docker Compose もインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose/releases&#34; target=&#34;_blank&#34;&gt;GitHub のリリースページ&lt;/a&gt; から最新のコマンドをコピーして、実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
# chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Docker Compose のインストールが完了となりますので、バージョンを確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker-compose --version
docker-compose version 1.8.0, build f3628c7
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;re-dash-のインストール&#34;&gt;Re:dash のインストール&lt;/h2&gt;

&lt;p&gt;Docker + Docker Compose のインストールが完了したので、いよいよ Re:dash のインストールをしたいと思います。&lt;/p&gt;

&lt;p&gt;まずは、&lt;code&gt;git clone&lt;/code&gt; して、サンプルの設定ファイルを元に設定ファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# git clone https://github.com/getredash/redash.git
# cd redash/
# cp docker-compose-example.yml docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まずは PostgreSQL のコンテナを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker-compose up postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PostgreSQL のコンテナが起動したら、次のコマンドを実行していきます。&lt;/p&gt;

&lt;p&gt;なお、PostgreSQL のコンテナ起動後、端末は操作できなくなるので、別タブを開いたりして、再度アクセスし、root ユーザに変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ./setup/docker/create_database.sh
# docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Re:dash が起動したので、ブラウザからアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_login.png&#34; alt=&#34;Re:dash ログイン画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事ログインできました！&lt;/p&gt;

&lt;p&gt;ログイン画面が表示されたので、ログインしてみましょう。&lt;/p&gt;

&lt;p&gt;初期の Email、Password はこちらになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email：admin&lt;/li&gt;
&lt;li&gt;Password：admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_top.png&#34; alt=&#34;Re:dash TOP画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mysql-への接続&#34;&gt;MySQL への接続&lt;/h2&gt;

&lt;p&gt;画面右上の『Data Sources』 → 『New Data Source』をクリックし、MySQL の設定を行っていきます。&lt;/p&gt;

&lt;p&gt;ここで注意するのは、MySQL はコンテナのホスト側にあるので、MySQL の Host は Re:dash への接続元 IP になります。&lt;/p&gt;

&lt;p&gt;Re:dash への接続元 IP はコンソールに出力されている Re:dash のアクセスログから判断することができます。&lt;/p&gt;

&lt;h2 id=&#34;グラフ表示する&#34;&gt;グラフ表示する&lt;/h2&gt;

&lt;p&gt;まず、画面上部の『Queries』 → 『New Query』から Query 入力画面に移動し、『Data Source』に先ほど登録した Data Source がきちんと設定されていることを確認します。&lt;/p&gt;

&lt;p&gt;次に、入力フォームに SQL を記述し、『Execute』ボタンを押します。&lt;/p&gt;

&lt;p&gt;そうすると下記のように結果が出力されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_output.png&#34; alt=&#34;Re:dash SQL 結果画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;結果に問題ないようであれば、『Save』ボタンで今回の SQL を保存することができます。&lt;/p&gt;

&lt;p&gt;結果をグラフ化するには『+ NEW VISUALIZATION』ボタンを押して、Visualization Editor に移動します。&lt;/p&gt;

&lt;p&gt;画面に従って、グラフの種類や、縦軸・横軸に表示するカラムを設定していくと次のようなグラフが完成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_graph.png&#34; alt=&#34;Re:dash グラフ表示&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Re:dash を使うことによって、SQL の結果を簡単にグラフ化することができました。&lt;/p&gt;

&lt;p&gt;Re:dash は一つひとつの SQL やグラフに固定の URL が割り振られるので、URL さえあれば、SQL での分析結果をみんなで共有することができ、分析結果の属人化を防ぐことができます。&lt;/p&gt;

&lt;p&gt;導入自体もそれほど難しくはないので、今後積極的に活用していきたいと思います。&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-12&#34;&gt;
    &lt;div style=&#34;text-align: center;&#34;&gt;
      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;6607037827&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;

      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;8083771024&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Embulk を使って CSV から MySQL へデータ投入してみた</title>
      <link>http://enomotodev.github.io/post/embulk_csv_mysql/</link>
      <pubDate>Tue, 06 Sep 2016 23:19:17 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/embulk_csv_mysql/</guid>
      <description>

&lt;p&gt;今回は Embulk を使って、CSV から MySQL にデータを投入してみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;embulk-とは&#34;&gt;Embulk とは&lt;/h2&gt;

&lt;p&gt;Embulk とはバルクデータローダーと呼ばれる、データ転送ツールです。&lt;/p&gt;

&lt;p&gt;Fluentd を開発した Tresure Data によって開発され、Fluentd を知っている方は、Fluentd のバッチ版だと考えると理解しやすいと思います。&lt;/p&gt;

&lt;p&gt;（Fluentd については&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;こちら&lt;/a&gt;で記事にしています）&lt;/p&gt;

&lt;p&gt;Fluentd のように入力・出力のプラグインは多数公開されており、例えば、MySQL の入力プラグインと、ElasticSearch の出力プラグインを組み合わせることによって、MySQL のデータを ElasticSearch に移したりなど、異なるデータストア間でのデータの交換が容易に行うことができます。&lt;/p&gt;

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;li&gt;Java 1.8.0_101&lt;/li&gt;
&lt;li&gt;MySQL 5.7.14&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※ Embulk の実行には Java が必須となるので、事前にインストールしておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;embulk-のインストール&#34;&gt;Embulk のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/embulk/embulk#linux--mac--bsd&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; に記載されている通りにコマンドを叩いていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl --create-dirs -o ~/.embulk/bin/embulk -L &amp;quot;http://dl.embulk.org/embulk-latest.jar&amp;quot;
$ chmod +x ~/.embulk/bin/embulk
$ echo &#39;export PATH=&amp;quot;$HOME/.embulk/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で完了となるので、バージョンを確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk --version
embulk 0.8.13
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;seed-yml-から設定ファイルを自動生成する&#34;&gt;seed.yml から設定ファイルを自動生成する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/livedoor/datasets&#34; target=&#34;_blank&#34;&gt;livedoor グルメの研究用データセット&lt;/a&gt;を使い、口コミのデータを MySQL に投入したいと思います。&lt;/p&gt;

&lt;p&gt;まずは、口コミデータ CSV をダウンロードしてきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget -O test.tar.gz https://github.com/livedoor/datasets/blob/master/ldgourmet.tar.gz?raw=true
$ tar xfvz test.tar.gz
areas.csv
categories.csv
prefs.csv
ratings.csv
rating_votes.csv
restaurants.csv
stations.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何個か CSV ファイルがありますが、この中から &lt;code&gt;ratings.csv&lt;/code&gt; のみ使用していきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ratings.csv&lt;/code&gt; は次のような内容になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ratings.csv&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;id,restaurant_id,user_id,total,food,service,atmosphere,cost_performance,title,body,purpose,created_on
156445,310595,ee02f26a,5,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2006-10-07 05:06:09&amp;quot;
3842,10237,fcc21401,1,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2004-10-20 00:34:28&amp;quot;
144379,3334,06412af7,2,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2006-06-03 16:07:43&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Embulk は &lt;code&gt;config.yml&lt;/code&gt; ファイルを元にデータの移行を行うのですが、ゼロから記述する場合、CSV ファイルの文字コード、改行コード、デリミタなどをいちいち指定していくのは大変なので、設定ファイルを自動生成してくれる &lt;code&gt;embulk guess&lt;/code&gt; コマンドを使って、&lt;code&gt;config.yml&lt;/code&gt; ファイルを作成したいと思います。&lt;/p&gt;

&lt;p&gt;自動生成するにしても最低限の情報がなければいけないので、&lt;code&gt;seed.yml&lt;/code&gt; ファイルに次のように記述します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;seed.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
  type: file
  path_prefix: &amp;quot;./ratings.csv&amp;quot;
out:
  type: stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力ファイル名に &lt;code&gt;config.yml&lt;/code&gt; を指定して &lt;code&gt;embulk guess&lt;/code&gt; コマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk guess seed.yml -o config.yml
2016-09-05 16:30:57.386 +0000: Embulk v0.8.13
2016-09-05 16:30:58.470 +0000 [INFO] (0001:guess): Listing local files at directory &#39;.&#39; filtering filename by prefix &#39;ratings.csv&#39;
2016-09-05 16:30:58.474 +0000 [INFO] (0001:guess): Loading files [ratings.csv]
2016-09-05 16:30:58.620 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/gzip from a load path
2016-09-05 16:30:58.630 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/bzip2 from a load path
2016-09-05 16:30:58.645 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/json from a load path
2016-09-05 16:30:58.653 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/csv from a load path
in:
  type: file
  path_prefix: ./ratings.csv
  parser:
    charset: UTF-8
    newline: CRLF
    type: csv
    delimiter: &#39;,&#39;
    quote: &#39;&amp;quot;&#39;
    escape: &#39;&amp;quot;&#39;
    trim_if_not_quoted: false
    skip_header_lines: 1
    allow_extra_columns: false
    allow_optional_columns: false
    columns:
    - {name: id, type: long}
    - {name: restaurant_id, type: long}
    - {name: user_id, type: string}
    - {name: total, type: long}
    - {name: food, type: long}
    - {name: service, type: long}
    - {name: atmosphere, type: long}
    - {name: cost_performance, type: long}
    - {name: title, type: string}
    - {name: body, type: string}
    - {name: purpose, type: long}
    - {name: created_on, type: timestamp, format: &#39;%Y-%m-%d %H:%M:%S&#39;}
out: {type: stdout}
Created &#39;config.yml&#39; file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで次のような &lt;code&gt;config.yml&lt;/code&gt; が生成されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
  type: file
  path_prefix: ./ratings.csv
  parser:
    charset: UTF-8
    newline: CRLF
    type: csv
    delimiter: &#39;,&#39;
    quote: &#39;&amp;quot;&#39;
    escape: &#39;&amp;quot;&#39;
    trim_if_not_quoted: false
    skip_header_lines: 1
    allow_extra_columns: false
    allow_optional_columns: false
    columns:
    - {name: id, type: long}
    - {name: restaurant_id, type: long}
    - {name: user_id, type: string}
    - {name: total, type: long}
    - {name: food, type: long}
    - {name: service, type: long}
    - {name: atmosphere, type: long}
    - {name: cost_performance, type: long}
    - {name: title, type: string}
    - {name: body, type: string}
    - {name: purpose, type: long}
    - {name: created_on, type: timestamp, format: &#39;%Y-%m-%d %H:%M:%S&#39;}
out: {type: stdout}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;embulk-filter-column-プラグイン&#34;&gt;&lt;code&gt;embulk-filter-column&lt;/code&gt; プラグイン&lt;/h2&gt;

&lt;p&gt;このまま MySQL にデータを取り込んでも良いのですが、今回は必要なカラムを絞り、&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;restaurant_id&lt;/code&gt;, &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;total&lt;/code&gt;, &lt;code&gt;created_on&lt;/code&gt; の5つのみのデータを扱うことにしたいと思います。&lt;/p&gt;

&lt;p&gt;カラムの絞り込みには &lt;code&gt;embulk-filter-column&lt;/code&gt; という便利なプラグインがあるので、これを使ってみたいと思います。&lt;/p&gt;

&lt;p&gt;まずは &lt;code&gt;embulk gem install&lt;/code&gt; コマンドでインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk gem install embulk-filter-column
2016-09-05 16:37:50.601 +0000: Embulk v0.8.13
Fetching: embulk-filter-column-0.5.4.gem (100%)
Successfully installed embulk-filter-column-0.5.4
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが終わったら &lt;code&gt;config.yml&lt;/code&gt; の &lt;code&gt;in&lt;/code&gt; と &lt;code&gt;out&lt;/code&gt; の間に、次のように必要なカラムのみ記述します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
（略）
filters:
  - type: column
    columns:
      - {name: &#39;id&#39;}
      - {name: &#39;restaurant_id&#39;}
      - {name: &#39;user_id&#39;}
      - {name: &#39;total&#39;}
      - {name: &#39;created_on&#39;}
out: {type: stdout}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-にデータを取り込む&#34;&gt;MySQL にデータを取り込む&lt;/h2&gt;

&lt;p&gt;いよいよ MySQL にデータを取り込んでみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;embulk-filter-column&lt;/code&gt; プラグインの時と同じように、今度は MySQL の出力用のプラグインの &lt;code&gt;embulk-output-mysql&lt;/code&gt; をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk gem install embulk-output-mysql
2016-09-05 16:50:54.513 +0000: Embulk v0.8.13
Fetching: embulk-output-mysql-0.6.3.gem (100%)
Successfully installed embulk-output-mysql-0.6.3
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プラグインのインストールが完了したら &lt;code&gt;config.yml&lt;/code&gt; の &lt;code&gt;out&lt;/code&gt; に &lt;code&gt;embulk-output-mysql&lt;/code&gt; プラグイン用の設定を記述していきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;out:
  type: mysql
  host: localhost
  user: root
  password: uhsd!Aid;3Zt
  database: testdb
  table: ratings
  mode: replace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; という部分は &lt;code&gt;insert&lt;/code&gt; も選択することができ、Embulk を繰り返した時に、&lt;code&gt;insert&lt;/code&gt; だと追記、&lt;code&gt;replace&lt;/code&gt; だと置き換えになります。今回は &lt;code&gt;replace&lt;/code&gt; を選択しました。&lt;/p&gt;

&lt;p&gt;データベースは事前に作成しておく必要がありますが、テーブルやスキーマの作成は Embulk 側で自動で作成してくれるので、事前に作成する必要はありません。&lt;/p&gt;

&lt;p&gt;それでは &lt;code&gt;embulk run&lt;/code&gt; コマンドでデータの取り込みを開始したいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk run config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;20万件以上のデータなので、少し時間がかかると思います。&lt;/p&gt;

&lt;p&gt;※ 私の環境では完了するまで 5 分ほどかかりました。&lt;/p&gt;

&lt;p&gt;データの取り込みが完了したので、MySQL のデータを確認してます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysql&amp;gt; select count(*) from ratings;
+----------+
| count(*) |
+----------+
|   205805 |
+----------+
1 row in set (0.04 sec)

mysql&amp;gt; select * from ratings limit 20;
+--------+---------------+----------+-------+---------------------+
| id     | restaurant_id | user_id  | total | created_on          |
+--------+---------------+----------+-------+---------------------+
| 156445 |        310595 | ee02f26a |     5 | 2006-10-07 05:06:09 |
|   3842 |         10237 | fcc21401 |     1 | 2004-10-20 00:34:28 |
| 144379 |          3334 | 06412af7 |     2 | 2006-06-03 16:07:43 |
| 144377 |         15163 | 06412af7 |     5 | 2006-06-03 15:14:45 |
|  75967 |           567 | 4ceec99d |     3 | 2004-12-01 23:12:29 |
| 104898 |          1026 | 4ceec99d |     5 | 2005-01-04 03:57:02 |
|  86073 |          1058 | 4ceec99d |     5 | 2004-11-09 00:34:17 |
|  13968 |          2569 | 4ceec99d |     3 | 2004-09-22 23:29:57 |
|  97833 |          3309 | 4ceec99d |     4 | 2005-05-28 23:17:16 |
|  13991 |          3648 | 4ceec99d |     4 | 2004-09-27 11:14:50 |
|  69284 |          4226 | 4ceec99d |     5 | 2004-10-31 16:32:43 |
|   5658 |          4659 | 4ceec99d |     4 | 2004-09-22 23:04:12 |
|  89226 |          5075 | 4ceec99d |     5 | 2005-03-21 22:56:45 |
|  15001 |          5099 | 4ceec99d |     3 | 2004-09-24 11:42:10 |
| 116898 |          5219 | 4ceec99d |     5 | 2005-09-20 00:53:40 |
|  21991 |          5449 | 4ceec99d |     5 | 2004-11-10 00:13:09 |
|  68974 |          6033 | 4ceec99d |     4 | 2004-11-03 23:45:02 |
|  15434 |          6899 | 4ceec99d |     5 | 2004-09-22 22:29:51 |
| 116890 |          8638 | 4ceec99d |     4 | 2005-09-20 00:34:25 |
|  13997 |          8895 | 4ceec99d |     5 | 2004-09-27 10:54:32 |
+--------+---------------+----------+-------+---------------------+
20 rows in set (0.00 sec)

mysql&amp;gt; select total, count(*) from ratings group by total;
+-------+----------+
| total | count(*) |
+-------+----------+
|     0 |     7159 |
|     1 |     4975 |
|     2 |    14565 |
|     3 |    64743 |
|     4 |    79593 |
|     5 |    34770 |
+-------+----------+
6 rows in set (0.10 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Embulk を使って CSV から MySQL へデータを投入してみました。&lt;/p&gt;

&lt;p&gt;もう一度 Embulk を使うことによって、今度は MySQL から ElasticSearch などにデータを投入することもできるので、いろいろな使い方を考えていきたいと思います。&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-12&#34;&gt;
    &lt;div style=&#34;text-align: center;&#34;&gt;
      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;6607037827&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;

      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;8083771024&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 7 に MySQL 5.7 を yum インストールして初期設定までやってみた</title>
      <link>http://enomotodev.github.io/post/centos7_mysql57/</link>
      <pubDate>Thu, 01 Sep 2016 22:52:35 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/centos7_mysql57/</guid>
      <description>

&lt;p&gt;CentOS 7.2 上に MySQL 5.7 を yum インストールして、初期設定まで行ったので、その手順を記していきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;CentOS 7 よりデータベースサーバの MySQL が MariaDB に置き換えられました。&lt;/p&gt;

&lt;p&gt;もしすでに MariaDB がインストールされている場合はこれからインストールする MySQL と競合を起こさないように削除しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum remove mariadb-libs
$ sudo rm -rf /var/lib/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで MariaDB 本体とデータフォルダを削除できました。&lt;/p&gt;

&lt;h2 id=&#34;yum-リポジトリの追加&#34;&gt;yum リポジトリの追加&lt;/h2&gt;

&lt;p&gt;CentOS 7 に &lt;a href=&#34;http://dev.mysql.com/downloads/repo/yum/&#34; target=&#34;_blank&#34;&gt;MySQL 公式の yum リポジトリ&lt;/a&gt;を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-のインストール&#34;&gt;MySQL のインストール&lt;/h2&gt;

&lt;p&gt;MySQL 公式の yum リポジトリが追加できたので、&lt;code&gt;yum install&lt;/code&gt; コマンドでインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum install mysql-community-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysqld --version
mysqld  Ver 5.7.14 for Linux on x86_64 (MySQL Community Server (GPL))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事 MySQL 5.7 がインストールできました！&lt;/p&gt;

&lt;h2 id=&#34;mysql-の起動&#34;&gt;MySQL の起動&lt;/h2&gt;

&lt;p&gt;MySQL がインストールできたので、早速起動させましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl start mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl enable mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-の初期パスワード確認&#34;&gt;MySQL の初期パスワード確認&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 では、初回起動時に初期パスワードが生成されるので、ログファイルから生成されたパスワードを確認する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ $ sudo cat /var/log/mysqld.log | grep password
2016-09-01T13:09:03.337119Z 1 [Note] A temporary password is generated for root@localhost: uhsd!Aid;3Zt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回の場合、&lt;strong&gt;uhsd!Aid;3Zt&lt;/strong&gt; の部分が初期パスワードになります。&lt;/p&gt;

&lt;h2 id=&#34;mysql-のセキュリティ設定&#34;&gt;MySQL のセキュリティ設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mysql_secure_installation&lt;/code&gt; コマンドを実行して、MySQL のセキュリティ設定を行っていきます。&lt;/p&gt;

&lt;p&gt;対話形式なので、比較的簡単に最低限必要と考えられるセキュリティの設定ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql_secure_installation

Securing the MySQL server deployment.

Enter password for user root: # ログファイルから取得した初期パスワードを入力します

The existing password for the user account root has expired. Please set a new password.

New password: # root ユーザの新規パスワードを入力します

Re-enter new password: # 確認用にもう一度入力します
The &#39;validate_password&#39; plugin is installed on the server.
The subsequent steps will run with the existing configuration
of the plugin.
Using existing password for root.

Estimated strength of the password: 100
Change the password for root ? ((Press y|Y for Yes, any other key for No) : y

By default, a MySQL installation has an anonymous user,
allowing anyone to log into MySQL without having to have
a user account created for them. This is intended only for
testing, and to make the installation go a bit smoother.
You should remove them before moving into a production
environment.

Remove anonymous users? (Press y|Y for Yes, any other key for No) : y # 匿名ユーザーアカウントを削除
Success.


Normally, root should only be allowed to connect from
&#39;localhost&#39;. This ensures that someone cannot guess at
the root password from the network.

Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y # ローカルホスト以外からアクセス可能な root アカウントを削除
Success.

By default, MySQL comes with a database named &#39;test&#39; that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.


Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y # test データベースの削除
 - Dropping test database...
Success.

 - Removing privileges on test database...
Success.

Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.

Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y
Success.

All done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-へのログイン確認&#34;&gt;MySQL へのログイン確認&lt;/h2&gt;

&lt;p&gt;さきほど設定した新しいパスワードでログインできるかどうか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -u root -p
Enter password: # 新しいパスワードを入力
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 11
Server version: 5.7.14 MySQL Community Server (GPL)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定変更&#34;&gt;設定変更&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 からパスワードの有効期限がデフォルトで360日になり、360日を経過するとパスワードの変更を促されて MySQL にログインできなくなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;default_password_lifetime&lt;/code&gt; の値を &lt;code&gt;0&lt;/code&gt; に変更して、この有効期限の設定を無効にしたいと思います。&lt;/p&gt;

&lt;p&gt;また、デフォルトの文字コードも UTF-8 に変更します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/my.cnf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
.
.
.
character-set-server = utf8
default_password_lifetime = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL を再起動させ、設定内容を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl restart mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で設定は完了となります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;CentOS 7 に MySQL 5.7 を yum インストールし、最低限の設定を行いました。&lt;/p&gt;

&lt;p&gt;本番環境で運用する際は、チューニングも含めて、さらに細かい設定が必要になってくると思いますが、サービスに合わせて適切な設定を考えていきたいと思います。&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-12&#34;&gt;
    &lt;div style=&#34;text-align: center;&#34;&gt;
      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;6607037827&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;

      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;8083771024&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>閉包テーブル（Closure Table）を試してみた</title>
      <link>http://enomotodev.github.io/post/closure-table/</link>
      <pubDate>Thu, 19 Nov 2015 23:53:29 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/closure-table/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;SQLアンチパターンという本を読んでいたら、再帰的なデータに対して『閉包テーブル（Closure Table）』という考え方があっったので、MySQL 5.6 で試してみました。&lt;br /&gt;
再帰的なデータとは、例えば上司を1人までもつことができ、部下は複数持つことができる、下記の組織図のようなツリー構造のデータのことを指します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/soshikizu.png&#34; alt=&#34;組織図&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;テーブル作成&#34;&gt;テーブル作成&lt;/h2&gt;

&lt;p&gt;それでは早速テーブルを作成してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `Employees` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `TreePaths` (
  `ancestor` bigint(20) NOT NULL,
  `descendant` bigint(20) NOT NULL,
  PRIMARY KEY (`ancestor`,`descendant`),
  KEY `descendant` (`descendant`),
  CONSTRAINT `TreePaths_ibfk_1` FOREIGN KEY (`ancestor`) REFERENCES `Employees` (`id`),
  CONSTRAINT `TreePaths_ibfk_2` FOREIGN KEY (`descendant`) REFERENCES `Employees` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;閉包テーブルでは、Employees テーブルに自分自身の id を親に持つカラムを設けるのではなく、別のテーブルを用いて、ツリー構造の情報を格納します。&lt;br /&gt;
このテーブルには親子関係の組み合わせを格納するのですが、直接の子ではない（2つ以上離れている）場合も子と見なすのと、自分自身も子と見なします。&lt;br /&gt;
下の図の場合、１の子は１〜８の全てになり、３の子は３〜４、５の子は５〜８といった感じになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/soshikizu_num.png&#34; alt=&#34;組織図（番号）&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一応、テーブルにまとめました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;データ作成&#34;&gt;データ作成&lt;/h2&gt;

&lt;p&gt;このあと実際にクエリを発行したりするので、テストデータを INSERT しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO `Employees` (`id`, `name`) VALUES
(1, &amp;quot;遠藤&amp;quot;), (2, &amp;quot;田中&amp;quot;), (3, &amp;quot;佐藤&amp;quot;), (4, &amp;quot;原田&amp;quot;),
(5, &amp;quot;吉田&amp;quot;), (6, &amp;quot;古田&amp;quot;), (7, &amp;quot;鈴木&amp;quot;), (8, &amp;quot;松井&amp;quot;);

INSERT INTO `TreePaths` (`ancestor`, `descendant`) VALUES
(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8),
(2, 2), (3, 3), (3, 4), (4, 4), (5, 5), (5, 6), (5, 7), (5, 8),
(6, 6), (6, 7), (7, 7), (8, 8);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;子を全取得&#34;&gt;子を全取得&lt;/h2&gt;

&lt;p&gt;子を全取得するのはとても簡単にできます。&lt;br /&gt;
例えば５の子を全部取得するには TreePaths テーブルで親が５の行を探すだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SELECT e.*
    -&amp;gt; FROM Employees AS e
    -&amp;gt;   INNER JOIN TreePaths AS t ON e.id = t.descendant
    -&amp;gt; WHERE t.ancestor = 5;
+----+--------+
| id | name   |
+----+--------+
|  5 | 吉田   |
|  6 | 古田   |
|  7 | 鈴木   |
|  8 | 松井   |
+----+--------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;親を全取得&#34;&gt;親を全取得&lt;/h2&gt;

&lt;p&gt;次に、７の親を全部取得してみます。
先ほどとは逆に TreePaths テーブルで子が７の行を探すだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SELECT e.*
    -&amp;gt; FROM Employees AS e
    -&amp;gt;   INNER JOIN TreePaths AS t ON e.id = t.ancestor
    -&amp;gt; WHERE t.descendant = 7;
+----+--------+
| id | name   |
+----+--------+
|  1 | 遠藤   |
|  5 | 吉田   |
|  6 | 古田   |
|  7 | 鈴木   |
+----+--------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;データを登録&#34;&gt;データを登録&lt;/h2&gt;

&lt;p&gt;IDが４のデータに子をひとつ登録してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO Employees (`name`) VALUES (&amp;quot;本田&amp;quot;);  // LAST_INSERT_ID() = 9

INSERT INTO TreePaths (ancestor, descendant)
  SELECT t.ancestor, 9
  FROM TreePaths AS t
  WHERE t.descendant = 4
UNION ALL
  SELECT 9, 9;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;少しわかりづらいかもしれませんが、考え方としてはIDが４の親全てに新規で追加した子のIDを持たせるといった感じです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;親一覧の取得、子一覧の取得、データの登録を実際にやってみましたが、どれも比較的簡単なSQLで対応できました。&lt;br /&gt;
他のメリットとしては、どれだけ階層が深くなっても特に問題がないということです。SQLもどれだけ階層が深くなっても変わりません。&lt;/p&gt;

&lt;p&gt;階層構造のデータを格納するときは、この閉包テーブル（Closure Table）を試してみてはいかがでしょうか。&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-12&#34;&gt;
    &lt;div style=&#34;text-align: center;&#34;&gt;
      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;6607037827&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;

      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;8083771024&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Gooseつかってみた</title>
      <link>http://enomotodev.github.io/post/use-goose/</link>
      <pubDate>Wed, 11 Nov 2015 19:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/use-goose/</guid>
      <description>

&lt;h2 id=&#34;gooseとは&#34;&gt;Gooseとは&lt;/h2&gt;

&lt;p&gt;GooseとはGo言語で作られたDBマイグレーションツールです。&lt;br /&gt;
develop環境やproduction環境など各環境に簡単に設定を変更でき、かなり便利そうなので実際にMySQLで試してみました。&lt;/p&gt;

&lt;h2 id=&#34;gooseパッケージの取得&#34;&gt;Gooseパッケージの取得&lt;/h2&gt;

&lt;p&gt;まずは go get して Goose パッケージを取得します。&lt;br /&gt;
※ Goをインストールしていない人や、GOPATHを設定していない人は&lt;a href=&#34;http://golang-jp.org/doc/install#install&#34; target=&#34;_blank&#34;&gt;公式ドキュメント&lt;/a&gt;を参考に導入してみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get bitbucket.org/liamstask/goose/cmd/goose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dbディレクトリの作成&#34;&gt;dbディレクトリの作成&lt;/h2&gt;

&lt;p&gt;プロジェクトのルート直下に db ディレクトリを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir db
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの作成&#34;&gt;configファイルの作成&lt;/h2&gt;

&lt;p&gt;取得したGooseパッケージのサンプルからconfigファイルをコピーします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp $GOPATH/src/bitbucket.org/liamstask/goose/db-sample/dbconf.yml db/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの編集&#34;&gt;configファイルの編集&lt;/h2&gt;

&lt;p&gt;まずは先ほどコピーしてきたconfigファイルの中身をのぞいてみます。&lt;br /&gt;
デフォルトで test / develop / production のそれぞれの環境に PostgreSQL の driver が設定してあるのが、なんとなくわかるかと思います。&lt;/p&gt;

&lt;p&gt;db/dbconf.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

development:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

production:
    driver: postgres
    open: user=liam dbname=tester sslmode=verify-full

customimport:
    driver: customdriver
    open: customdriver open
    import: github.com/custom/driver
    dialect: mysql

environment_variable_config:
    driver: $DB_DRIVER
    open: $DATABASE_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は試すだけなので、developの部分のみ編集してみます。&lt;br /&gt;
MySQL のdriverは mymysql とのことなので、 driver には mymysql を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: user=liam dbname=tester sslmode=disable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に DB に接続するために open の箇所にユーザ名やデータベース名を設定します。&lt;br /&gt;
何種類か設定の仕方があるようなので下記を参考にしてみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;cloudsql:INSTANCE*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考までに下記のような場合の設定を載せておきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Host：localhost&lt;br /&gt;
Port：3306&lt;br /&gt;
データベース：test&lt;br /&gt;
ユーザ：root&lt;br /&gt;
パスワード：pass&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: tcp:localhost:3306*test/root/pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでDBの設定は完了です。&lt;/p&gt;

&lt;h2 id=&#34;db接続確認&#34;&gt;DB接続確認&lt;/h2&gt;

&lt;p&gt;goose status コマンドでDBに問題なく接続できているか確認できます。&lt;br /&gt;
これ以降の goose コマンドも全てプロジェクトルートで実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose status
goose: status for environment &#39;development&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようにエラーなく表示されたらOKです。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションファイルの作成&#34;&gt;マイグレーションファイルの作成&lt;/h2&gt;

&lt;p&gt;それではDB接続もOKなので、早速マイグレーションファイルを作りましょう。&lt;/p&gt;

&lt;p&gt;マイグレーションファイルは Go または SQL で書けるようなので、今回は簡単なSQLで書いてみます。&lt;/p&gt;

&lt;p&gt;それでは、goose create コマンドでマイグレーションファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose create CreateUsersTable sql
goose: created /project/db/migrations/20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでマイグレーションファイルのひな型が作成されました。&lt;br /&gt;
早速中身を見てみましょう。&lt;/p&gt;

&lt;p&gt;db/migrations/20151111194459_CreateUsersTable.sql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied


-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルにCREATE文とDROP文をそれぞれ書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied
CREATE TABLE IF NOT EXISTS `users` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL COMMENT &#39;ユーザ名&#39;,
    PRIMARY KEY (`id`)
) ENGINE = InnoDB;

-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
DROP TABLE `users`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでマイグレーションファイルの準備はできたので、実際に実行してテーブルが作成されるか確認してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションの実行&#34;&gt;マイグレーションの実行&lt;/h2&gt;

&lt;p&gt;goose up コマンドでマイグレーションが実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose up
goose: migrating db environment &#39;development&#39;, current version: 0, target: 20151111194459
OK    20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーブルが作成されているか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
| users            |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; desc goose_db_version;
+------------+---------------------+------+-----+-------------------+----------------+
| Field      | Type                | Null | Key | Default           | Extra          |
+------------+---------------------+------+-----+-------------------+----------------+
| id         | bigint(20) unsigned | NO   | PRI | NULL              | auto_increment |
| version_id | bigint(20)          | NO   |     | NULL              |                |
| is_applied | tinyint(1)          | NO   |     | NULL              |                |
| tstamp     | timestamp           | YES  |     | CURRENT_TIMESTAMP |                |
+------------+---------------------+------+-----+-------------------+----------------+
4 rows in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
+----+----------------+------------+---------------------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが作成されているのと、マイグレーションのバージョン管理用の goose_db_version テーブルが作成されているのが確認できました。&lt;br /&gt;
次に今実行したマイグレーションをロールバックしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose down
goose: migrating db environment &#39;development&#39;, current version: 20151111194459, target: 0
OK    20151111194459_CreateUsersTable.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
|  3 | 20151111194459 |          0 | 2015-11-11 19:53:28 |
+----+----------------+------------+---------------------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが削除されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;goose をつかうことによって、簡単にマイグレーションすることができました。&lt;br /&gt;
最近、Go言語を使ったプロジェクトも増えてきているようなので、goose もこれからさらに活躍する場面が増えるのではないでしょうか。&lt;/p&gt;

&lt;div class=&#34;row&#34;&gt;
  &lt;div class=&#34;col-sm-12&#34;&gt;
    &lt;div style=&#34;text-align: center;&#34;&gt;
      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;6607037827&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;

      &lt;script async src=&#34;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&#34;&gt;&lt;/script&gt;
      &lt;ins class=&#34;adsbygoogle&#34;
           style=&#34;display:inline-block;width:300px;height:250px&#34;
           data-ad-client=&#34;ca-pub-8451558329170757&#34;
           data-ad-slot=&#34;8083771024&#34;&gt;&lt;/ins&gt;
      &lt;script&gt;
          (adsbygoogle = window.adsbygoogle || []).push({});
      &lt;/script&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>