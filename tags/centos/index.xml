<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Centos on enomotodev</title>
    <link>http://enomotodev.github.io/tags/centos/</link>
    <description>Recent content in Centos on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2016 enomotodev</copyright>
    <lastBuildDate>Thu, 30 Mar 2017 22:21:54 +0900</lastBuildDate>
    
	<atom:link href="http://enomotodev.github.io/tags/centos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOS に Aerospike インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-aerospike/</link>
      <pubDate>Thu, 30 Mar 2017 22:21:54 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-aerospike/</guid>
      <description>Aerospike とは Aerospike（エアロスパイク）とは、米 Aerospike 社によって開発されている NoSQL データベースです
とにかく高速であると言われており、最近では日本の企業でも採用事例が増えてきています
今回は OSS 版を CentOS 上に構築してみたいと思います
作業環境  CentOS 7.3  Aerospike のインストール 公式ドキュメントを参考に Aerospike をインストールします
$ wget -O aerospike.tgz &#39;http://aerospike.com/download/server/latest/artifact/el7&#39; $ tar -xvf aerospike.tgz $ cd aerospike-server-community-3.12.0-el7/ $ sudo ./asinstall  自動起動設定をして、Aerospike を起動します
$ sudo systemctl enable aerospike $ sudo systemctl start aerospike  Aerospike が起動したのでステータスを確認してみましょう
$ sudo systemctl status aerospike ● aerospike.service - Aerospike Server Loaded: loaded (/usr/lib/systemd/system/aerospike.service; enabled; vendor preset: disabled) Drop-In: /etc/systemd/system/aerospike.</description>
    </item>
    
    <item>
      <title>CentOS に pyenv で Python インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-pyenv/</link>
      <pubDate>Thu, 29 Dec 2016 14:29:02 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-pyenv/</guid>
      <description>pyenv とは pyenv とは Python のバージョン管理を行なうコマンドラインツールで、複数のバージョンの Python のインストールや、インストールしたバージョンの変更を簡単に行うことができます。
Ruby では rbenv + ruby-build が有名ですが、それの Python 版だと考えていただけたらと思います。
作業環境  CentOS 7.3  pyenv のインストール まずは依存パッケージを yum でインストールします。
$ sudo yum install gcc zlib-devel bzip2 bzip2-devel readline readline-devel sqlite sqlite-devel openssl openssl-devel git  pyenv を ~/.pyenv に git clone します。
$ git clone https://github.com/yyuu/pyenv.git ~/.pyenv  ~/.bash_profile に環境変数などを設定します。
$ echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile $ echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile $ echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>
      <title>systemd を使って自作スクリプトをサービス化してみた</title>
      <link>http://enomotodev.github.io/post/systemd-original-service/</link>
      <pubDate>Sat, 24 Sep 2016 01:42:59 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/systemd-original-service/</guid>
      <description>作業環境  CentOS 7.2  systemd とは systemd とは、Lennart Poettering と Kay Sievers を中心に開発された、Linux の起動処理やシステム管理を行う仕組みのことです。
2011年5月にメジャー Linux ディストリビューションの Fedora に採用され、2014年12月にリリースされた CentOS 7 にも採用されました。
systemd はこれまで使われてきたデーモンごとの起動シェルスクリプトに代わり、『ユニットファイル』と呼ばれる設定ファイルに各デーモン用の初期化命令を記述します。
コマンドを作る まずは systemd に登録して動作させるスクリプトを用意します。
今回は1秒ごとに現在時刻をログに追記していくスクリプトで試してみたいと思います。
 /opt/date.sh  #!/bin/bash while true do date &amp;gt;&amp;gt; /tmp/date.log sleep 1 done  実行権限を与えます。
sudo chmod 0755 /opt/date.sh  ユニットファイルを作成する  /etc/systemd/system/date.service  [Unit] Description = date log daemon [Service] ExecStart = /opt/date.sh Restart = always Type = simple [Install] WantedBy = multi-user.</description>
    </item>
    
    <item>
      <title>CentOS 7 に Re:dash インストールして MySQL のデータをグラフ表示してみた</title>
      <link>http://enomotodev.github.io/post/install-redash/</link>
      <pubDate>Mon, 12 Sep 2016 23:23:16 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-redash/</guid>
      <description>作業環境  CentOS 7.2 Java 1.8.0_101 MySQL 5.7.14 Git 1.8.3.1  Docker + Docker Compose のインストール Re:dash は CentOS では Docker のコンテナ上で起動させるので、まずは Docker をインストールします。
Kernel のバージョンを確認する CentOS 7 に Docker をインストールするには Kernel が 3.10 以上ではないといけないようなので Kernel のバージョンを確認します。
$ uname -r 3.10.0-327.el7.x86_64  3.10 以上なので、Docker のインストールを進めていきます。
Docker のインストール まずは root ユーザに変更します。
$ sudo su -  ここからは root ユーザでの作業にになります。
次のコマンドで Docker のインストールができます。
# curl -fsSL https://get.docker.com/ | sh  インストールが完了したので、バージョンを確認します。</description>
    </item>
    
    <item>
      <title>Embulk を使って CSV から MySQL へデータ投入してみた</title>
      <link>http://enomotodev.github.io/post/embulk_csv_mysql/</link>
      <pubDate>Tue, 06 Sep 2016 23:19:17 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/embulk_csv_mysql/</guid>
      <description>今回は Embulk を使って、CSV から MySQL にデータを投入してみたいと思います。
Embulk とは Embulk とはバルクデータローダーと呼ばれる、データ転送ツールです。
Fluentd を開発した Tresure Data によって開発され、Fluentd を知っている方は、Fluentd のバッチ版だと考えると理解しやすいと思います。
（Fluentd についてはこちらで記事にしています）
Fluentd のように入力・出力のプラグインは多数公開されており、例えば、MySQL の入力プラグインと、ElasticSearch の出力プラグインを組み合わせることによって、MySQL のデータを ElasticSearch に移したりなど、異なるデータストア間でのデータの交換が容易に行うことができます。
作業環境  CentOS 7.2 Java 1.8.0_101 MySQL 5.7.14  ※ Embulk の実行には Java が必須となるので、事前にインストールしておきましょう。
Embulk のインストール GitHub に記載されている通りにコマンドを叩いていきます。
$ curl --create-dirs -o ~/.embulk/bin/embulk -L &amp;quot;http://dl.embulk.org/embulk-latest.jar&amp;quot; $ chmod +x ~/.embulk/bin/embulk $ echo &#39;export PATH=&amp;quot;$HOME/.embulk/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc $ source ~/.bashrc  以上で完了となるので、バージョンを確認してみます。
$ embulk --version embulk 0.</description>
    </item>
    
    <item>
      <title>CentOS 7 に MySQL 5.7 を yum インストールして初期設定までやってみた</title>
      <link>http://enomotodev.github.io/post/centos7_mysql57/</link>
      <pubDate>Thu, 01 Sep 2016 22:52:35 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/centos7_mysql57/</guid>
      <description>CentOS 7.2 上に MySQL 5.7 を yum インストールして、初期設定まで行ったので、その手順を記していきたいと思います。
はじめに CentOS 7 よりデータベースサーバの MySQL が MariaDB に置き換えられました。
もしすでに MariaDB がインストールされている場合はこれからインストールする MySQL と競合を起こさないように削除しましょう。
$ sudo yum remove mariadb-libs $ sudo rm -rf /var/lib/mysql  これで MariaDB 本体とデータフォルダを削除できました。
yum リポジトリの追加 CentOS 7 に MySQL 公式の yum リポジトリを追加します。
$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm  MySQL のインストール MySQL 公式の yum リポジトリが追加できたので、yum install コマンドでインストールしましょう。
$ sudo yum install mysql-community-server  バージョンを確認します。
$ mysqld --version mysqld Ver 5.</description>
    </item>
    
    <item>
      <title>CentOS に Jenkins インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-jenkins/</link>
      <pubDate>Thu, 04 Feb 2016 22:33:24 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-jenkins/</guid>
      <description>はじめに 今まで Jenkins を使う機会はたくさんあったのですが、インストールや設定周りなどをやったことがなかったので、今回 CentOS 6.7 に実際にインストールして軽く触ってみました。
Java をインストールする Jenkins は Java で書かれているので、まずは Java をインストールします。
$ sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel  Java がちゃんとインストールできているか確認します。
$ java -version openjdk version &amp;quot;1.8.0_71&amp;quot; OpenJDK Runtime Environment (build 1.8.0_71-b15) OpenJDK 64-Bit Server VM (build 25.71-b15, mixed mode)  Jenkins のインストール Java のインストールが確認できたので、Jenkins のインストールに入っていきます。
まずは、Jenkins のレポジトリを追加します。
$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo $ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key  Jenkins のレポジトリを追加できたので、Jenkins をインストールします。
$ sudo yum install jenkins  Jenkins の起動 Jenkins のインストールが完了したので、起動させます。</description>
    </item>
    
    <item>
      <title>Apache &#43; fluentd &#43; Elasticsearch &#43; Kibana を連携させてみた</title>
      <link>http://enomotodev.github.io/post/install-elasticsearch/</link>
      <pubDate>Sat, 14 Nov 2015 18:07:46 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-elasticsearch/</guid>
      <description>Elasticsearch とは Elasticsearch とは2010年に OSS としてリリースされた分散型全文検索サーバです。
実際に CentOS 6.7 にインストールしてつかってみることで Elasticsearch の基本を学んでいきたいと思います。 前回の記事で設定した内容をそのまま使用するので、まだ見てない方はぜひ参照してみてください。
Elasticsearch のインストール Elasticsearch は Java で実装されているので、まずは Java をインストールします。
$ sudo yum install -y java  インストールできているか確認します
$ java -version openjdk version &amp;quot;1.8.0_65&amp;quot; OpenJDK Runtime Environment (build 1.8.0_65-b17) OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)  Elasticsearch を yum でインストールするので、レポジトリのGPGキーをインストールします
sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch  レポジトリを追加します。
/etc/yum.repos.d/elasticsearch.repo
[elasticsearch-2.x] name=Elasticsearch repository for 2.x packages baseurl=http://packages.elastic.co/elasticsearch/2.x/centos gpgcheck=1 gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch enabled=1  yum でインストールします。</description>
    </item>
    
    <item>
      <title>fluentdつかってみた</title>
      <link>http://enomotodev.github.io/post/install-fluentd/</link>
      <pubDate>Sat, 14 Nov 2015 14:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-fluentd/</guid>
      <description>fluentd とは fluentd とはTreasure Dataという会社が開発している、さまざまなログの収集手段を提供するログ管理ツールです。
今回は CentOS 6.7 で実際にインストールしてつかってみることによって基本的な設定を学んでいきたいと思います。
td-agent をインストール td-agent ？ となるかと思いますが、td-agent には以下のものが同梱されています。
 Ruby コアライブラリ fluentd とプラグイン  つまり、ad-agent の中に fluentd が入っていて、プラグインなども一緒に入っているので、通常は td-agent をインストールします。
インストールにあたっては公式にインストールスクリプトが公開されているので今回はそちらをつかってインストールします。
$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh  起動は次のコマンドでできます。
$ sudo /etc/init.d/td-agent start  設定ファイルの編集 それでは設定ファイルを編集してみましょう。
まずは、ログ収集の設定を行います。なお、デフォルトの設定はすべて削除してしまって問題ありません。
/etc/td-agent/td-agnet.conf
&amp;lt;source&amp;gt; # 入力に in_tail プラグインを指定 type tail # 監視するログファイルのパスを指定 path /var/log/httpd/access_log # ログにつけるタグを指定 tag apache.access # 監視するファイルをどの行まで読み込んだかを記録するファイルの指定 pos_file /var/log/td-agent/httpd-access_log.pos # ログの書式を指定 format apache2 &amp;lt;/source&amp;gt;  次に上記の記述の下にログ出力の設定を追記していきます。</description>
    </item>
    
  </channel>
</rss>