<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Centos on enomotodev</title>
    <link>http://enomotodev.github.io/tags/centos/index.xml</link>
    <description>Recent content in Centos on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2016 enomotodev</copyright>
    <atom:link href="http://enomotodev.github.io/tags/centos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CentOS に pyenv で Python インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-pyenv/</link>
      <pubDate>Thu, 29 Dec 2016 14:29:02 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-pyenv/</guid>
      <description>

&lt;h2 id=&#34;pyenv-とは&#34;&gt;pyenv とは&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yyuu/pyenv&#34; target=&#34;_blank&#34;&gt;pyenv&lt;/a&gt; とは Python のバージョン管理を行なうコマンドラインツールで、複数のバージョンの Python のインストールや、インストールしたバージョンの変更を簡単に行うことができます。&lt;/p&gt;

&lt;p&gt;Ruby では &lt;a href=&#34;https://github.com/rbenv/rbenv&#34; target=&#34;_blank&#34;&gt;rbenv&lt;/a&gt; + &lt;a href=&#34;https://github.com/rbenv/ruby-build&#34; target=&#34;_blank&#34;&gt;ruby-build&lt;/a&gt; が有名ですが、それの Python 版だと考えていただけたらと思います。&lt;/p&gt;

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.3&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;pyenv-のインストール&#34;&gt;pyenv のインストール&lt;/h2&gt;

&lt;p&gt;まずは依存パッケージを yum でインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install gcc zlib-devel bzip2 bzip2-devel readline readline-devel sqlite sqlite-devel openssl openssl-devel git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pyenv を &lt;code&gt;~/.pyenv&lt;/code&gt; に &lt;code&gt;git clone&lt;/code&gt; します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/yyuu/pyenv.git ~/.pyenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;~/.bash_profile&lt;/code&gt; に環境変数などを設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
$ echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
$ echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほど設定した環境変数を反映します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで pyenv のインストールは完了となりますので、問題なくインストールできているか、pyenv のバージョンを確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv --version
pyenv 1.0.6-1-g0256ff0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyenv-で-python-をインストールする&#34;&gt;pyenv で Python をインストールする&lt;/h2&gt;

&lt;p&gt;pyenv で別バージョンの Python をインストールする前に、まずは現在の Python のバージョンを確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python --version
Python 2.7.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、インストールできる Python のバージョンを一覧表示してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv install --list
Available versions:
  2.1.3
  2.2.3
  2.3.7
  2.4
  2.4.1
  2.4.2
  2.4.3
  2.4.4
  2.4.5
  2.4.6
  2.5
  2.5.1
  2.5.2
  2.5.3
  2.5.4
  2.5.5
  2.5.6
...（略）
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は Python 3.6.0 をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv install 3.6.0
Downloading Python-3.6.0.tar.xz...
-&amp;gt; https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tar.xz
Installing Python-3.6.0...
Installed Python-3.6.0 to /home/vagrant/.pyenv/versions/3.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用する Python のバージョンを 3.6.0 に変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv global 3.6.0
$ pyenv rehash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python のバージョンがきちんと 3.6.0 に変更されているか、Python のバージョンを再度確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python --version
Python 3.6.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python 3.6.0 がインストールできました！&lt;/p&gt;

&lt;h2 id=&#34;python-のバージョンを元に戻す&#34;&gt;Python のバージョンを元に戻す&lt;/h2&gt;

&lt;p&gt;Python のバージョンを元に戻したいこともあると思うので、バージョンを元に戻す方法も確認しておきましょう。&lt;/p&gt;

&lt;p&gt;まずは、pyenv でインストールしたバージョンの一覧を表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv versions
  system
* 3.6.0 (set by /home/enomotodev/.pyenv/version)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先ほどインストールした 3.6.0 以外に &lt;code&gt;system&lt;/code&gt; というバージョンがあるのがわかるかと思います。&lt;/p&gt;

&lt;p&gt;Python のバージョンを元に戻したいときは、&lt;code&gt;system&lt;/code&gt; にバージョンを設定してあげれば OK です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv global system
$ python --version
Python 2.7.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Python のバージョンが元に戻りました！&lt;/p&gt;

&lt;p&gt;


&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E5%85%A5%E9%96%80-Python-3-Bill-Lubanovic/dp/4873117380%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117380&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51%2Bxv65qdBL._SL160_.jpg&#34; alt=&#34;入門 Python 3&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E5%85%A5%E9%96%80-Python-3-Bill-Lubanovic/dp/4873117380%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117380&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        入門 Python 3
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;Bill Lubanovic&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：オライリージャパン&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2015-12-01&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E5%85%A5%E9%96%80-Python-3-Bill-Lubanovic/dp/4873117380%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117380&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AEPython-%E7%AC%AC4%E7%89%88-%E6%9F%B4%E7%94%B0-%E6%B7%B3/dp/479738946X%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D479738946X&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/61vpArlxcQL._SL160_.jpg&#34; alt=&#34;みんなのPython 第4版&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AEPython-%E7%AC%AC4%E7%89%88-%E6%9F%B4%E7%94%B0-%E6%B7%B3/dp/479738946X%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D479738946X&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        みんなのPython 第4版
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;柴田 淳&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：SBクリエイティブ&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2016-12-22&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BF%E3%82%93%E3%81%AA%E3%81%AEPython-%E7%AC%AC4%E7%89%88-%E6%9F%B4%E7%94%B0-%E6%B7%B3/dp/479738946X%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D479738946X&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>systemd を使って自作スクリプトをサービス化してみた</title>
      <link>http://enomotodev.github.io/post/systemd-original-service/</link>
      <pubDate>Sat, 24 Sep 2016 01:42:59 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/systemd-original-service/</guid>
      <description>

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;systemd-とは&#34;&gt;systemd とは&lt;/h2&gt;

&lt;p&gt;systemd とは、&lt;a href=&#34;https://en.wikipedia.org/wiki/Lennart_Poettering&#34; target=&#34;_blank&#34;&gt;Lennart Poettering&lt;/a&gt; と &lt;a href=&#34;https://en.wikipedia.org/wiki/Kay_Sievers&#34; target=&#34;_blank&#34;&gt;Kay Sievers&lt;/a&gt; を中心に開発された、Linux の起動処理やシステム管理を行う仕組みのことです。&lt;/p&gt;

&lt;p&gt;2011年5月にメジャー Linux ディストリビューションの Fedora に採用され、2014年12月にリリースされた CentOS 7 にも採用されました。&lt;/p&gt;

&lt;p&gt;systemd はこれまで使われてきたデーモンごとの起動シェルスクリプトに代わり、『ユニットファイル』と呼ばれる設定ファイルに各デーモン用の初期化命令を記述します。&lt;/p&gt;

&lt;h2 id=&#34;コマンドを作る&#34;&gt;コマンドを作る&lt;/h2&gt;

&lt;p&gt;まずは systemd に登録して動作させるスクリプトを用意します。&lt;/p&gt;

&lt;p&gt;今回は1秒ごとに現在時刻をログに追記していくスクリプトで試してみたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/opt/date.sh&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

while true
do
   date &amp;gt;&amp;gt; /tmp/date.log
   sleep 1
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行権限を与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod 0755 /opt/date.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ユニットファイルを作成する&#34;&gt;ユニットファイルを作成する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;/etc/systemd/system/date.service&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description = date log daemon

[Service]
ExecStart = /opt/date.sh
Restart = always
Type = simple

[Install]
WantedBy = multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service セクションの ExecStart に実行したいコマンドを記述します。&lt;/p&gt;

&lt;p&gt;Restart はサービスのメインプロセスが停止した際の動作を指定することができ、always を指定することによって、常に再起動を試みます。&lt;/p&gt;

&lt;h2 id=&#34;サービスとして認識されているか確認する&#34;&gt;サービスとして認識されているか確認する&lt;/h2&gt;

&lt;p&gt;それでは、作成したユニットファイルがサービスとして認識されているか確かめます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl list-unit-files --type=service | grep date.service
date.service                                disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service として認識されているのが確認できました！&lt;/p&gt;

&lt;h2 id=&#34;サービスを起動する&#34;&gt;サービスを起動する&lt;/h2&gt;

&lt;p&gt;それではサービスを起動しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl enable date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ステータスの確認を行ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl status date
● date.service - date daemon
   Loaded: loaded (/etc/systemd/system/date.service; enabled; vendor preset: disabled)
   Active: active (running) since 金 2016-09-23 14:45:09 UTC; 1h 49min ago
 Main PID: 4168 (date.sh)
   CGroup: /system.slice/date.service
           ├─ 4168 /bin/bash /opt/date.sh
           └─14162 sleep 1

 9月 23 14:45:09 localhost.localdomain systemd[1]: Started date daemon.
 9月 23 14:45:09 localhost.localdomain systemd[1]: Starting date daemon...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サービス起動の確認がとれたので、ログファイルへの書き込みがきちんと行われているかも確認してみます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tail -f /tmp/date.log
Fri Sep 23 16:37:31 UTC 2016
Fri Sep 23 16:37:32 UTC 2016
Fri Sep 23 16:37:33 UTC 2016
Fri Sep 23 16:37:34 UTC 2016
Fri Sep 23 16:37:35 UTC 2016
Fri Sep 23 16:37:36 UTC 2016
Fri Sep 23 16:37:37 UTC 2016
Fri Sep 23 16:37:38 UTC 2016
Fri Sep 23 16:37:39 UTC 2016
Fri Sep 23 16:37:40 UTC 2016
Fri Sep 23 16:37:41 UTC 2016
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログファイルにもきちんと書き込みが行われているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;systemd を使うことによって簡単に自作スクリプトをサービス化して起動することができました。&lt;/p&gt;

&lt;p&gt;これから、ユニットファイルの書き方であったり、systemd の概念的なところをもう少し詳しく勉強していきたいと思います。&lt;/p&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5-CentOS-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E5%BE%B9%E5%BA%95%E6%A7%8B%E7%AF%89-%E7%A6%8F%E7%94%B0-%E5%92%8C%E5%AE%8F/dp/4800711258%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4800711258&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51pzI73oAdL._SL160_.jpg&#34; alt=&#34;実践!  CentOS 7 サーバー徹底構築&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5-CentOS-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E5%BE%B9%E5%BA%95%E6%A7%8B%E7%AF%89-%E7%A6%8F%E7%94%B0-%E5%92%8C%E5%AE%8F/dp/4800711258%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4800711258&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        実践!  CentOS 7 サーバー徹底構築
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;福田 和宏&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：ソーテック社&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2016-03-31&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5-CentOS-%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E5%BE%B9%E5%BA%95%E6%A7%8B%E7%AF%89-%E7%A6%8F%E7%94%B0-%E5%92%8C%E5%AE%8F/dp/4800711258%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4800711258&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>CentOS 7 に Re:dash インストールして MySQL のデータをグラフ表示してみた</title>
      <link>http://enomotodev.github.io/post/install-redash/</link>
      <pubDate>Mon, 12 Sep 2016 23:23:16 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-redash/</guid>
      <description>

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;li&gt;Java 1.8.0_101&lt;/li&gt;
&lt;li&gt;MySQL 5.7.14&lt;/li&gt;
&lt;li&gt;Git 1.8.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker-docker-compose-のインストール&#34;&gt;Docker + Docker Compose のインストール&lt;/h2&gt;

&lt;p&gt;Re:dash は CentOS では Docker のコンテナ上で起動させるので、まずは Docker をインストールします。&lt;/p&gt;

&lt;h3 id=&#34;kernel-のバージョンを確認する&#34;&gt;Kernel のバージョンを確認する&lt;/h3&gt;

&lt;p&gt;CentOS 7 に Docker をインストールするには Kernel が 3.10 以上ではないといけないようなので Kernel のバージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uname -r
3.10.0-327.el7.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.10 以上なので、Docker のインストールを進めていきます。&lt;/p&gt;

&lt;h3 id=&#34;docker-のインストール&#34;&gt;Docker のインストール&lt;/h3&gt;

&lt;p&gt;まずは root ユーザに変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo su -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここからは root ユーザでの作業にになります。&lt;/p&gt;

&lt;p&gt;次のコマンドで Docker のインストールができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# curl -fsSL https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、バージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker --version
Docker version 1.12.1, build 23cf638
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker を起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# service docker start
Redirecting to /bin/systemctl start  docker.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# chkconfig docker on
Note: Forwarding request to &#39;systemctl enable docker.service&#39;.
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Docker のインストールは完了です。&lt;/p&gt;

&lt;h3 id=&#34;docker-compose-のインストール&#34;&gt;Docker Compose のインストール&lt;/h3&gt;

&lt;p&gt;Re:dash は Docker コンテナの管理を Docker Compose で行っているので、Docker Compose もインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose/releases&#34; target=&#34;_blank&#34;&gt;GitHub のリリースページ&lt;/a&gt; から最新のコマンドをコピーして、実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
# chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Docker Compose のインストールが完了となりますので、バージョンを確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker-compose --version
docker-compose version 1.8.0, build f3628c7
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;re-dash-のインストール&#34;&gt;Re:dash のインストール&lt;/h2&gt;

&lt;p&gt;Docker + Docker Compose のインストールが完了したので、いよいよ Re:dash のインストールをしたいと思います。&lt;/p&gt;

&lt;p&gt;まずは、&lt;code&gt;git clone&lt;/code&gt; して、サンプルの設定ファイルを元に設定ファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# git clone https://github.com/getredash/redash.git
# cd redash/
# cp docker-compose-example.yml docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まずは PostgreSQL のコンテナを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker-compose up postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PostgreSQL のコンテナが起動したら、次のコマンドを実行していきます。&lt;/p&gt;

&lt;p&gt;なお、PostgreSQL のコンテナ起動後、端末は操作できなくなるので、別タブを開いたりして、再度アクセスし、root ユーザに変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ./setup/docker/create_database.sh
# docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Re:dash が起動したので、ブラウザからアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_login.png&#34; alt=&#34;Re:dash ログイン画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事ログインできました！&lt;/p&gt;

&lt;p&gt;ログイン画面が表示されたので、ログインしてみましょう。&lt;/p&gt;

&lt;p&gt;初期の Email、Password はこちらになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email：admin&lt;/li&gt;
&lt;li&gt;Password：admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_top.png&#34; alt=&#34;Re:dash TOP画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mysql-への接続&#34;&gt;MySQL への接続&lt;/h2&gt;

&lt;p&gt;画面右上の『Data Sources』 → 『New Data Source』をクリックし、MySQL の設定を行っていきます。&lt;/p&gt;

&lt;p&gt;ここで注意するのは、MySQL はコンテナのホスト側にあるので、MySQL の Host は Re:dash への接続元 IP になります。&lt;/p&gt;

&lt;p&gt;Re:dash への接続元 IP はコンソールに出力されている Re:dash のアクセスログから判断することができます。&lt;/p&gt;

&lt;h2 id=&#34;グラフ表示する&#34;&gt;グラフ表示する&lt;/h2&gt;

&lt;p&gt;まず、画面上部の『Queries』 → 『New Query』から Query 入力画面に移動し、『Data Source』に先ほど登録した Data Source がきちんと設定されていることを確認します。&lt;/p&gt;

&lt;p&gt;次に、入力フォームに SQL を記述し、『Execute』ボタンを押します。&lt;/p&gt;

&lt;p&gt;そうすると下記のように結果が出力されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_output.png&#34; alt=&#34;Re:dash SQL 結果画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;結果に問題ないようであれば、『Save』ボタンで今回の SQL を保存することができます。&lt;/p&gt;

&lt;p&gt;結果をグラフ化するには『+ NEW VISUALIZATION』ボタンを押して、Visualization Editor に移動します。&lt;/p&gt;

&lt;p&gt;画面に従って、グラフの種類や、縦軸・横軸に表示するカラムを設定していくと次のようなグラフが完成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_graph.png&#34; alt=&#34;Re:dash グラフ表示&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Re:dash を使うことによって、SQL の結果を簡単にグラフ化することができました。&lt;/p&gt;

&lt;p&gt;Re:dash は一つひとつの SQL やグラフに固定の URL が割り振られるので、URL さえあれば、SQL での分析結果をみんなで共有することができ、分析結果の属人化を防ぐことができます。&lt;/p&gt;

&lt;p&gt;導入自体もそれほど難しくはないので、今後積極的に活用していきたいと思います。&lt;/p&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D-%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF/dp/4822239179%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822239179&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51vGKhInMkL._SL160_.jpg&#34; alt=&#34;まつもとゆきひろ 言語のしくみ&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D-%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF/dp/4822239179%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822239179&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        まつもとゆきひろ 言語のしくみ
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;まつもとゆきひろ&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：日経BP社&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2016-12-22&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D-%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF/dp/4822239179%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822239179&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Embulk を使って CSV から MySQL へデータ投入してみた</title>
      <link>http://enomotodev.github.io/post/embulk_csv_mysql/</link>
      <pubDate>Tue, 06 Sep 2016 23:19:17 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/embulk_csv_mysql/</guid>
      <description>

&lt;p&gt;今回は Embulk を使って、CSV から MySQL にデータを投入してみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;embulk-とは&#34;&gt;Embulk とは&lt;/h2&gt;

&lt;p&gt;Embulk とはバルクデータローダーと呼ばれる、データ転送ツールです。&lt;/p&gt;

&lt;p&gt;Fluentd を開発した Tresure Data によって開発され、Fluentd を知っている方は、Fluentd のバッチ版だと考えると理解しやすいと思います。&lt;/p&gt;

&lt;p&gt;（Fluentd については&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;こちら&lt;/a&gt;で記事にしています）&lt;/p&gt;

&lt;p&gt;Fluentd のように入力・出力のプラグインは多数公開されており、例えば、MySQL の入力プラグインと、ElasticSearch の出力プラグインを組み合わせることによって、MySQL のデータを ElasticSearch に移したりなど、異なるデータストア間でのデータの交換が容易に行うことができます。&lt;/p&gt;

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;li&gt;Java 1.8.0_101&lt;/li&gt;
&lt;li&gt;MySQL 5.7.14&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※ Embulk の実行には Java が必須となるので、事前にインストールしておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;embulk-のインストール&#34;&gt;Embulk のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/embulk/embulk#linux--mac--bsd&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; に記載されている通りにコマンドを叩いていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl --create-dirs -o ~/.embulk/bin/embulk -L &amp;quot;http://dl.embulk.org/embulk-latest.jar&amp;quot;
$ chmod +x ~/.embulk/bin/embulk
$ echo &#39;export PATH=&amp;quot;$HOME/.embulk/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で完了となるので、バージョンを確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk --version
embulk 0.8.13
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;seed-yml-から設定ファイルを自動生成する&#34;&gt;seed.yml から設定ファイルを自動生成する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/livedoor/datasets&#34; target=&#34;_blank&#34;&gt;livedoor グルメの研究用データセット&lt;/a&gt;を使い、口コミのデータを MySQL に投入したいと思います。&lt;/p&gt;

&lt;p&gt;まずは、口コミデータ CSV をダウンロードしてきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget -O test.tar.gz https://github.com/livedoor/datasets/blob/master/ldgourmet.tar.gz?raw=true
$ tar xfvz test.tar.gz
areas.csv
categories.csv
prefs.csv
ratings.csv
rating_votes.csv
restaurants.csv
stations.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何個か CSV ファイルがありますが、この中から &lt;code&gt;ratings.csv&lt;/code&gt; のみ使用していきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ratings.csv&lt;/code&gt; は次のような内容になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ratings.csv&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;id,restaurant_id,user_id,total,food,service,atmosphere,cost_performance,title,body,purpose,created_on
156445,310595,ee02f26a,5,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2006-10-07 05:06:09&amp;quot;
3842,10237,fcc21401,1,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2004-10-20 00:34:28&amp;quot;
144379,3334,06412af7,2,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2006-06-03 16:07:43&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Embulk は &lt;code&gt;config.yml&lt;/code&gt; ファイルを元にデータの移行を行うのですが、ゼロから記述する場合、CSV ファイルの文字コード、改行コード、デリミタなどをいちいち指定していくのは大変なので、設定ファイルを自動生成してくれる &lt;code&gt;embulk guess&lt;/code&gt; コマンドを使って、&lt;code&gt;config.yml&lt;/code&gt; ファイルを作成したいと思います。&lt;/p&gt;

&lt;p&gt;自動生成するにしても最低限の情報がなければいけないので、&lt;code&gt;seed.yml&lt;/code&gt; ファイルに次のように記述します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;seed.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
  type: file
  path_prefix: &amp;quot;./ratings.csv&amp;quot;
out:
  type: stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力ファイル名に &lt;code&gt;config.yml&lt;/code&gt; を指定して &lt;code&gt;embulk guess&lt;/code&gt; コマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk guess seed.yml -o config.yml
2016-09-05 16:30:57.386 +0000: Embulk v0.8.13
2016-09-05 16:30:58.470 +0000 [INFO] (0001:guess): Listing local files at directory &#39;.&#39; filtering filename by prefix &#39;ratings.csv&#39;
2016-09-05 16:30:58.474 +0000 [INFO] (0001:guess): Loading files [ratings.csv]
2016-09-05 16:30:58.620 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/gzip from a load path
2016-09-05 16:30:58.630 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/bzip2 from a load path
2016-09-05 16:30:58.645 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/json from a load path
2016-09-05 16:30:58.653 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/csv from a load path
in:
  type: file
  path_prefix: ./ratings.csv
  parser:
    charset: UTF-8
    newline: CRLF
    type: csv
    delimiter: &#39;,&#39;
    quote: &#39;&amp;quot;&#39;
    escape: &#39;&amp;quot;&#39;
    trim_if_not_quoted: false
    skip_header_lines: 1
    allow_extra_columns: false
    allow_optional_columns: false
    columns:
    - {name: id, type: long}
    - {name: restaurant_id, type: long}
    - {name: user_id, type: string}
    - {name: total, type: long}
    - {name: food, type: long}
    - {name: service, type: long}
    - {name: atmosphere, type: long}
    - {name: cost_performance, type: long}
    - {name: title, type: string}
    - {name: body, type: string}
    - {name: purpose, type: long}
    - {name: created_on, type: timestamp, format: &#39;%Y-%m-%d %H:%M:%S&#39;}
out: {type: stdout}
Created &#39;config.yml&#39; file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで次のような &lt;code&gt;config.yml&lt;/code&gt; が生成されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
  type: file
  path_prefix: ./ratings.csv
  parser:
    charset: UTF-8
    newline: CRLF
    type: csv
    delimiter: &#39;,&#39;
    quote: &#39;&amp;quot;&#39;
    escape: &#39;&amp;quot;&#39;
    trim_if_not_quoted: false
    skip_header_lines: 1
    allow_extra_columns: false
    allow_optional_columns: false
    columns:
    - {name: id, type: long}
    - {name: restaurant_id, type: long}
    - {name: user_id, type: string}
    - {name: total, type: long}
    - {name: food, type: long}
    - {name: service, type: long}
    - {name: atmosphere, type: long}
    - {name: cost_performance, type: long}
    - {name: title, type: string}
    - {name: body, type: string}
    - {name: purpose, type: long}
    - {name: created_on, type: timestamp, format: &#39;%Y-%m-%d %H:%M:%S&#39;}
out: {type: stdout}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;embulk-filter-column-プラグイン&#34;&gt;&lt;code&gt;embulk-filter-column&lt;/code&gt; プラグイン&lt;/h2&gt;

&lt;p&gt;このまま MySQL にデータを取り込んでも良いのですが、今回は必要なカラムを絞り、&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;restaurant_id&lt;/code&gt;, &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;total&lt;/code&gt;, &lt;code&gt;created_on&lt;/code&gt; の5つのみのデータを扱うことにしたいと思います。&lt;/p&gt;

&lt;p&gt;カラムの絞り込みには &lt;code&gt;embulk-filter-column&lt;/code&gt; という便利なプラグインがあるので、これを使ってみたいと思います。&lt;/p&gt;

&lt;p&gt;まずは &lt;code&gt;embulk gem install&lt;/code&gt; コマンドでインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk gem install embulk-filter-column
2016-09-05 16:37:50.601 +0000: Embulk v0.8.13
Fetching: embulk-filter-column-0.5.4.gem (100%)
Successfully installed embulk-filter-column-0.5.4
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが終わったら &lt;code&gt;config.yml&lt;/code&gt; の &lt;code&gt;in&lt;/code&gt; と &lt;code&gt;out&lt;/code&gt; の間に、次のように必要なカラムのみ記述します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
（略）
filters:
  - type: column
    columns:
      - {name: &#39;id&#39;}
      - {name: &#39;restaurant_id&#39;}
      - {name: &#39;user_id&#39;}
      - {name: &#39;total&#39;}
      - {name: &#39;created_on&#39;}
out: {type: stdout}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-にデータを取り込む&#34;&gt;MySQL にデータを取り込む&lt;/h2&gt;

&lt;p&gt;いよいよ MySQL にデータを取り込んでみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;embulk-filter-column&lt;/code&gt; プラグインの時と同じように、今度は MySQL の出力用のプラグインの &lt;code&gt;embulk-output-mysql&lt;/code&gt; をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk gem install embulk-output-mysql
2016-09-05 16:50:54.513 +0000: Embulk v0.8.13
Fetching: embulk-output-mysql-0.6.3.gem (100%)
Successfully installed embulk-output-mysql-0.6.3
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プラグインのインストールが完了したら &lt;code&gt;config.yml&lt;/code&gt; の &lt;code&gt;out&lt;/code&gt; に &lt;code&gt;embulk-output-mysql&lt;/code&gt; プラグイン用の設定を記述していきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;out:
  type: mysql
  host: localhost
  user: root
  password: uhsd!Aid;3Zt
  database: testdb
  table: ratings
  mode: replace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; という部分は &lt;code&gt;insert&lt;/code&gt; も選択することができ、Embulk を繰り返した時に、&lt;code&gt;insert&lt;/code&gt; だと追記、&lt;code&gt;replace&lt;/code&gt; だと置き換えになります。今回は &lt;code&gt;replace&lt;/code&gt; を選択しました。&lt;/p&gt;

&lt;p&gt;データベースは事前に作成しておく必要がありますが、テーブルやスキーマの作成は Embulk 側で自動で作成してくれるので、事前に作成する必要はありません。&lt;/p&gt;

&lt;p&gt;それでは &lt;code&gt;embulk run&lt;/code&gt; コマンドでデータの取り込みを開始したいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk run config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;20万件以上のデータなので、少し時間がかかると思います。&lt;/p&gt;

&lt;p&gt;※ 私の環境では完了するまで 5 分ほどかかりました。&lt;/p&gt;

&lt;p&gt;データの取り込みが完了したので、MySQL のデータを確認してます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysql&amp;gt; select count(*) from ratings;
+----------+
| count(*) |
+----------+
|   205805 |
+----------+
1 row in set (0.04 sec)

mysql&amp;gt; select * from ratings limit 20;
+--------+---------------+----------+-------+---------------------+
| id     | restaurant_id | user_id  | total | created_on          |
+--------+---------------+----------+-------+---------------------+
| 156445 |        310595 | ee02f26a |     5 | 2006-10-07 05:06:09 |
|   3842 |         10237 | fcc21401 |     1 | 2004-10-20 00:34:28 |
| 144379 |          3334 | 06412af7 |     2 | 2006-06-03 16:07:43 |
| 144377 |         15163 | 06412af7 |     5 | 2006-06-03 15:14:45 |
|  75967 |           567 | 4ceec99d |     3 | 2004-12-01 23:12:29 |
| 104898 |          1026 | 4ceec99d |     5 | 2005-01-04 03:57:02 |
|  86073 |          1058 | 4ceec99d |     5 | 2004-11-09 00:34:17 |
|  13968 |          2569 | 4ceec99d |     3 | 2004-09-22 23:29:57 |
|  97833 |          3309 | 4ceec99d |     4 | 2005-05-28 23:17:16 |
|  13991 |          3648 | 4ceec99d |     4 | 2004-09-27 11:14:50 |
|  69284 |          4226 | 4ceec99d |     5 | 2004-10-31 16:32:43 |
|   5658 |          4659 | 4ceec99d |     4 | 2004-09-22 23:04:12 |
|  89226 |          5075 | 4ceec99d |     5 | 2005-03-21 22:56:45 |
|  15001 |          5099 | 4ceec99d |     3 | 2004-09-24 11:42:10 |
| 116898 |          5219 | 4ceec99d |     5 | 2005-09-20 00:53:40 |
|  21991 |          5449 | 4ceec99d |     5 | 2004-11-10 00:13:09 |
|  68974 |          6033 | 4ceec99d |     4 | 2004-11-03 23:45:02 |
|  15434 |          6899 | 4ceec99d |     5 | 2004-09-22 22:29:51 |
| 116890 |          8638 | 4ceec99d |     4 | 2005-09-20 00:34:25 |
|  13997 |          8895 | 4ceec99d |     5 | 2004-09-27 10:54:32 |
+--------+---------------+----------+-------+---------------------+
20 rows in set (0.00 sec)

mysql&amp;gt; select total, count(*) from ratings group by total;
+-------+----------+
| total | count(*) |
+-------+----------+
|     0 |     7159 |
|     1 |     4975 |
|     2 |    14565 |
|     3 |    64743 |
|     4 |    79593 |
|     5 |    34770 |
+-------+----------+
6 rows in set (0.10 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Embulk を使って CSV から MySQL へデータを投入してみました。&lt;/p&gt;

&lt;p&gt;もう一度 Embulk を使うことによって、今度は MySQL から ElasticSearch などにデータを投入することもできるので、いろいろな使い方を考えていきたいと思います。&lt;/p&gt;

&lt;p&gt;


&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E4%BD%9C%E3%82%8BDeep-Learning-%E2%80%95Python%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E6%96%8E%E8%97%A4-%E5%BA%B7%E6%AF%85/dp/4873117585%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117585&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/512ru2i5gyL._SL160_.jpg&#34; alt=&#34;ゼロから作るDeep Learning ―Pythonで学ぶディープラーニングの理論と実装&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E4%BD%9C%E3%82%8BDeep-Learning-%E2%80%95Python%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E6%96%8E%E8%97%A4-%E5%BA%B7%E6%AF%85/dp/4873117585%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117585&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        ゼロから作るDeep Learning ―Pythonで学ぶディープラーニングの理論と実装
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;斎藤 康毅&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：オライリージャパン&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2016-09-24&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%BC%E3%83%AD%E3%81%8B%E3%82%89%E4%BD%9C%E3%82%8BDeep-Learning-%E2%80%95Python%E3%81%A7%E5%AD%A6%E3%81%B6%E3%83%87%E3%82%A3%E3%83%BC%E3%83%97%E3%83%A9%E3%83%BC%E3%83%8B%E3%83%B3%E3%82%B0%E3%81%AE%E7%90%86%E8%AB%96%E3%81%A8%E5%AE%9F%E8%A3%85-%E6%96%8E%E8%97%A4-%E5%BA%B7%E6%AF%85/dp/4873117585%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4873117585&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D-%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF/dp/4822239179%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822239179&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51vGKhInMkL._SL160_.jpg&#34; alt=&#34;まつもとゆきひろ 言語のしくみ&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D-%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF/dp/4822239179%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822239179&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        まつもとゆきひろ 言語のしくみ
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;まつもとゆきひろ&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：日経BP社&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2016-12-22&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BE%E3%81%A4%E3%82%82%E3%81%A8%E3%82%86%E3%81%8D%E3%81%B2%E3%82%8D-%E8%A8%80%E8%AA%9E%E3%81%AE%E3%81%97%E3%81%8F%E3%81%BF/dp/4822239179%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4822239179&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 7 に MySQL 5.7 を yum インストールして初期設定までやってみた</title>
      <link>http://enomotodev.github.io/post/centos7_mysql57/</link>
      <pubDate>Thu, 01 Sep 2016 22:52:35 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/centos7_mysql57/</guid>
      <description>

&lt;p&gt;CentOS 7.2 上に MySQL 5.7 を yum インストールして、初期設定まで行ったので、その手順を記していきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;CentOS 7 よりデータベースサーバの MySQL が MariaDB に置き換えられました。&lt;/p&gt;

&lt;p&gt;もしすでに MariaDB がインストールされている場合はこれからインストールする MySQL と競合を起こさないように削除しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum remove mariadb-libs
$ sudo rm -rf /var/lib/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで MariaDB 本体とデータフォルダを削除できました。&lt;/p&gt;

&lt;h2 id=&#34;yum-リポジトリの追加&#34;&gt;yum リポジトリの追加&lt;/h2&gt;

&lt;p&gt;CentOS 7 に &lt;a href=&#34;http://dev.mysql.com/downloads/repo/yum/&#34; target=&#34;_blank&#34;&gt;MySQL 公式の yum リポジトリ&lt;/a&gt;を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-のインストール&#34;&gt;MySQL のインストール&lt;/h2&gt;

&lt;p&gt;MySQL 公式の yum リポジトリが追加できたので、&lt;code&gt;yum install&lt;/code&gt; コマンドでインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum install mysql-community-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysqld --version
mysqld  Ver 5.7.14 for Linux on x86_64 (MySQL Community Server (GPL))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事 MySQL 5.7 がインストールできました！&lt;/p&gt;

&lt;h2 id=&#34;mysql-の起動&#34;&gt;MySQL の起動&lt;/h2&gt;

&lt;p&gt;MySQL がインストールできたので、早速起動させましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl start mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl enable mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-の初期パスワード確認&#34;&gt;MySQL の初期パスワード確認&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 では、初回起動時に初期パスワードが生成されるので、ログファイルから生成されたパスワードを確認する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ $ sudo cat /var/log/mysqld.log | grep password
2016-09-01T13:09:03.337119Z 1 [Note] A temporary password is generated for root@localhost: uhsd!Aid;3Zt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回の場合、&lt;strong&gt;uhsd!Aid;3Zt&lt;/strong&gt; の部分が初期パスワードになります。&lt;/p&gt;

&lt;h2 id=&#34;mysql-のセキュリティ設定&#34;&gt;MySQL のセキュリティ設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mysql_secure_installation&lt;/code&gt; コマンドを実行して、MySQL のセキュリティ設定を行っていきます。&lt;/p&gt;

&lt;p&gt;対話形式なので、比較的簡単に最低限必要と考えられるセキュリティの設定ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql_secure_installation

Securing the MySQL server deployment.

Enter password for user root: # ログファイルから取得した初期パスワードを入力します

The existing password for the user account root has expired. Please set a new password.

New password: # root ユーザの新規パスワードを入力します

Re-enter new password: # 確認用にもう一度入力します
The &#39;validate_password&#39; plugin is installed on the server.
The subsequent steps will run with the existing configuration
of the plugin.
Using existing password for root.

Estimated strength of the password: 100
Change the password for root ? ((Press y|Y for Yes, any other key for No) : y

By default, a MySQL installation has an anonymous user,
allowing anyone to log into MySQL without having to have
a user account created for them. This is intended only for
testing, and to make the installation go a bit smoother.
You should remove them before moving into a production
environment.

Remove anonymous users? (Press y|Y for Yes, any other key for No) : y # 匿名ユーザーアカウントを削除
Success.


Normally, root should only be allowed to connect from
&#39;localhost&#39;. This ensures that someone cannot guess at
the root password from the network.

Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y # ローカルホスト以外からアクセス可能な root アカウントを削除
Success.

By default, MySQL comes with a database named &#39;test&#39; that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.


Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y # test データベースの削除
 - Dropping test database...
Success.

 - Removing privileges on test database...
Success.

Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.

Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y
Success.

All done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-へのログイン確認&#34;&gt;MySQL へのログイン確認&lt;/h2&gt;

&lt;p&gt;さきほど設定した新しいパスワードでログインできるかどうか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -u root -p
Enter password: # 新しいパスワードを入力
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 11
Server version: 5.7.14 MySQL Community Server (GPL)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定変更&#34;&gt;設定変更&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 からパスワードの有効期限がデフォルトで360日になり、360日を経過するとパスワードの変更を促されて MySQL にログインできなくなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;default_password_lifetime&lt;/code&gt; の値を &lt;code&gt;0&lt;/code&gt; に変更して、この有効期限の設定を無効にしたいと思います。&lt;/p&gt;

&lt;p&gt;また、デフォルトの文字コードも UTF-8 に変更します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/my.cnf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
.
.
.
character-set-server = utf8
default_password_lifetime = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL を再起動させ、設定内容を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl restart mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で設定は完了となります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;CentOS 7 に MySQL 5.7 を yum インストールし、最低限の設定を行いました。&lt;/p&gt;

&lt;p&gt;本番環境で運用する際は、チューニングも含めて、さらに細かい設定が必要になってくると思いますが、サービスに合わせて適切な設定を考えていきたいと思います。&lt;/p&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3MySQL-5-7-%E6%AD%A2%E3%81%BE%E3%82%89%E3%81%AC%E9%80%B2%E5%8C%96%E3%81%AB%E4%B9%97%E3%82%8A%E9%81%85%E3%82%8C%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%82%AB%E3%83%AB%E3%82%AC%E3%82%A4%E3%83%89-NEXT-ONE/dp/4798147400%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798147400&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51gZ9H9SSOL._SL160_.jpg&#34; alt=&#34;詳解MySQL 5.7 止まらぬ進化に乗り遅れないためのテクニカルガイド (NEXT ONE)&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3MySQL-5-7-%E6%AD%A2%E3%81%BE%E3%82%89%E3%81%AC%E9%80%B2%E5%8C%96%E3%81%AB%E4%B9%97%E3%82%8A%E9%81%85%E3%82%8C%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%82%AB%E3%83%AB%E3%82%AC%E3%82%A4%E3%83%89-NEXT-ONE/dp/4798147400%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798147400&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        詳解MySQL 5.7 止まらぬ進化に乗り遅れないためのテクニカルガイド (NEXT ONE)
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;奥野 幹也&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：翔泳社&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2016-08-26&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E8%A9%B3%E8%A7%A3MySQL-5-7-%E6%AD%A2%E3%81%BE%E3%82%89%E3%81%AC%E9%80%B2%E5%8C%96%E3%81%AB%E4%B9%97%E3%82%8A%E9%81%85%E3%82%8C%E3%81%AA%E3%81%84%E3%81%9F%E3%82%81%E3%81%AE%E3%83%86%E3%82%AF%E3%83%8B%E3%82%AB%E3%83%AB%E3%82%AC%E3%82%A4%E3%83%89-NEXT-ONE/dp/4798147400%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4798147400&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>CentOS に Jenkins インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-jenkins/</link>
      <pubDate>Thu, 04 Feb 2016 22:33:24 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-jenkins/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今まで Jenkins を使う機会はたくさんあったのですが、インストールや設定周りなどをやったことがなかったので、今回 CentOS 6.7 に実際にインストールして軽く触ってみました。&lt;/p&gt;

&lt;h2 id=&#34;java-をインストールする&#34;&gt;Java をインストールする&lt;/h2&gt;

&lt;p&gt;Jenkins は Java で書かれているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java がちゃんとインストールできているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version
openjdk version &amp;quot;1.8.0_71&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_71-b15)
OpenJDK 64-Bit Server VM (build 25.71-b15, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-のインストール&#34;&gt;Jenkins のインストール&lt;/h2&gt;

&lt;p&gt;Java のインストールが確認できたので、Jenkins のインストールに入っていきます。&lt;/p&gt;

&lt;p&gt;まずは、Jenkins のレポジトリを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins のレポジトリを追加できたので、Jenkins をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install jenkins
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-の起動&#34;&gt;Jenkins の起動&lt;/h2&gt;

&lt;p&gt;Jenkins のインストールが完了したので、起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/jenkins start
Starting Jenkins                                           [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再起動時にも自動で起動するように設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chkconfig jenkins on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins はデフォルトでは 8080 ポートを使用するようなので、http://[ドメイン名]:8080 にアクセスすると、下記のような画面が表示されると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_jenkins.png&#34; alt=&#34;Jenkinsスタート画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※ アクセスできない人は、SELinux や iptables などの設定を確認してみてください。&lt;/p&gt;

&lt;h2 id=&#34;ジョブの作成&#34;&gt;ジョブの作成&lt;/h2&gt;

&lt;p&gt;インストールも無事にできたので、早速簡単なジョブを追加してみましょう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;画面左上の「新規ジョブ作成」をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job.png&#34; alt=&#34;Jenkinsジョブ作成&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ジョブ名を「test」にして、「フリースタイル・プロジェクトのビルド」を選択して OK をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job2.png&#34; alt=&#34;Jenkinsジョブ作成2&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「ビルド」の「ビルド手順の追加」から「シェルの実行」を追加。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job3.png&#34; alt=&#34;Jenkinsジョブ作成3&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;シェルスクリプトのテキストエリアに「echo &amp;lsquo;Hello Jenkins !!&amp;lsquo;」と入力して、保存します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins の TOP に戻るとジョブの一覧が表示されているので、ここから今作成した test ジョブのビルドを実行します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job4.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;すぐにビルドが完了すると思いますので、「最新の成功ビルド」から「コンソール出力」を選択します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job5.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「Hello Jenkins !!」と出力されているのが確認できました！
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job6.png&#34; alt=&#34;Jenkinsジョブ作成6&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Jenkins をインストールして、簡単なジョブをつくってみました。&lt;/p&gt;

&lt;p&gt;実際にはいろんなライブラリを入れたり、ユーザーの設定を行ったりなど色々ありますが、インストール自体はそれほど難しくないのかなという印象を受けました。&lt;/p&gt;

&lt;p&gt;Jenkins の機能はあまり詳しくないので、これから勉強していきたいです。&lt;/p&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E6%94%B9%E8%A8%82%E6%96%B0%E7%89%88Jenkins%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E2%80%95%E2%80%95%E3%83%93%E3%83%AB%E3%83%89%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88%E3%83%BB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%92%E8%87%AA%E5%8B%95%E5%8C%96%E3%81%99%E3%82%8B%E6%8A%80%E8%A1%93-WEB-PRESS-plus/dp/4774174238%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774174238&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/512-dGvAcJL._SL160_.jpg&#34; alt=&#34;改訂新版Jenkins実践入門 ――ビルド・テスト・デプロイを自動化する技術 (WEB&amp;#43;DB PRESS plus)&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E6%94%B9%E8%A8%82%E6%96%B0%E7%89%88Jenkins%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E2%80%95%E2%80%95%E3%83%93%E3%83%AB%E3%83%89%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88%E3%83%BB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%92%E8%87%AA%E5%8B%95%E5%8C%96%E3%81%99%E3%82%8B%E6%8A%80%E8%A1%93-WEB-PRESS-plus/dp/4774174238%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774174238&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        改訂新版Jenkins実践入門 ――ビルド・テスト・デプロイを自動化する技術 (WEB&amp;#43;DB PRESS plus)
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;佐藤 聖規&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：技術評論社&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2015-06-10&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E6%94%B9%E8%A8%82%E6%96%B0%E7%89%88Jenkins%E5%AE%9F%E8%B7%B5%E5%85%A5%E9%96%80-%E2%80%95%E2%80%95%E3%83%93%E3%83%AB%E3%83%89%E3%83%BB%E3%83%86%E3%82%B9%E3%83%88%E3%83%BB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%92%E8%87%AA%E5%8B%95%E5%8C%96%E3%81%99%E3%82%8B%E6%8A%80%E8%A1%93-WEB-PRESS-plus/dp/4774174238%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774174238&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Apache &#43; fluentd &#43; Elasticsearch &#43; Kibana を連携させてみた</title>
      <link>http://enomotodev.github.io/post/install-elasticsearch/</link>
      <pubDate>Sat, 14 Nov 2015 18:07:46 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-elasticsearch/</guid>
      <description>

&lt;h2 id=&#34;elasticsearch-とは&#34;&gt;Elasticsearch とは&lt;/h2&gt;

&lt;p&gt;Elasticsearch とは2010年に OSS としてリリースされた分散型全文検索サーバです。&lt;br /&gt;
実際に CentOS 6.7 にインストールしてつかってみることで Elasticsearch の基本を学んでいきたいと思います。
&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回の記事&lt;/a&gt;で設定した内容をそのまま使用するので、まだ見てない方はぜひ参照してみてください。&lt;/p&gt;

&lt;h2 id=&#34;elasticsearch-のインストール&#34;&gt;Elasticsearch のインストール&lt;/h2&gt;

&lt;p&gt;Elasticsearch は Java で実装されているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install -y java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールできているか確認します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version

openjdk version &amp;quot;1.8.0_65&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_65-b17)
OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を yum でインストールするので、レポジトリのGPGキーをインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/elasticsearch.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[elasticsearch-2.x]
name=Elasticsearch repository for 2.x packages
baseurl=http://packages.elastic.co/elasticsearch/2.x/centos
gpgcheck=1
gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum でインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install -y elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig --add elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;config を編集してコメントアウトを外します。&lt;/p&gt;

&lt;p&gt;/etc/elasticsearch/elasticsearch.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# http.port: 9200
↓
http.port: 9200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/elasticsearch start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl コマンドを利用して、Elasticsearch にアクセスして起動の確認を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET http://localhost:9200/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のようなレスポンスが返ってきたら Elasticsearch がきちんと起動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot; : &amp;quot;Red Nine&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;2.0.0&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;de54438d6af8f9340d50c5c786151783ce7d6be5&amp;quot;,
    &amp;quot;build_timestamp&amp;quot; : &amp;quot;2015-10-22T08:09:48Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;5.2.1&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fluentd のプラグインをインストールしたり、事前準備を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &#39;Development tools&#39;
sudo /opt/td-agent/embedded/bin/fluent-gem install fluent-plugin-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回&lt;/a&gt;で設定した ad-agent の設定を変更します。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    type elasticsearch
    type_name access_log
    host localhost
    port 9200

    logstash_format true
    logstash_prefix apache-log
    logstash_dateformat %Y%m%d
    include_tag_key true
    tag_key @log_name
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent を再起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは apache のログが elasticsearch に送られているか確認します。&lt;br /&gt;
まずは存在するインデックス情報一覧を取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/_aliases?pretty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のような結果が返ってきたらOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;apache-log-20151114&amp;quot; : {
    &amp;quot;aliases&amp;quot; : { }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、11月14日のログを全部取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/apache-log-20151114/_search -d &#39;
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match_all&amp;quot; : {}
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にログを確認できたでしょうか？&lt;br /&gt;
次はいよいよ Kibana と連携し、ログの可視化について学んでみましょう。&lt;/p&gt;

&lt;h2 id=&#34;kibana-とは&#34;&gt;Kibana とは&lt;/h2&gt;

&lt;p&gt;Kibana は Elasticsearch に格納されたデータを検索し、グラフなど様々な形で可視化できるツールです。&lt;br /&gt;
単なる可視化ツールというわけではなく、データの集計・可視化・分析までを統合的にできるツールです。&lt;/p&gt;

&lt;h2 id=&#34;kibana-のインストール&#34;&gt;Kibana のインストール&lt;/h2&gt;

&lt;p&gt;Kibana をインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL https://download.elastic.co/kibana/kibana/kibana-4.2.0-linux-x64.tar.gz  | sudo tar zxf - -C /tmp
sudo mv /tmp/kibana-4.2.0-linux-x64 /usr/share/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、Kibana を起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/share/kibana/bin/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動したので http://[ドメイン名]:5601 にアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_kibana.png&#34; alt=&#34;Kibana初期画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事 Kibana の画面が表示されました&lt;/p&gt;

&lt;h2 id=&#34;kibana-の設定&#34;&gt;Kibana の設定&lt;/h2&gt;

&lt;p&gt;上の画像のページで『index names or pattern』を &lt;code&gt;apache-log-*&lt;/code&gt; に変更して Create ボタンを押します。&lt;/p&gt;

&lt;p&gt;画面上の Discover にアクセスすると最新のログがみれるかと思います。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最後の方、かなり駆け足になってしまいましたが、Elasticsearch と Kibana をインストールして、Apache と fluentd と連携してみました。&lt;br /&gt;
他にも便利な機能があり、色々とできるみたいなので、私自身もこれからこれらのツールについてさらに学んでいきたいと思います。&lt;/p&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/Elasticsearch-Definitive-Guide-Clinton-Gormley/dp/1449358543%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1449358543&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51V-yC0%2BY2L._SL160_.jpg&#34; alt=&#34;Elasticsearch: The Definitive Guide&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/Elasticsearch-Definitive-Guide-Clinton-Gormley/dp/1449358543%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1449358543&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        Elasticsearch: The Definitive Guide
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;Clinton Gormley&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：Oreilly &amp;amp; Associates Inc&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2015-02-07&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/Elasticsearch-Definitive-Guide-Clinton-Gormley/dp/1449358543%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D1449358543&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>fluentdつかってみた</title>
      <link>http://enomotodev.github.io/post/install-fluentd/</link>
      <pubDate>Sat, 14 Nov 2015 14:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-fluentd/</guid>
      <description>

&lt;h2 id=&#34;fluentd-とは&#34;&gt;fluentd とは&lt;/h2&gt;

&lt;p&gt;fluentd とは&lt;a href=&#34;http://www.treasuredata.com/&#34;&gt;Treasure Data&lt;/a&gt;という会社が開発している、さまざまなログの収集手段を提供するログ管理ツールです。&lt;br /&gt;
今回は CentOS 6.7 で実際にインストールしてつかってみることによって基本的な設定を学んでいきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;td-agent-をインストール&#34;&gt;td-agent をインストール&lt;/h2&gt;

&lt;p&gt;td-agent ？ となるかと思いますが、td-agent には以下のものが同梱されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;コアライブラリ&lt;/li&gt;
&lt;li&gt;fluentd とプラグイン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、ad-agent の中に fluentd が入っていて、プラグインなども一緒に入っているので、通常は td-agent をインストールします。&lt;/p&gt;

&lt;p&gt;インストールにあたっては公式にインストールスクリプトが公開されているので今回はそちらをつかってインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は次のコマンドでできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/td-agent start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定ファイルの編集&#34;&gt;設定ファイルの編集&lt;/h2&gt;

&lt;p&gt;それでは設定ファイルを編集してみましょう。&lt;br /&gt;
まずは、ログ収集の設定を行います。なお、デフォルトの設定はすべて削除してしまって問題ありません。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
    # 入力に in_tail プラグインを指定
    type tail
    # 監視するログファイルのパスを指定
    path /var/log/httpd/access_log
    # ログにつけるタグを指定
    tag apache.access
    # 監視するファイルをどの行まで読み込んだかを記録するファイルの指定
    pos_file /var/log/td-agent/httpd-access_log.pos
    # ログの書式を指定
    format apache2
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に上記の記述の下にログ出力の設定を追記していきます。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 上で指定したタグを設定
&amp;lt;match apache.access&amp;gt;
    # 出力に out_file プラグインを指定
    type file
    # 出力先のファイルを指定
    path /var/log/td-agent/httpd/access.log
    # ファイル名に含める日時情報を指定
    time_slice_format %Y%m%d
    # ログファイルの更新後に旧ログファイルへのログ記録を継続する時間を指定
    time_slice_wait 10m
    # ログをgzip形式で圧縮
    compress gzip
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このままだと /var/log/httpd ディレクトリのパーミッションエラーになってしまうので、/var/log/httpd　ディレクトリに一般ユーザー実行権限を与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod o+x /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定は以上となるので、td-agent をリロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで apache にアクセスした後に実際にログが保存されるか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /var/log/td-agent/httpd/
access.log.20151114.b524785e8e3b0d946
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent によってログが保存されたのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;ログをmongodbに保存&#34;&gt;ログをMongoDBに保存&lt;/h2&gt;

&lt;p&gt;まずは MongoDB をインストールするのでレポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/10gen.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10gen]
name=10gen Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum インストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mongo-10gen mongo-10gen-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB を起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定もしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig mongod on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB にアクセスして fluentd という名前のデータベースを作成します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type &amp;quot;help&amp;quot;.
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB の設定はこれで完了したので、td-agent の設定を変更してログの出力先を MongoDBに変更しましょう。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    # 出力に out_mongo プラグインを指定
    type mongo
    # ホスト指定
    host localhost
    # ポート指定
    port 27017
    # データベースを指定
    database fluentd
    # Collectionを指定
    collection apache_access
    # Capped Collection 機能を利用する
    capped
    # Collection の上限サイズを 1G に設定
    capped_size 1024m
    # 10秒おきにログを MongoDB に flush する
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent をリロードして設定を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは MongoDB にアクセスして『/』というパスへのアクセスのログ件数を確認することで、ログが MongoDB に保存されているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; db.apache_access.count({path: &amp;quot;/&amp;quot;});

23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログが23件保存されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;fluentd はリモートのサーバにログを送ることもでき、本番環境ではそのような構成になりますが、今回 fluentd の最低限の知識や基本的な設定はこれである程度学ぶことができたかと思います。&lt;br /&gt;
ここから先の細い設定などは&lt;a href=&#34;http://www.fluentd.org/&#34;&gt;公式サイト&lt;/a&gt;などでさらに学習していきましょう！&lt;/p&gt;




&lt;div class=&#34;amazon-shortcode-box&#34;&gt;
  &lt;div class=&#34;amazon-shortcode-image&#34;&gt;
    &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC-%E3%83%AD%E3%82%B0%E5%8F%8E%E9%9B%86%7E%E5%8F%AF%E8%A6%96%E5%8C%96%E7%B7%A8-%E7%8F%BE%E5%A0%B4%E4%B8%BB%E5%B0%8E%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89-Software-Design/dp/4774169838%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774169838&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
      &lt;img src=&#34;https://images-fe.ssl-images-amazon.com/images/I/51lSb2Ie7WL._SL160_.jpg&#34; alt=&#34;サーバ/インフラエンジニア養成読本 ログ収集~可視化編 [現場主導のデータ分析環境を構築!] (Software Design plus)&#34; /&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div class=&#34;amazon-shortcode-info&#34;&gt;
    &lt;p class=&#34;amazon-shortcode-title&#34;&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC-%E3%83%AD%E3%82%B0%E5%8F%8E%E9%9B%86%7E%E5%8F%AF%E8%A6%96%E5%8C%96%E7%B7%A8-%E7%8F%BE%E5%A0%B4%E4%B8%BB%E5%B0%8E%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89-Software-Design/dp/4774169838%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774169838&#34; name=&#34;amazon-shortcode&#34; target=&#34;_blank&#34;&gt;
        サーバ/インフラエンジニア養成読本 ログ収集~可視化編 [現場主導のデータ分析環境を構築!] (Software Design plus)
      &lt;/a&gt;
    &lt;/p&gt;
    
      &lt;p class=&#34;amazon-shortcode-author&#34;&gt;鈴木 健太&lt;/p&gt;
    
    &lt;div class=&#34;amazon-shortcode-detail&#34;&gt;
      
        &lt;p&gt;出版社：技術評論社&lt;/p&gt;
      
      
        &lt;p&gt;発売日：2014-08-08&lt;/p&gt;
      
    &lt;/div&gt;
    &lt;p&gt;
      &lt;a href=&#34;https://www.amazon.co.jp/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC-%E3%83%AD%E3%82%B0%E5%8F%8E%E9%9B%86%7E%E5%8F%AF%E8%A6%96%E5%8C%96%E7%B7%A8-%E7%8F%BE%E5%A0%B4%E4%B8%BB%E5%B0%8E%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89-Software-Design/dp/4774169838%3FSubscriptionId%3DAKIAJCAHSSNNKIXIAI2Q%26tag%3Denomotodev-22%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D4774169838&#34; name=&#34;backport&#34; target=&#34;_blank&#34;&gt;
        &lt;i class=&#34;fa fa-amazon&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&amp;nbsp;Amazonで詳細を見る
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;br style=&#34;clear: both;&#34;/&gt;
&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>