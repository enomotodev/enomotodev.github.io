<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Centos on enomotodev</title>
    <link>http://enomotodev.github.io/tags/centos/</link>
    <description>Recent content in Centos on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2015 Takafumi Enomoto.</copyright>
    <lastBuildDate>Thu, 01 Sep 2016 22:52:35 +0900</lastBuildDate>
    <atom:link href="http://enomotodev.github.io/tags/centos/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CentOS 7 に MySQL 5.7 を yum インストールして初期設定までやってみた</title>
      <link>http://enomotodev.github.io/post/centos7_mysql57/</link>
      <pubDate>Thu, 01 Sep 2016 22:52:35 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/centos7_mysql57/</guid>
      <description>

&lt;p&gt;CentOS 7.2 上に MySQL 5.7 を yum インストールして、初期設定まで行ったので、その手順を記していきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;CentOS 7 よりデータベースサーバの MySQL が MariaDB に置き換えられました。&lt;/p&gt;

&lt;p&gt;もしすでに MariaDB がインストールされている場合はこれからインストールする MySQL と競合を起こさないように削除しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum remove mariadb-libs
$ sudo rm -rf /var/lib/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで MariaDB 本体とデータフォルダを削除できました。&lt;/p&gt;

&lt;h2 id=&#34;yum-リポジトリの追加&#34;&gt;yum リポジトリの追加&lt;/h2&gt;

&lt;p&gt;CentOS 7 に &lt;a href=&#34;http://dev.mysql.com/downloads/repo/yum/&#34; target=&#34;_blank&#34;&gt;MySQL 公式の yum リポジトリ&lt;/a&gt;を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-のインストール&#34;&gt;MySQL のインストール&lt;/h2&gt;

&lt;p&gt;MySQL 公式の yum リポジトリが追加できたので、&lt;code&gt;yum install&lt;/code&gt; コマンドでインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum install mysql-community-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysqld --version
mysqld  Ver 5.7.14 for Linux on x86_64 (MySQL Community Server (GPL))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事 MySQL 5.7 がインストールできました！&lt;/p&gt;

&lt;h2 id=&#34;mysql-の起動&#34;&gt;MySQL の起動&lt;/h2&gt;

&lt;p&gt;MySQL がインストールできたので、早速起動させましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl start mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl enable mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-の初期パスワード確認&#34;&gt;MySQL の初期パスワード確認&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 では、初回起動時に初期パスワードが生成されるので、ログファイルから生成されたパスワードを確認する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ $ sudo cat /var/log/mysqld.log | grep password
2016-09-01T13:09:03.337119Z 1 [Note] A temporary password is generated for root@localhost: uhsd!Aid;3Zt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回の場合、&lt;strong&gt;uhsd!Aid;3Zt&lt;/strong&gt; の部分が初期パスワードになります。&lt;/p&gt;

&lt;h2 id=&#34;mysql-のセキュリティ設定&#34;&gt;MySQL のセキュリティ設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mysql_secure_installation&lt;/code&gt; コマンドを実行して、MySQL のセキュリティ設定を行っていきます。&lt;/p&gt;

&lt;p&gt;対話形式なので、比較的簡単に最低限必要と考えられるセキュリティの設定ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql_secure_installation

Securing the MySQL server deployment.

Enter password for user root: # ログファイルから取得した初期パスワードを入力します

The existing password for the user account root has expired. Please set a new password.

New password: # root ユーザの新規パスワードを入力します

Re-enter new password: # 確認用にもう一度入力します
The &#39;validate_password&#39; plugin is installed on the server.
The subsequent steps will run with the existing configuration
of the plugin.
Using existing password for root.

Estimated strength of the password: 100
Change the password for root ? ((Press y|Y for Yes, any other key for No) : y

By default, a MySQL installation has an anonymous user,
allowing anyone to log into MySQL without having to have
a user account created for them. This is intended only for
testing, and to make the installation go a bit smoother.
You should remove them before moving into a production
environment.

Remove anonymous users? (Press y|Y for Yes, any other key for No) : y # 匿名ユーザーアカウントを削除
Success.


Normally, root should only be allowed to connect from
&#39;localhost&#39;. This ensures that someone cannot guess at
the root password from the network.

Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y # ローカルホスト以外からアクセス可能な root アカウントを削除
Success.

By default, MySQL comes with a database named &#39;test&#39; that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.


Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y # test データベースの削除
 - Dropping test database...
Success.

 - Removing privileges on test database...
Success.

Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.

Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y
Success.

All done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-へのログイン確認&#34;&gt;MySQL へのログイン確認&lt;/h2&gt;

&lt;p&gt;さきほど設定した新しいパスワードでログインできるかどうか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -u root -p
Enter password: # 新しいパスワードを入力
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 11
Server version: 5.7.14 MySQL Community Server (GPL)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定変更&#34;&gt;設定変更&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 からパスワードの有効期限がデフォルトで360日になり、360日を経過するとパスワードの変更を促されて MySQL にログインできなくなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;default_password_lifetime&lt;/code&gt; の値を &lt;code&gt;0&lt;/code&gt; に変更して、この有効期限の設定を無効にしたいと思います。&lt;/p&gt;

&lt;p&gt;また、デフォルトの文字コードも UTF-8 に変更します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/my.cnf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
.
.
.
character-set-server = utf8
default_password_lifetime = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL を再起動させ、設定内容を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl restart mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で設定は完了となります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;CentOS 7 に MySQL 5.7 を yum インストールし、最低限の設定を行いました。&lt;/p&gt;

&lt;p&gt;本番環境で運用する際は、チューニングも含めて、さらに細かい設定が必要になってくると思いますが、サービスに合わせて適切な設定を考えていきたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS に Jenkins インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-jenkins/</link>
      <pubDate>Thu, 04 Feb 2016 22:33:24 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-jenkins/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今まで Jenkins を使う機会はたくさんあったのですが、インストールや設定周りなどをやったことがなかったので、今回 CentOS 6.7 に実際にインストールして軽く触ってみました。&lt;/p&gt;

&lt;h2 id=&#34;java-をインストールする&#34;&gt;Java をインストールする&lt;/h2&gt;

&lt;p&gt;Jenkins は Java で書かれているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java がちゃんとインストールできているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version
openjdk version &amp;quot;1.8.0_71&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_71-b15)
OpenJDK 64-Bit Server VM (build 25.71-b15, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-のインストール&#34;&gt;Jenkins のインストール&lt;/h2&gt;

&lt;p&gt;Java のインストールが確認できたので、Jenkins のインストールに入っていきます。&lt;/p&gt;

&lt;p&gt;まずは、Jenkins のレポジトリを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins のレポジトリを追加できたので、Jenkins をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install jenkins
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-の起動&#34;&gt;Jenkins の起動&lt;/h2&gt;

&lt;p&gt;Jenkins のインストールが完了したので、起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/jenkins start
Starting Jenkins                                           [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再起動時にも自動で起動するように設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chkconfig jenkins on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins はデフォルトでは 8080 ポートを使用するようなので、http://[ドメイン名]:8080 にアクセスすると、下記のような画面が表示されると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_jenkins.png&#34; alt=&#34;Jenkinsスタート画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※ アクセスできない人は、SELinux や iptables などの設定を確認してみてください。&lt;/p&gt;

&lt;h2 id=&#34;ジョブの作成&#34;&gt;ジョブの作成&lt;/h2&gt;

&lt;p&gt;インストールも無事にできたので、早速簡単なジョブを追加してみましょう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;画面左上の「新規ジョブ作成」をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job.png&#34; alt=&#34;Jenkinsジョブ作成&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ジョブ名を「test」にして、「フリースタイル・プロジェクトのビルド」を選択して OK をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job2.png&#34; alt=&#34;Jenkinsジョブ作成2&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「ビルド」の「ビルド手順の追加」から「シェルの実行」を追加。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job3.png&#34; alt=&#34;Jenkinsジョブ作成3&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;シェルスクリプトのテキストエリアに「echo &amp;lsquo;Hello Jenkins !!&amp;lsquo;」と入力して、保存します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins の TOP に戻るとジョブの一覧が表示されているので、ここから今作成した test ジョブのビルドを実行します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job4.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;すぐにビルドが完了すると思いますので、「最新の成功ビルド」から「コンソール出力」を選択します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job5.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「Hello Jenkins !!」と出力されているのが確認できました！
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job6.png&#34; alt=&#34;Jenkinsジョブ作成6&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Jenkins をインストールして、簡単なジョブをつくってみました。&lt;/p&gt;

&lt;p&gt;実際にはいろんなライブラリを入れたり、ユーザーの設定を行ったりなど色々ありますが、インストール自体はそれほど難しくないのかなという印象を受けました。&lt;/p&gt;

&lt;p&gt;Jenkins の機能はあまり詳しくないので、これから勉強していきたいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache &#43; fluentd &#43; Elasticsearch &#43; Kibana を連携させてみた</title>
      <link>http://enomotodev.github.io/post/install-elasticsearch/</link>
      <pubDate>Sat, 14 Nov 2015 18:07:46 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-elasticsearch/</guid>
      <description>

&lt;h2 id=&#34;elasticsearch-とは&#34;&gt;Elasticsearch とは&lt;/h2&gt;

&lt;p&gt;Elasticsearch とは2010年に OSS としてリリースされた分散型全文検索サーバです。&lt;br /&gt;
実際に CentOS 6.7 にインストールしてつかってみることで Elasticsearch の基本を学んでいきたいと思います。
&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回の記事&lt;/a&gt;で設定した内容をそのまま使用するので、まだ見てない方はぜひ参照してみてください。&lt;/p&gt;

&lt;h2 id=&#34;elasticsearch-のインストール&#34;&gt;Elasticsearch のインストール&lt;/h2&gt;

&lt;p&gt;Elasticsearch は Java で実装されているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install -y java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールできているか確認します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version

openjdk version &amp;quot;1.8.0_65&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_65-b17)
OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を yum でインストールするので、レポジトリのGPGキーをインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/elasticsearch.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[elasticsearch-2.x]
name=Elasticsearch repository for 2.x packages
baseurl=http://packages.elastic.co/elasticsearch/2.x/centos
gpgcheck=1
gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum でインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install -y elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig --add elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;config を編集してコメントアウトを外します。&lt;/p&gt;

&lt;p&gt;/etc/elasticsearch/elasticsearch.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# http.port: 9200
↓
http.port: 9200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/elasticsearch start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl コマンドを利用して、Elasticsearch にアクセスして起動の確認を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET http://localhost:9200/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のようなレスポンスが返ってきたら Elasticsearch がきちんと起動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot; : &amp;quot;Red Nine&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;2.0.0&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;de54438d6af8f9340d50c5c786151783ce7d6be5&amp;quot;,
    &amp;quot;build_timestamp&amp;quot; : &amp;quot;2015-10-22T08:09:48Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;5.2.1&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fluentd のプラグインをインストールしたり、事前準備を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &#39;Development tools&#39;
sudo /opt/td-agent/embedded/bin/fluent-gem install fluent-plugin-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回&lt;/a&gt;で設定した ad-agent の設定を変更します。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    type elasticsearch
    type_name access_log
    host localhost
    port 9200

    logstash_format true
    logstash_prefix apache-log
    logstash_dateformat %Y%m%d
    include_tag_key true
    tag_key @log_name
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent を再起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは apache のログが elasticsearch に送られているか確認します。&lt;br /&gt;
まずは存在するインデックス情報一覧を取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/_aliases?pretty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のような結果が返ってきたらOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;apache-log-20151114&amp;quot; : {
    &amp;quot;aliases&amp;quot; : { }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、11月14日のログを全部取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/apache-log-20151114/_search -d &#39;
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match_all&amp;quot; : {}
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にログを確認できたでしょうか？&lt;br /&gt;
次はいよいよ Kibana と連携し、ログの可視化について学んでみましょう。&lt;/p&gt;

&lt;h2 id=&#34;kibana-とは&#34;&gt;Kibana とは&lt;/h2&gt;

&lt;p&gt;Kibana は Elasticsearch に格納されたデータを検索し、グラフなど様々な形で可視化できるツールです。&lt;br /&gt;
単なる可視化ツールというわけではなく、データの集計・可視化・分析までを統合的にできるツールです。&lt;/p&gt;

&lt;h2 id=&#34;kibana-のインストール&#34;&gt;Kibana のインストール&lt;/h2&gt;

&lt;p&gt;Kibana をインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL https://download.elastic.co/kibana/kibana/kibana-4.2.0-linux-x64.tar.gz  | sudo tar zxf - -C /tmp
sudo mv /tmp/kibana-4.2.0-linux-x64 /usr/share/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、Kibana を起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/share/kibana/bin/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動したので http://[ドメイン名]:5601 にアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_kibana.png&#34; alt=&#34;Kibana初期画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事 Kibana の画面が表示されました&lt;/p&gt;

&lt;h2 id=&#34;kibana-の設定&#34;&gt;Kibana の設定&lt;/h2&gt;

&lt;p&gt;上の画像のページで『index names or pattern』を &lt;code&gt;apache-log-*&lt;/code&gt; に変更して Create ボタンを押します。&lt;/p&gt;

&lt;p&gt;画面上の Discover にアクセスすると最新のログがみれるかと思います。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最後の方、かなり駆け足になってしまいましたが、Elasticsearch と Kibana をインストールして、Apache と fluentd と連携してみました。&lt;br /&gt;
他にも便利な機能があり、色々とできるみたいなので、私自身もこれからこれらのツールについてさらに学んでいきたいと思います。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>fluentdつかってみた</title>
      <link>http://enomotodev.github.io/post/install-fluentd/</link>
      <pubDate>Sat, 14 Nov 2015 14:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-fluentd/</guid>
      <description>

&lt;h2 id=&#34;fluentd-とは&#34;&gt;fluentd とは&lt;/h2&gt;

&lt;p&gt;fluentd とは&lt;a href=&#34;http://www.treasuredata.com/&#34;&gt;Treasure Data&lt;/a&gt;という会社が開発している、さまざまなログの収集手段を提供するログ管理ツールです。&lt;br /&gt;
今回は CentOS 6.7 で実際にインストールしてつかってみることによって基本的な設定を学んでいきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;td-agent-をインストール&#34;&gt;td-agent をインストール&lt;/h2&gt;

&lt;p&gt;td-agent ？ となるかと思いますが、td-agent には以下のものが同梱されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;コアライブラリ&lt;/li&gt;
&lt;li&gt;fluentd とプラグイン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、ad-agent の中に fluentd が入っていて、プラグインなども一緒に入っているので、通常は td-agent をインストールします。&lt;/p&gt;

&lt;p&gt;インストールにあたっては公式にインストールスクリプトが公開されているので今回はそちらをつかってインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は次のコマンドでできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/td-agent start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定ファイルの編集&#34;&gt;設定ファイルの編集&lt;/h2&gt;

&lt;p&gt;それでは設定ファイルを編集してみましょう。&lt;br /&gt;
まずは、ログ収集の設定を行います。なお、デフォルトの設定はすべて削除してしまって問題ありません。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
    # 入力に in_tail プラグインを指定
    type tail
    # 監視するログファイルのパスを指定
    path /var/log/httpd/access_log
    # ログにつけるタグを指定
    tag apache.access
    # 監視するファイルをどの行まで読み込んだかを記録するファイルの指定
    pos_file /var/log/td-agent/httpd-access_log.pos
    # ログの書式を指定
    format apache2
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に上記の記述の下にログ出力の設定を追記していきます。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 上で指定したタグを設定
&amp;lt;match apache.access&amp;gt;
    # 出力に out_file プラグインを指定
    type file
    # 出力先のファイルを指定
    path /var/log/td-agent/httpd/access.log
    # ファイル名に含める日時情報を指定
    time_slice_format %Y%m%d
    # ログファイルの更新後に旧ログファイルへのログ記録を継続する時間を指定
    time_slice_wait 10m
    # ログをgzip形式で圧縮
    compress gzip
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このままだと /var/log/httpd ディレクトリのパーミッションエラーになってしまうので、/var/log/httpd　ディレクトリに一般ユーザー実行権限を与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod o+x /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定は以上となるので、td-agent をリロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで apache にアクセスした後に実際にログが保存されるか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /var/log/td-agent/httpd/
access.log.20151114.b524785e8e3b0d946
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent によってログが保存されたのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;ログをmongodbに保存&#34;&gt;ログをMongoDBに保存&lt;/h2&gt;

&lt;p&gt;まずは MongoDB をインストールするのでレポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/10gen.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10gen]
name=10gen Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum インストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mongo-10gen mongo-10gen-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB を起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定もしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig mongod on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB にアクセスして fluentd という名前のデータベースを作成します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type &amp;quot;help&amp;quot;.
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB の設定はこれで完了したので、td-agent の設定を変更してログの出力先を MongoDBに変更しましょう。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    # 出力に out_mongo プラグインを指定
    type mongo
    # ホスト指定
    host localhost
    # ポート指定
    port 27017
    # データベースを指定
    database fluentd
    # Collectionを指定
    collection apache_access
    # Capped Collection 機能を利用する
    capped
    # Collection の上限サイズを 1G に設定
    capped_size 1024m
    # 10秒おきにログを MongoDB に flush する
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent をリロードして設定を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは MongoDB にアクセスして『/』というパスへのアクセスのログ件数を確認することで、ログが MongoDB に保存されているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; db.apache_access.count({path: &amp;quot;/&amp;quot;});

23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログが23件保存されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;fluentd はリモートのサーバにログを送ることもでき、本番環境ではそのような構成になりますが、今回 fluentd の最低限の知識や基本的な設定はこれである程度学ぶことができたかと思います。&lt;br /&gt;
ここから先の細い設定などは&lt;a href=&#34;http://www.fluentd.org/&#34;&gt;公式サイト&lt;/a&gt;などでさらに学習していきましょう！&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>