<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Goose on enomotodev</title>
    <link>http://enomotodev.github.io/tags/goose/</link>
    <description>Recent content in Goose on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2016 enomotodev</copyright>
    <lastBuildDate>Wed, 11 Nov 2015 19:17:08 +0900</lastBuildDate>
    
	<atom:link href="http://enomotodev.github.io/tags/goose/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gooseつかってみた</title>
      <link>http://enomotodev.github.io/post/use-goose/</link>
      <pubDate>Wed, 11 Nov 2015 19:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/use-goose/</guid>
      <description>Gooseとは GooseとはGo言語で作られたDBマイグレーションツールです。
develop環境やproduction環境など各環境に簡単に設定を変更でき、かなり便利そうなので実際にMySQLで試してみました。
Gooseパッケージの取得 まずは go get して Goose パッケージを取得します。
※ Goをインストールしていない人や、GOPATHを設定していない人は公式ドキュメントを参考に導入してみてください。
$ go get bitbucket.org/liamstask/goose/cmd/goose  dbディレクトリの作成 プロジェクトのルート直下に db ディレクトリを作成します。
$ mkdir db  configファイルの作成 取得したGooseパッケージのサンプルからconfigファイルをコピーします。
$ cp $GOPATH/src/bitbucket.org/liamstask/goose/db-sample/dbconf.yml db/  configファイルの編集 まずは先ほどコピーしてきたconfigファイルの中身をのぞいてみます。
デフォルトで test / develop / production のそれぞれの環境に PostgreSQL の driver が設定してあるのが、なんとなくわかるかと思います。
db/dbconf.yml
test: driver: postgres open: user=liam dbname=tester sslmode=disable development: driver: postgres open: user=liam dbname=tester sslmode=disable production: driver: postgres open: user=liam dbname=tester sslmode=verify-full customimport: driver: customdriver open: customdriver open import: github.</description>
    </item>
    
  </channel>
</rss>