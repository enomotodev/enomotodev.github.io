<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on enomotodev</title>
    <link>http://enomotodev.github.io/post/</link>
    <description>Recent content in Posts on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2015 Takafumi Enomoto.</copyright>
    <lastBuildDate>Thu, 04 Feb 2016 22:33:24 +0900</lastBuildDate>
    <atom:link href="http://enomotodev.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CentOS に Jenkins インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-jenkins/</link>
      <pubDate>Thu, 04 Feb 2016 22:33:24 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-jenkins/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今まで Jenkins を使う機会はたくさんあったのですが、インストールや設定周りなどをやったことがなかったので、今回 CentOS 6.7 に実際にインストールして軽く触ってみました。&lt;/p&gt;

&lt;h2 id=&#34;java-をインストールする&#34;&gt;Java をインストールする&lt;/h2&gt;

&lt;p&gt;Jenkins は Java で書かれているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java がちゃんとインストールできているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version
openjdk version &amp;quot;1.8.0_71&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_71-b15)
OpenJDK 64-Bit Server VM (build 25.71-b15, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-のインストール&#34;&gt;Jenkins のインストール&lt;/h2&gt;

&lt;p&gt;Java のインストールが確認できたので、Jenkins のインストールに入っていきます。&lt;/p&gt;

&lt;p&gt;まずは、Jenkins のレポジトリを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins のレポジトリを追加できたので、Jenkins をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install jenkins
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-の起動&#34;&gt;Jenkins の起動&lt;/h2&gt;

&lt;p&gt;Jenkins のインストールが完了したので、起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/jenkins start
Starting Jenkins                                           [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再起動時にも自動で起動するように設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chkconfig jenkins on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins はデフォルトでは 8080 ポートを使用するようなので、http://[ドメイン名]:8080 にアクセスすると、下記のような画面が表示されると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_jenkins.png&#34; alt=&#34;Jenkinsスタート画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※ アクセスできない人は、SELinux や iptables などの設定を確認してみてください。&lt;/p&gt;

&lt;h2 id=&#34;ジョブの作成&#34;&gt;ジョブの作成&lt;/h2&gt;

&lt;p&gt;インストールも無事にできたので、早速簡単なジョブを追加してみましょう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;画面左上の「新規ジョブ作成」をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job.png&#34; alt=&#34;Jenkinsジョブ作成&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ジョブ名を「test」にして、「フリースタイル・プロジェクトのビルド」を選択して OK をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job2.png&#34; alt=&#34;Jenkinsジョブ作成2&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「ビルド」の「ビルド手順の追加」から「シェルの実行」を追加。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job3.png&#34; alt=&#34;Jenkinsジョブ作成3&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;シェルスクリプトのテキストエリアに「echo &amp;lsquo;Hello Jenkins !!&amp;lsquo;」と入力して、保存します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins の TOP に戻るとジョブの一覧が表示されているので、ここから今作成した test ジョブのビルドを実行します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job4.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;すぐにビルドが完了すると思いますので、「最新の成功ビルド」から「コンソール出力」を選択します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job5.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「Hello Jenkins !!」と出力されているのが確認できました！
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job6.png&#34; alt=&#34;Jenkinsジョブ作成6&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Jenkins をインストールして、簡単なジョブをつくってみました。&lt;/p&gt;

&lt;p&gt;実際にはいろんなライブラリを入れたり、ユーザーの設定を行ったりなど色々ありますが、インストール自体はそれほど難しくないのかなという印象を受けました。&lt;/p&gt;

&lt;p&gt;Jenkins の機能はあまり詳しくないので、これから勉強していきたいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>閉包テーブル（Closure Table）を試してみた</title>
      <link>http://enomotodev.github.io/post/closure-table/</link>
      <pubDate>Thu, 19 Nov 2015 23:53:29 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/closure-table/</guid>
      <description>

&lt;h2 id=&#34;はじめに:ef4e199aa2161f9a59c9d7605338afcb&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;SQLアンチパターンという本を読んでいたら、再帰的なデータに対して『閉包テーブル（Closure Table）』という考え方があっったので、MySQL 5.6 で試してみました。&lt;br /&gt;
再帰的なデータとは、例えば上司を1人までもつことができ、部下は複数持つことができる、下記の組織図のようなツリー構造のデータのことを指します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/soshikizu.png&#34; alt=&#34;組織図&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;テーブル作成:ef4e199aa2161f9a59c9d7605338afcb&#34;&gt;テーブル作成&lt;/h2&gt;

&lt;p&gt;それでは早速テーブルを作成してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `Employees` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `TreePaths` (
  `ancestor` bigint(20) NOT NULL,
  `descendant` bigint(20) NOT NULL,
  PRIMARY KEY (`ancestor`,`descendant`),
  KEY `descendant` (`descendant`),
  CONSTRAINT `TreePaths_ibfk_1` FOREIGN KEY (`ancestor`) REFERENCES `Employees` (`id`),
  CONSTRAINT `TreePaths_ibfk_2` FOREIGN KEY (`descendant`) REFERENCES `Employees` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;閉包テーブルでは、Employees テーブルに自分自身の id を親に持つカラムを設けるのではなく、別のテーブルを用いて、ツリー構造の情報を格納します。&lt;br /&gt;
このテーブルには親子関係の組み合わせを格納するのですが、直接の子ではない（2つ以上離れている）場合も子と見なすのと、自分自身も子と見なします。&lt;br /&gt;
下の図の場合、１の子は１〜８の全てになり、３の子は３〜４、５の子は５〜８といった感じになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/soshikizu_num.png&#34; alt=&#34;組織図（番号）&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一応、テーブルにまとめました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;データ作成:ef4e199aa2161f9a59c9d7605338afcb&#34;&gt;データ作成&lt;/h2&gt;

&lt;p&gt;このあと実際にクエリを発行したりするので、テストデータを INSERT しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO `Employees` (`id`, `name`) VALUES
(1, &amp;quot;遠藤&amp;quot;), (2, &amp;quot;田中&amp;quot;), (3, &amp;quot;佐藤&amp;quot;), (4, &amp;quot;原田&amp;quot;),
(5, &amp;quot;吉田&amp;quot;), (6, &amp;quot;古田&amp;quot;), (7, &amp;quot;鈴木&amp;quot;), (8, &amp;quot;松井&amp;quot;);

INSERT INTO `TreePaths` (`ancestor`, `descendant`) VALUES
(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8),
(2, 2), (3, 3), (3, 4), (4, 4), (5, 5), (5, 6), (5, 7), (5, 8),
(6, 6), (6, 7), (7, 7), (8, 8);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;子を全取得:ef4e199aa2161f9a59c9d7605338afcb&#34;&gt;子を全取得&lt;/h2&gt;

&lt;p&gt;子を全取得するのはとても簡単にできます。&lt;br /&gt;
例えば５の子を全部取得するには TreePaths テーブルで親が５の行を探すだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SELECT e.*
    -&amp;gt; FROM Employees AS e
    -&amp;gt;   INNER JOIN TreePaths AS t ON e.id = t.descendant
    -&amp;gt; WHERE t.ancestor = 5;
+----+--------+
| id | name   |
+----+--------+
|  5 | 吉田   |
|  6 | 古田   |
|  7 | 鈴木   |
|  8 | 松井   |
+----+--------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;親を全取得:ef4e199aa2161f9a59c9d7605338afcb&#34;&gt;親を全取得&lt;/h2&gt;

&lt;p&gt;次に、７の親を全部取得してみます。
先ほどとは逆に TreePaths テーブルで子が７の行を探すだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SELECT e.*
    -&amp;gt; FROM Employees AS e
    -&amp;gt;   INNER JOIN TreePaths AS t ON e.id = t.ancestor
    -&amp;gt; WHERE t.descendant = 7;
+----+--------+
| id | name   |
+----+--------+
|  1 | 遠藤   |
|  5 | 吉田   |
|  6 | 古田   |
|  7 | 鈴木   |
+----+--------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;データを登録:ef4e199aa2161f9a59c9d7605338afcb&#34;&gt;データを登録&lt;/h2&gt;

&lt;p&gt;IDが４のデータに子をひとつ登録してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO Employees (`name`) VALUES (&amp;quot;本田&amp;quot;);  // LAST_INSERT_ID() = 9

INSERT INTO TreePaths (ancestor, descendant)
  SELECT t.ancestor, 9
  FROM TreePaths AS t
  WHERE t.descendant = 4
UNION ALL
  SELECT 9, 9;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;少しわかりづらいかもしれませんが、考え方としてはIDが４の親全てに新規で追加した子のIDを持たせるといった感じです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:ef4e199aa2161f9a59c9d7605338afcb&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;親一覧の取得、子一覧の取得、データの登録を実際にやってみましたが、どれも比較的簡単なSQLで対応できました。&lt;br /&gt;
他のメリットとしては、どれだけ階層が深くなっても特に問題がないということです。SQLもどれだけ階層が深くなっても変わりません。&lt;/p&gt;

&lt;p&gt;階層構造のデータを格納するときは、この閉包テーブル（Closure Table）を試してみてはいかがでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache &#43; fluentd &#43; Elasticsearch &#43; Kibana を連携させてみた</title>
      <link>http://enomotodev.github.io/post/install-elasticsearch/</link>
      <pubDate>Sat, 14 Nov 2015 18:07:46 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-elasticsearch/</guid>
      <description>

&lt;h2 id=&#34;elasticsearch-とは&#34;&gt;Elasticsearch とは&lt;/h2&gt;

&lt;p&gt;Elasticsearch とは2010年に OSS としてリリースされた分散型全文検索サーバです。&lt;br /&gt;
実際に CentOS 6.7 にインストールしてつかってみることで Elasticsearch の基本を学んでいきたいと思います。
&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回の記事&lt;/a&gt;で設定した内容をそのまま使用するので、まだ見てない方はぜひ参照してみてください。&lt;/p&gt;

&lt;h2 id=&#34;elasticsearch-のインストール&#34;&gt;Elasticsearch のインストール&lt;/h2&gt;

&lt;p&gt;Elasticsearch は Java で実装されているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install -y java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールできているか確認します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version

openjdk version &amp;quot;1.8.0_65&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_65-b17)
OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を yum でインストールするので、レポジトリのGPGキーをインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/elasticsearch.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[elasticsearch-2.x]
name=Elasticsearch repository for 2.x packages
baseurl=http://packages.elastic.co/elasticsearch/2.x/centos
gpgcheck=1
gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum でインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install -y elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig --add elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;config を編集してコメントアウトを外します。&lt;/p&gt;

&lt;p&gt;/etc/elasticsearch/elasticsearch.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# http.port: 9200
↓
http.port: 9200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/elasticsearch start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl コマンドを利用して、Elasticsearch にアクセスして起動の確認を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET http://localhost:9200/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のようなレスポンスが返ってきたら Elasticsearch がきちんと起動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot; : &amp;quot;Red Nine&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;2.0.0&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;de54438d6af8f9340d50c5c786151783ce7d6be5&amp;quot;,
    &amp;quot;build_timestamp&amp;quot; : &amp;quot;2015-10-22T08:09:48Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;5.2.1&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fluentd のプラグインをインストールしたり、事前準備を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &#39;Development tools&#39;
sudo /opt/td-agent/embedded/bin/fluent-gem install fluent-plugin-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回&lt;/a&gt;で設定した ad-agent の設定を変更します。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    type elasticsearch
    type_name access_log
    host localhost
    port 9200

    logstash_format true
    logstash_prefix apache-log
    logstash_dateformat %Y%m%d
    include_tag_key true
    tag_key @log_name
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent を再起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは apache のログが elasticsearch に送られているか確認します。&lt;br /&gt;
まずは存在するインデックス情報一覧を取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/_aliases?pretty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のような結果が返ってきたらOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;apache-log-20151114&amp;quot; : {
    &amp;quot;aliases&amp;quot; : { }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、11月14日のログを全部取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/apache-log-20151114/_search -d &#39;
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match_all&amp;quot; : {}
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にログを確認できたでしょうか？&lt;br /&gt;
次はいよいよ Kibana と連携し、ログの可視化について学んでみましょう。&lt;/p&gt;

&lt;h2 id=&#34;kibana-とは&#34;&gt;Kibana とは&lt;/h2&gt;

&lt;p&gt;Kibana は Elasticsearch に格納されたデータを検索し、グラフなど様々な形で可視化できるツールです。&lt;br /&gt;
単なる可視化ツールというわけではなく、データの集計・可視化・分析までを統合的にできるツールです。&lt;/p&gt;

&lt;h2 id=&#34;kibana-のインストール&#34;&gt;Kibana のインストール&lt;/h2&gt;

&lt;p&gt;Kibana をインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL https://download.elastic.co/kibana/kibana/kibana-4.2.0-linux-x64.tar.gz  | sudo tar zxf - -C /tmp
sudo mv /tmp/kibana-4.2.0-linux-x64 /usr/share/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、Kibana を起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/share/kibana/bin/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動したので http://[ドメイン名]:5601 にアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_kibana.png&#34; alt=&#34;Kibana初期画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事 Kibana の画面が表示されました&lt;/p&gt;

&lt;h2 id=&#34;kibana-の設定&#34;&gt;Kibana の設定&lt;/h2&gt;

&lt;p&gt;上の画像のページで『index names or pattern』を &lt;code&gt;apache-log-*&lt;/code&gt; に変更して Create ボタンを押します。&lt;/p&gt;

&lt;p&gt;画面上の Discover にアクセスすると最新のログがみれるかと思います。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最後の方、かなり駆け足になってしまいましたが、Elasticsearch と Kibana をインストールして、Apache と fluentd と連携してみました。&lt;br /&gt;
他にも便利な機能があり、色々とできるみたいなので、私自身もこれからこれらのツールについてさらに学んでいきたいと思います。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>fluentdつかってみた</title>
      <link>http://enomotodev.github.io/post/install-fluentd/</link>
      <pubDate>Sat, 14 Nov 2015 14:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-fluentd/</guid>
      <description>

&lt;h2 id=&#34;fluentd-とは:e9b3c303162f7572e08a36920a0a0fa7&#34;&gt;fluentd とは&lt;/h2&gt;

&lt;p&gt;fluentd とは&lt;a href=&#34;http://www.treasuredata.com/&#34;&gt;Treasure Data&lt;/a&gt;という会社が開発している、さまざまなログの収集手段を提供するログ管理ツールです。&lt;br /&gt;
今回は CentOS 6.7 で実際にインストールしてつかってみることによって基本的な設定を学んでいきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;td-agent-をインストール:e9b3c303162f7572e08a36920a0a0fa7&#34;&gt;td-agent をインストール&lt;/h2&gt;

&lt;p&gt;td-agent ？ となるかと思いますが、td-agent には以下のものが同梱されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;コアライブラリ&lt;/li&gt;
&lt;li&gt;fluentd とプラグイン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、ad-agent の中に fluentd が入っていて、プラグインなども一緒に入っているので、通常は td-agent をインストールします。&lt;/p&gt;

&lt;p&gt;インストールにあたっては公式にインストールスクリプトが公開されているので今回はそちらをつかってインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は次のコマンドでできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/td-agent start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定ファイルの編集:e9b3c303162f7572e08a36920a0a0fa7&#34;&gt;設定ファイルの編集&lt;/h2&gt;

&lt;p&gt;それでは設定ファイルを編集してみましょう。&lt;br /&gt;
まずは、ログ収集の設定を行います。なお、デフォルトの設定はすべて削除してしまって問題ありません。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
    # 入力に in_tail プラグインを指定
    type tail
    # 監視するログファイルのパスを指定
    path /var/log/httpd/access_log
    # ログにつけるタグを指定
    tag apache.access
    # 監視するファイルをどの行まで読み込んだかを記録するファイルの指定
    pos_file /var/log/td-agent/httpd-access_log.pos
    # ログの書式を指定
    format apache2
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に上記の記述の下にログ出力の設定を追記していきます。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 上で指定したタグを設定
&amp;lt;match apache.access&amp;gt;
    # 出力に out_file プラグインを指定
    type file
    # 出力先のファイルを指定
    path /var/log/td-agent/httpd/access.log
    # ファイル名に含める日時情報を指定
    time_slice_format %Y%m%d
    # ログファイルの更新後に旧ログファイルへのログ記録を継続する時間を指定
    time_slice_wait 10m
    # ログをgzip形式で圧縮
    compress gzip
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このままだと /var/log/httpd ディレクトリのパーミッションエラーになってしまうので、/var/log/httpd　ディレクトリに一般ユーザー実行権限を与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod o+x /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定は以上となるので、td-agent をリロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで apache にアクセスした後に実際にログが保存されるか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /var/log/td-agent/httpd/
access.log.20151114.b524785e8e3b0d946
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent によってログが保存されたのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;ログをmongodbに保存:e9b3c303162f7572e08a36920a0a0fa7&#34;&gt;ログをMongoDBに保存&lt;/h2&gt;

&lt;p&gt;まずは MongoDB をインストールするのでレポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/10gen.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10gen]
name=10gen Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum インストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mongo-10gen mongo-10gen-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB を起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定もしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig mongod on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB にアクセスして fluentd という名前のデータベースを作成します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type &amp;quot;help&amp;quot;.
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB の設定はこれで完了したので、td-agent の設定を変更してログの出力先を MongoDBに変更しましょう。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    # 出力に out_mongo プラグインを指定
    type mongo
    # ホスト指定
    host localhost
    # ポート指定
    port 27017
    # データベースを指定
    database fluentd
    # Collectionを指定
    collection apache_access
    # Capped Collection 機能を利用する
    capped
    # Collection の上限サイズを 1G に設定
    capped_size 1024m
    # 10秒おきにログを MongoDB に flush する
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent をリロードして設定を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは MongoDB にアクセスして『/』というパスへのアクセスのログ件数を確認することで、ログが MongoDB に保存されているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; db.apache_access.count({path: &amp;quot;/&amp;quot;});

23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログが23件保存されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:e9b3c303162f7572e08a36920a0a0fa7&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;fluentd はリモートのサーバにログを送ることもでき、本番環境ではそのような構成になりますが、今回 fluentd の最低限の知識や基本的な設定はこれである程度学ぶことができたかと思います。&lt;br /&gt;
ここから先の細い設定などは&lt;a href=&#34;http://www.fluentd.org/&#34;&gt;公式サイト&lt;/a&gt;などでさらに学習していきましょう！&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Gooseつかってみた</title>
      <link>http://enomotodev.github.io/post/use-goose/</link>
      <pubDate>Wed, 11 Nov 2015 19:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/use-goose/</guid>
      <description>

&lt;h2 id=&#34;gooseとは:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;Gooseとは&lt;/h2&gt;

&lt;p&gt;GooseとはGo言語で作られたDBマイグレーションツールです。&lt;br /&gt;
develop環境やproduction環境など各環境に簡単に設定を変更でき、かなり便利そうなので実際にMySQLで試してみました。&lt;/p&gt;

&lt;h2 id=&#34;gooseパッケージの取得:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;Gooseパッケージの取得&lt;/h2&gt;

&lt;p&gt;まずは go get して Goose パッケージを取得します。&lt;br /&gt;
※ Goをインストールしていない人や、GOPATHを設定していない人は&lt;a href=&#34;http://golang-jp.org/doc/install#install&#34; target=&#34;_blank&#34;&gt;公式ドキュメント&lt;/a&gt;を参考に導入してみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get bitbucket.org/liamstask/goose/cmd/goose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dbディレクトリの作成:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;dbディレクトリの作成&lt;/h2&gt;

&lt;p&gt;プロジェクトのルート直下に db ディレクトリを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir db
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの作成:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;configファイルの作成&lt;/h2&gt;

&lt;p&gt;取得したGooseパッケージのサンプルからconfigファイルをコピーします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp $GOPATH/src/bitbucket.org/liamstask/goose/db-sample/dbconf.yml db/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの編集:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;configファイルの編集&lt;/h2&gt;

&lt;p&gt;まずは先ほどコピーしてきたconfigファイルの中身をのぞいてみます。&lt;br /&gt;
デフォルトで test / develop / production のそれぞれの環境に PostgreSQL の driver が設定してあるのが、なんとなくわかるかと思います。&lt;/p&gt;

&lt;p&gt;db/dbconf.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

development:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

production:
    driver: postgres
    open: user=liam dbname=tester sslmode=verify-full

customimport:
    driver: customdriver
    open: customdriver open
    import: github.com/custom/driver
    dialect: mysql

environment_variable_config:
    driver: $DB_DRIVER
    open: $DATABASE_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は試すだけなので、developの部分のみ編集してみます。&lt;br /&gt;
MySQL のdriverは mymysql とのことなので、 driver には mymysql を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: user=liam dbname=tester sslmode=disable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に DB に接続するために open の箇所にユーザ名やデータベース名を設定します。&lt;br /&gt;
何種類か設定の仕方があるようなので下記を参考にしてみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;cloudsql:INSTANCE*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考までに下記のような場合の設定を載せておきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Host：localhost&lt;br /&gt;
Port：3306&lt;br /&gt;
データベース：test&lt;br /&gt;
ユーザ：root&lt;br /&gt;
パスワード：pass&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: tcp:localhost:3306*test/root/pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでDBの設定は完了です。&lt;/p&gt;

&lt;h2 id=&#34;db接続確認:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;DB接続確認&lt;/h2&gt;

&lt;p&gt;goose status コマンドでDBに問題なく接続できているか確認できます。&lt;br /&gt;
これ以降の goose コマンドも全てプロジェクトルートで実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose status
goose: status for environment &#39;development&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようにエラーなく表示されたらOKです。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションファイルの作成:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;マイグレーションファイルの作成&lt;/h2&gt;

&lt;p&gt;それではDB接続もOKなので、早速マイグレーションファイルを作りましょう。&lt;/p&gt;

&lt;p&gt;マイグレーションファイルは Go または SQL で書けるようなので、今回は簡単なSQLで書いてみます。&lt;/p&gt;

&lt;p&gt;それでは、goose create コマンドでマイグレーションファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose create CreateUsersTable sql
goose: created /project/db/migrations/20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでマイグレーションファイルのひな型が作成されました。&lt;br /&gt;
早速中身を見てみましょう。&lt;/p&gt;

&lt;p&gt;db/migrations/20151111194459_CreateUsersTable.sql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied


-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルにCREATE文とDROP文をそれぞれ書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied
CREATE TABLE IF NOT EXISTS `users` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL COMMENT &#39;ユーザ名&#39;,
    PRIMARY KEY (`id`)
) ENGINE = InnoDB;

-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
DROP TABLE `users`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでマイグレーションファイルの準備はできたので、実際に実行してテーブルが作成されるか確認してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションの実行:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;マイグレーションの実行&lt;/h2&gt;

&lt;p&gt;goose up コマンドでマイグレーションが実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose up
goose: migrating db environment &#39;development&#39;, current version: 0, target: 20151111194459
OK    20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーブルが作成されているか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
| users            |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; desc goose_db_version;
+------------+---------------------+------+-----+-------------------+----------------+
| Field      | Type                | Null | Key | Default           | Extra          |
+------------+---------------------+------+-----+-------------------+----------------+
| id         | bigint(20) unsigned | NO   | PRI | NULL              | auto_increment |
| version_id | bigint(20)          | NO   |     | NULL              |                |
| is_applied | tinyint(1)          | NO   |     | NULL              |                |
| tstamp     | timestamp           | YES  |     | CURRENT_TIMESTAMP |                |
+------------+---------------------+------+-----+-------------------+----------------+
4 rows in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
+----+----------------+------------+---------------------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが作成されているのと、マイグレーションのバージョン管理用の goose_db_version テーブルが作成されているのが確認できました。&lt;br /&gt;
次に今実行したマイグレーションをロールバックしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose down
goose: migrating db environment &#39;development&#39;, current version: 20151111194459, target: 0
OK    20151111194459_CreateUsersTable.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
|  3 | 20151111194459 |          0 | 2015-11-11 19:53:28 |
+----+----------------+------------+---------------------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが削除されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:8514db67a0f0851bcd6441e94b5eb4e6&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;goose をつかうことによって、簡単にマイグレーションすることができました。&lt;br /&gt;
最近、Go言語を使ったプロジェクトも増えてきているようなので、goose もこれからさらに活躍する場面が増えるのではないでしょうか。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>