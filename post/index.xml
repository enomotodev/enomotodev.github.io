<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on enomotodev</title>
    <link>http://enomotodev.github.io/post/index.xml</link>
    <description>Recent content in Post-rsses on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2016 enomotodev</copyright>
    <lastBuildDate>Sun, 09 Oct 2016 01:49:06 +0900</lastBuildDate>
    <atom:link href="http://enomotodev.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hologram を使ってスタイルガイドを作成してみた</title>
      <link>http://enomotodev.github.io/post/install-hologram/</link>
      <pubDate>Sun, 09 Oct 2016 01:49:06 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-hologram/</guid>
      <description>

&lt;h2 id=&#34;hologram-とは&#34;&gt;Hologram とは&lt;/h2&gt;

&lt;p&gt;Hologram は Ruby 環境で動くスタイルガイドジェネレータです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;.css&lt;/code&gt;、&lt;code&gt;.scss&lt;/code&gt;、&lt;code&gt;.sass&lt;/code&gt;、&lt;code&gt;.less&lt;/code&gt;、&lt;code&gt;.styl&lt;/code&gt; などの多様な形式のファイルに書かれたコメントから、自動でスタイルガイドを作ってくれます。&lt;/p&gt;

&lt;p&gt;スタイルガイドは、静的な HTML ファイルとして出力され、独自のテンプレートを使ってスタイルガイドをカスタマイズすることもできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/hologram_site_top.png&#34; alt=&#34;Hologram 公式サイト TOP&#34; class=&#34;image&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;li&gt;Ruby 2.3.1&lt;/li&gt;
&lt;li&gt;Bundler 1.13.2&lt;/li&gt;
&lt;li&gt;Sass 3.4.22&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hologram-のインストール&#34;&gt;Hologram のインストール&lt;/h2&gt;

&lt;p&gt;プロジェクトの &lt;code&gt;Gemfile&lt;/code&gt; に &lt;code&gt;gem &amp;quot;hologram&amp;quot;&lt;/code&gt; を追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source &amp;quot;https://rubygems.org&amp;quot;

gem &amp;quot;sass&amp;quot;
gem &amp;quot;hologram&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;追記したら &lt;code&gt;bundle install&lt;/code&gt; しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、バージョンを確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hologram -v
hologram 1.4.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hologram-の始め方&#34;&gt;Hologram の始め方&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hologram init&lt;/code&gt; コマンドで hologram の設定ファイルなどが作成されるので、&lt;code&gt;hologram init&lt;/code&gt; を実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ hologram init
Created the following files and directories:
  hologram_config.yml
  doc_assets/
  doc_assets/_header.html
  doc_assets/_footer.html
  code_example_templates/
  code_example_templates/markdown_example_template.html.erb
  code_example_templates/markdown_table_template.html.erb
  code_example_templates/js_example_template.html.erb
  code_example_templates/jsx_example_template.html.erb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;色々とファイルが作成されましたが、&lt;code&gt;hologram_config.yml&lt;/code&gt; の中身を見てみましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;hologram_config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# Hologram will run from same directory where this config file resides
# All paths should be relative to there

# The directory containing the source files to parse recursively
source: ./sass

# The directory that hologram will build to
destination: ./docs

# The assets needed to build the docs (includes header.html,
# footer.html, etc)
# You may put doc related assets here too: images, css, etc.
documentation_assets: ./doc_assets

# The folder that contains templates for rendering code examples.
# If you want to change the way code examples appear in the styleguide,
# modify the files in this folder
code_example_templates: ./code_example_templates

# The folder that contains custom code example renderers.
# If you want to create additional renderers that are not provided
# by Hologram (i.e. coffeescript renderer, jade renderer, etc)
# place them in this folder
code_example_renderers: ./code_example_renderers

# Any other asset folders that need to be copied to the destination
# folder. Typically this will include the css that you are trying to
# document. May also include additional folders as needed.
dependencies:
  - ./build

# Mark which category should be the index page
# Alternatively, you may have an index.md in the documentation assets
# folder instead of specifying this config.
index: basics

# To additionally output navigation for top level sections, set the value to
# &#39;section&#39;. To output navigation for sub-sections,
# set the value to `all`
nav_level: all

# Hologram displays warnings when there are issues with your docs
# (e.g. if a component&#39;s parent is not found, if the _header.html and/or
#  _footer.html files aren&#39;t found)
# If you want Hologram to exit on these warnings, set the value to &#39;true&#39;
# (Default value is &#39;false&#39;)
exit_on_warnings: false
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;source&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;.css&lt;/code&gt;、&lt;code&gt;.scss&lt;/code&gt;、&lt;code&gt;.sass&lt;/code&gt;、&lt;code&gt;.less&lt;/code&gt;、&lt;code&gt;.styl&lt;/code&gt; などのスタイルガイドを作成する元になるファイルが置かれているディレクトリを指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destination&lt;/code&gt;&lt;br /&gt;
作成されたスタイルガイド（HTML ファイル）を出力するディレクトリを指定します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;documentation_assets&lt;/code&gt;&lt;br /&gt;
出力されるスタイルガイドのテンプレートを置くディレクトリを指定します。ここで指定したディレクトに置かれた &lt;code&gt;_header.html&lt;/code&gt; と &lt;code&gt;_footer.html&lt;/code&gt; を使用して HTML ファイルが作成されるので、独自のテンプレートを作成したい場合は、&lt;code&gt;_header.html&lt;/code&gt; と &lt;code&gt;_footer.html&lt;/code&gt; を編集するようなかたちになります。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code_example_templates&lt;/code&gt;&lt;br /&gt;
CSS などでスタイルガイド用にコードを記述する時にフォーマットを指定できるのですが、例えば &lt;code&gt;markup_example&lt;/code&gt; と指定した場合はここで指定したディレクトリの &lt;code&gt;markup_example_template.html.erb&lt;/code&gt; を元にスタイルガイドを出力します。&lt;br /&gt;
指定したファーマットのファイルが存在しない場合はデフォルトのテンプレートが使用されます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code_example_renderers&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;coffee_example&lt;/code&gt; など &lt;code&gt;code_example_templates&lt;/code&gt; で指定できるフォーマット以外のフォーマットを使用したい場合は、ここで指定したディレクトリに &lt;code&gt;coffee_example_template.html.erb&lt;/code&gt; などというかたちでファイルを作成します。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependencies&lt;/code&gt;&lt;br /&gt;
ここで指定したディレクトリのファイルはスタイルガイドを作成する際に &lt;code&gt;documentation_assets&lt;/code&gt; で指定したディレクトリにコピーされます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index&lt;/code&gt;&lt;br /&gt;
スタイルガイドの TOP に表示するカテゴリーを指定することができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nav_level&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;section&lt;/code&gt; または &lt;code&gt;all&lt;/code&gt; を指定することでナビゲーションのレベルを変更することができます。&lt;code&gt;all&lt;/code&gt; を指定すると sub-section まで表示することができます。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exit_on_warnings&lt;/code&gt;&lt;br /&gt;
documentation_assets で指定したディレクトリに &lt;code&gt;_header.html&lt;/code&gt; がない時など、エラーが発生して Hologram が終了する時に Warning を表示したい場合は true を指定します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;hologram-のサンプルを動かしてみる&#34;&gt;Hologram のサンプルを動かしてみる&lt;/h2&gt;

&lt;p&gt;Hologram には&lt;a href=&#34;https://github.com/trulia/hologram-example&#34; target=&#34;_blank&#34;&gt;公式のサンプル&lt;/a&gt;があるので、今回はそちらを動かしてみます。&lt;/p&gt;

&lt;p&gt;まずは先ほどの &lt;code&gt;hologram init&lt;/code&gt; コマンドで自動生成されたファイルを削除します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf ./*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;公式のサンプルを git clone します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:trulia/hologram-example.git .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hologram config.yml
Adding renderer for haml examples
Adding renderer for html examples
Adding renderer for js examples
Adding renderer for jsx examples
Adding renderer for react examples
Adding renderer for slim examples
Build completed. (-:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで &lt;code&gt;docs&lt;/code&gt; ディレクトリに HTML 形式でスタイルガイドが出力されたのでブラウザから確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/hologram_example.png&#34; alt=&#34;Hologram TOP（index.md あり）&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;スタイルガイドの-top-を変更する&#34;&gt;スタイルガイドの TOP を変更する&lt;/h2&gt;

&lt;p&gt;Hologram では &lt;code&gt;source&lt;/code&gt; で指定したディレクトリ（&lt;code&gt;.css&lt;/code&gt; や &lt;code&gt;.scss&lt;/code&gt; ファイルなどが置いてあるディレクトリ）直下に &lt;code&gt;index.md&lt;/code&gt; を置くと、それをスタイルガイドの TOP として表示するようです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;index.md&lt;/code&gt; を削除して、Base CSS カテゴリーを TOP に設定してみましょう。&lt;/p&gt;

&lt;p&gt;まずは &lt;code&gt;index.md&lt;/code&gt; と先ほど作成した &lt;code&gt;docs&lt;/code&gt; ディレクトリを削除します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rm -rf components/index.md docs/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;config.yml&lt;/code&gt; に追記して、『Base CSS』カテゴリーを TOP にするよう宣言します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;...（略）
index: base_css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度、ビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hologram config.yml
Adding renderer for haml examples
Adding renderer for html examples
Adding renderer for js examples
Adding renderer for jsx examples
Adding renderer for react examples
Adding renderer for slim examples
Build completed. (-:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザから確認してみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/hologram_example_base_css_top.png&#34; alt=&#34;Hologram TOP（index.md なし）&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;TOP にアクセスすると『Base CSS』カテゴリーがきちんと表示されました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Hologram はテンプレートを編集することによってスタイルガイドを自由にカスタマイズすることが可能です。&lt;/p&gt;

&lt;p&gt;Hologram は &lt;code&gt;.css&lt;/code&gt;、&lt;code&gt;.scss&lt;/code&gt; ファイル内のコメントから自動で HTML を出力するので、wiki でよく見られる更新が滞りがちになるといったことも回避できるのではないかと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>systemd を使って自作スクリプトをサービス化してみた</title>
      <link>http://enomotodev.github.io/post/systemd-original-service/</link>
      <pubDate>Sat, 24 Sep 2016 01:42:59 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/systemd-original-service/</guid>
      <description>

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;systemd-とは&#34;&gt;systemd とは&lt;/h2&gt;

&lt;p&gt;systemd とは、&lt;a href=&#34;https://en.wikipedia.org/wiki/Lennart_Poettering&#34; target=&#34;_blank&#34;&gt;Lennart Poettering&lt;/a&gt; と &lt;a href=&#34;https://en.wikipedia.org/wiki/Kay_Sievers&#34; target=&#34;_blank&#34;&gt;Kay Sievers&lt;/a&gt; を中心に開発された、Linux の起動処理やシステム管理を行う仕組みのことです。&lt;/p&gt;

&lt;p&gt;2011年5月にメジャー Linux ディストリビューションの Fedora に採用され、2014年12月にリリースされた CentOS 7 にも採用されました。&lt;/p&gt;

&lt;p&gt;systemd はこれまで使われてきたデーモンごとの起動シェルスクリプトに代わり、『ユニットファイル』と呼ばれる設定ファイルに各デーモン用の初期化命令を記述します。&lt;/p&gt;

&lt;h2 id=&#34;コマンドを作る&#34;&gt;コマンドを作る&lt;/h2&gt;

&lt;p&gt;まずは systemd に登録して動作させるスクリプトを用意します。&lt;/p&gt;

&lt;p&gt;今回は1秒ごとに現在時刻をログに追記していくスクリプトで試してみたいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/opt/date.sh&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

while true
do
   date &amp;gt;&amp;gt; /tmp/date.log
   sleep 1
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行権限を与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod 0755 /opt/date.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ユニットファイルを作成する&#34;&gt;ユニットファイルを作成する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;/etc/systemd/system/date.service&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description = date log daemon

[Service]
ExecStart = /opt/date.sh
Restart = always
Type = simple

[Install]
WantedBy = multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service セクションの ExecStart に実行したいコマンドを記述します。&lt;/p&gt;

&lt;p&gt;Restart はサービスのメインプロセスが停止した際の動作を指定することができ、always を指定することによって、常に再起動を試みます。&lt;/p&gt;

&lt;h2 id=&#34;サービスとして認識されているか確認する&#34;&gt;サービスとして認識されているか確認する&lt;/h2&gt;

&lt;p&gt;それでは、作成したユニットファイルがサービスとして認識されているか確かめます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl list-unit-files --type=service | grep date.service
date.service                                disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Service として認識されているのが確認できました！&lt;/p&gt;

&lt;h2 id=&#34;サービスを起動する&#34;&gt;サービスを起動する&lt;/h2&gt;

&lt;p&gt;それではサービスを起動しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl start date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl enable date
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ステータスの確認を行ってみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo systemctl status date
● date.service - date daemon
   Loaded: loaded (/etc/systemd/system/date.service; enabled; vendor preset: disabled)
   Active: active (running) since 金 2016-09-23 14:45:09 UTC; 1h 49min ago
 Main PID: 4168 (date.sh)
   CGroup: /system.slice/date.service
           ├─ 4168 /bin/bash /opt/date.sh
           └─14162 sleep 1

 9月 23 14:45:09 localhost.localdomain systemd[1]: Started date daemon.
 9月 23 14:45:09 localhost.localdomain systemd[1]: Starting date daemon...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サービス起動の確認がとれたので、ログファイルへの書き込みがきちんと行われているかも確認してみます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tail -f /tmp/date.log
Fri Sep 23 16:37:31 UTC 2016
Fri Sep 23 16:37:32 UTC 2016
Fri Sep 23 16:37:33 UTC 2016
Fri Sep 23 16:37:34 UTC 2016
Fri Sep 23 16:37:35 UTC 2016
Fri Sep 23 16:37:36 UTC 2016
Fri Sep 23 16:37:37 UTC 2016
Fri Sep 23 16:37:38 UTC 2016
Fri Sep 23 16:37:39 UTC 2016
Fri Sep 23 16:37:40 UTC 2016
Fri Sep 23 16:37:41 UTC 2016
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログファイルにもきちんと書き込みが行われているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;systemd を使うことによって簡単に自作スクリプトをサービス化して起動することができました。&lt;/p&gt;

&lt;p&gt;これから、ユニットファイルの書き方であったり、systemd の概念的なところをもう少し詳しく勉強していきたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 7 に Re:dash インストールして MySQL のデータをグラフ表示してみた</title>
      <link>http://enomotodev.github.io/post/install-redash/</link>
      <pubDate>Mon, 12 Sep 2016 23:23:16 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-redash/</guid>
      <description>

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;li&gt;Java 1.8.0_101&lt;/li&gt;
&lt;li&gt;MySQL 5.7.14&lt;/li&gt;
&lt;li&gt;Git 1.8.3.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;docker-docker-compose-のインストール&#34;&gt;Docker + Docker Compose のインストール&lt;/h2&gt;

&lt;p&gt;Re:dash は CentOS では Docker のコンテナ上で起動させるので、まずは Docker をインストールします。&lt;/p&gt;

&lt;h3 id=&#34;kernel-のバージョンを確認する&#34;&gt;Kernel のバージョンを確認する&lt;/h3&gt;

&lt;p&gt;CentOS 7 に Docker をインストールするには Kernel が 3.10 以上ではないといけないようなので Kernel のバージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uname -r
3.10.0-327.el7.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.10 以上なので、Docker のインストールを進めていきます。&lt;/p&gt;

&lt;h3 id=&#34;docker-のインストール&#34;&gt;Docker のインストール&lt;/h3&gt;

&lt;p&gt;まずは root ユーザに変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo su -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここからは root ユーザでの作業にになります。&lt;/p&gt;

&lt;p&gt;次のコマンドで Docker のインストールができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# curl -fsSL https://get.docker.com/ | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、バージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker --version
Docker version 1.12.1, build 23cf638
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker を起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# service docker start
Redirecting to /bin/systemctl start  docker.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# chkconfig docker on
Note: Forwarding request to &#39;systemctl enable docker.service&#39;.
Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Docker のインストールは完了です。&lt;/p&gt;

&lt;h3 id=&#34;docker-compose-のインストール&#34;&gt;Docker Compose のインストール&lt;/h3&gt;

&lt;p&gt;Re:dash は Docker コンテナの管理を Docker Compose で行っているので、Docker Compose もインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docker/compose/releases&#34; target=&#34;_blank&#34;&gt;GitHub のリリースページ&lt;/a&gt; から最新のコマンドをコピーして、実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose
# chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Docker Compose のインストールが完了となりますので、バージョンを確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker-compose --version
docker-compose version 1.8.0, build f3628c7
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;re-dash-のインストール&#34;&gt;Re:dash のインストール&lt;/h2&gt;

&lt;p&gt;Docker + Docker Compose のインストールが完了したので、いよいよ Re:dash のインストールをしたいと思います。&lt;/p&gt;

&lt;p&gt;まずは、&lt;code&gt;git clone&lt;/code&gt; して、サンプルの設定ファイルを元に設定ファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# git clone https://github.com/getredash/redash.git
# cd redash/
# cp docker-compose-example.yml docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まずは PostgreSQL のコンテナを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# docker-compose up postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PostgreSQL のコンテナが起動したら、次のコマンドを実行していきます。&lt;/p&gt;

&lt;p&gt;なお、PostgreSQL のコンテナ起動後、端末は操作できなくなるので、別タブを開いたりして、再度アクセスし、root ユーザに変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# ./setup/docker/create_database.sh
# docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Re:dash が起動したので、ブラウザからアクセスしてみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_login.png&#34; alt=&#34;Re:dash ログイン画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事ログインできました！&lt;/p&gt;

&lt;p&gt;ログイン画面が表示されたので、ログインしてみましょう。&lt;/p&gt;

&lt;p&gt;初期の Email、Password はこちらになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email：admin&lt;/li&gt;
&lt;li&gt;Password：admin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_top.png&#34; alt=&#34;Re:dash TOP画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;mysql-への接続&#34;&gt;MySQL への接続&lt;/h2&gt;

&lt;p&gt;画面右上の『Data Sources』 → 『New Data Source』をクリックし、MySQL の設定を行っていきます。&lt;/p&gt;

&lt;p&gt;ここで注意するのは、MySQL はコンテナのホスト側にあるので、MySQL の Host は Re:dash への接続元 IP になります。&lt;/p&gt;

&lt;p&gt;Re:dash への接続元 IP はコンソールに出力されている Re:dash のアクセスログから判断することができます。&lt;/p&gt;

&lt;h2 id=&#34;グラフ表示する&#34;&gt;グラフ表示する&lt;/h2&gt;

&lt;p&gt;まず、画面上部の『Queries』 → 『New Query』から Query 入力画面に移動し、『Data Source』に先ほど登録した Data Source がきちんと設定されていることを確認します。&lt;/p&gt;

&lt;p&gt;次に、入力フォームに SQL を記述し、『Execute』ボタンを押します。&lt;/p&gt;

&lt;p&gt;そうすると下記のように結果が出力されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_output.png&#34; alt=&#34;Re:dash SQL 結果画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;結果に問題ないようであれば、『Save』ボタンで今回の SQL を保存することができます。&lt;/p&gt;

&lt;p&gt;結果をグラフ化するには『+ NEW VISUALIZATION』ボタンを押して、Visualization Editor に移動します。&lt;/p&gt;

&lt;p&gt;画面に従って、グラフの種類や、縦軸・横軸に表示するカラムを設定していくと次のようなグラフが完成します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/redash_graph.png&#34; alt=&#34;Re:dash グラフ表示&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Re:dash を使うことによって、SQL の結果を簡単にグラフ化することができました。&lt;/p&gt;

&lt;p&gt;Re:dash は一つひとつの SQL やグラフに固定の URL が割り振られるので、URL さえあれば、SQL での分析結果をみんなで共有することができ、分析結果の属人化を防ぐことができます。&lt;/p&gt;

&lt;p&gt;導入自体もそれほど難しくはないので、今後積極的に活用していきたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embulk を使って CSV から MySQL へデータ投入してみた</title>
      <link>http://enomotodev.github.io/post/embulk_csv_mysql/</link>
      <pubDate>Tue, 06 Sep 2016 23:19:17 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/embulk_csv_mysql/</guid>
      <description>

&lt;p&gt;今回は Embulk を使って、CSV から MySQL にデータを投入してみたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;embulk-とは&#34;&gt;Embulk とは&lt;/h2&gt;

&lt;p&gt;Embulk とはバルクデータローダーと呼ばれる、データ転送ツールです。&lt;/p&gt;

&lt;p&gt;Fluentd を開発した Tresure Data によって開発され、Fluentd を知っている方は、Fluentd のバッチ版だと考えると理解しやすいと思います。&lt;/p&gt;

&lt;p&gt;（Fluentd については&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;こちら&lt;/a&gt;で記事にしています）&lt;/p&gt;

&lt;p&gt;Fluentd のように入力・出力のプラグインは多数公開されており、例えば、MySQL の入力プラグインと、ElasticSearch の出力プラグインを組み合わせることによって、MySQL のデータを ElasticSearch に移したりなど、異なるデータストア間でのデータの交換が容易に行うことができます。&lt;/p&gt;

&lt;h2 id=&#34;作業環境&#34;&gt;作業環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7.2&lt;/li&gt;
&lt;li&gt;Java 1.8.0_101&lt;/li&gt;
&lt;li&gt;MySQL 5.7.14&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※ Embulk の実行には Java が必須となるので、事前にインストールしておきましょう。&lt;/p&gt;

&lt;h2 id=&#34;embulk-のインストール&#34;&gt;Embulk のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/embulk/embulk#linux--mac--bsd&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt; に記載されている通りにコマンドを叩いていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl --create-dirs -o ~/.embulk/bin/embulk -L &amp;quot;http://dl.embulk.org/embulk-latest.jar&amp;quot;
$ chmod +x ~/.embulk/bin/embulk
$ echo &#39;export PATH=&amp;quot;$HOME/.embulk/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で完了となるので、バージョンを確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk --version
embulk 0.8.13
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;seed-yml-から設定ファイルを自動生成する&#34;&gt;seed.yml から設定ファイルを自動生成する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/livedoor/datasets&#34; target=&#34;_blank&#34;&gt;livedoor グルメの研究用データセット&lt;/a&gt;を使い、口コミのデータを MySQL に投入したいと思います。&lt;/p&gt;

&lt;p&gt;まずは、口コミデータ CSV をダウンロードしてきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget -O test.tar.gz https://github.com/livedoor/datasets/blob/master/ldgourmet.tar.gz?raw=true
$ tar xfvz test.tar.gz
areas.csv
categories.csv
prefs.csv
ratings.csv
rating_votes.csv
restaurants.csv
stations.csv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;何個か CSV ファイルがありますが、この中から &lt;code&gt;ratings.csv&lt;/code&gt; のみ使用していきます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ratings.csv&lt;/code&gt; は次のような内容になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ratings.csv&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-csv&#34;&gt;id,restaurant_id,user_id,total,food,service,atmosphere,cost_performance,title,body,purpose,created_on
156445,310595,ee02f26a,5,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2006-10-07 05:06:09&amp;quot;
3842,10237,fcc21401,1,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2004-10-20 00:34:28&amp;quot;
144379,3334,06412af7,2,0,0,0,0,,&amp;quot;...&amp;quot;,0,&amp;quot;2006-06-03 16:07:43&amp;quot;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Embulk は &lt;code&gt;config.yml&lt;/code&gt; ファイルを元にデータの移行を行うのですが、ゼロから記述する場合、CSV ファイルの文字コード、改行コード、デリミタなどをいちいち指定していくのは大変なので、設定ファイルを自動生成してくれる &lt;code&gt;embulk guess&lt;/code&gt; コマンドを使って、&lt;code&gt;config.yml&lt;/code&gt; ファイルを作成したいと思います。&lt;/p&gt;

&lt;p&gt;自動生成するにしても最低限の情報がなければいけないので、&lt;code&gt;seed.yml&lt;/code&gt; ファイルに次のように記述します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;seed.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
  type: file
  path_prefix: &amp;quot;./ratings.csv&amp;quot;
out:
  type: stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力ファイル名に &lt;code&gt;config.yml&lt;/code&gt; を指定して &lt;code&gt;embulk guess&lt;/code&gt; コマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk guess seed.yml -o config.yml
2016-09-05 16:30:57.386 +0000: Embulk v0.8.13
2016-09-05 16:30:58.470 +0000 [INFO] (0001:guess): Listing local files at directory &#39;.&#39; filtering filename by prefix &#39;ratings.csv&#39;
2016-09-05 16:30:58.474 +0000 [INFO] (0001:guess): Loading files [ratings.csv]
2016-09-05 16:30:58.620 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/gzip from a load path
2016-09-05 16:30:58.630 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/bzip2 from a load path
2016-09-05 16:30:58.645 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/json from a load path
2016-09-05 16:30:58.653 +0000 [INFO] (0001:guess): Loaded plugin embulk/guess/csv from a load path
in:
  type: file
  path_prefix: ./ratings.csv
  parser:
    charset: UTF-8
    newline: CRLF
    type: csv
    delimiter: &#39;,&#39;
    quote: &#39;&amp;quot;&#39;
    escape: &#39;&amp;quot;&#39;
    trim_if_not_quoted: false
    skip_header_lines: 1
    allow_extra_columns: false
    allow_optional_columns: false
    columns:
    - {name: id, type: long}
    - {name: restaurant_id, type: long}
    - {name: user_id, type: string}
    - {name: total, type: long}
    - {name: food, type: long}
    - {name: service, type: long}
    - {name: atmosphere, type: long}
    - {name: cost_performance, type: long}
    - {name: title, type: string}
    - {name: body, type: string}
    - {name: purpose, type: long}
    - {name: created_on, type: timestamp, format: &#39;%Y-%m-%d %H:%M:%S&#39;}
out: {type: stdout}
Created &#39;config.yml&#39; file.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで次のような &lt;code&gt;config.yml&lt;/code&gt; が生成されました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
  type: file
  path_prefix: ./ratings.csv
  parser:
    charset: UTF-8
    newline: CRLF
    type: csv
    delimiter: &#39;,&#39;
    quote: &#39;&amp;quot;&#39;
    escape: &#39;&amp;quot;&#39;
    trim_if_not_quoted: false
    skip_header_lines: 1
    allow_extra_columns: false
    allow_optional_columns: false
    columns:
    - {name: id, type: long}
    - {name: restaurant_id, type: long}
    - {name: user_id, type: string}
    - {name: total, type: long}
    - {name: food, type: long}
    - {name: service, type: long}
    - {name: atmosphere, type: long}
    - {name: cost_performance, type: long}
    - {name: title, type: string}
    - {name: body, type: string}
    - {name: purpose, type: long}
    - {name: created_on, type: timestamp, format: &#39;%Y-%m-%d %H:%M:%S&#39;}
out: {type: stdout}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;embulk-filter-column-プラグイン&#34;&gt;&lt;code&gt;embulk-filter-column&lt;/code&gt; プラグイン&lt;/h2&gt;

&lt;p&gt;このまま MySQL にデータを取り込んでも良いのですが、今回は必要なカラムを絞り、&lt;code&gt;id&lt;/code&gt;, &lt;code&gt;restaurant_id&lt;/code&gt;, &lt;code&gt;user_id&lt;/code&gt;, &lt;code&gt;total&lt;/code&gt;, &lt;code&gt;created_on&lt;/code&gt; の5つのみのデータを扱うことにしたいと思います。&lt;/p&gt;

&lt;p&gt;カラムの絞り込みには &lt;code&gt;embulk-filter-column&lt;/code&gt; という便利なプラグインがあるので、これを使ってみたいと思います。&lt;/p&gt;

&lt;p&gt;まずは &lt;code&gt;embulk gem install&lt;/code&gt; コマンドでインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk gem install embulk-filter-column
2016-09-05 16:37:50.601 +0000: Embulk v0.8.13
Fetching: embulk-filter-column-0.5.4.gem (100%)
Successfully installed embulk-filter-column-0.5.4
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが終わったら &lt;code&gt;config.yml&lt;/code&gt; の &lt;code&gt;in&lt;/code&gt; と &lt;code&gt;out&lt;/code&gt; の間に、次のように必要なカラムのみ記述します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;in:
（略）
filters:
  - type: column
    columns:
      - {name: &#39;id&#39;}
      - {name: &#39;restaurant_id&#39;}
      - {name: &#39;user_id&#39;}
      - {name: &#39;total&#39;}
      - {name: &#39;created_on&#39;}
out: {type: stdout}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-にデータを取り込む&#34;&gt;MySQL にデータを取り込む&lt;/h2&gt;

&lt;p&gt;いよいよ MySQL にデータを取り込んでみたいと思います。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;embulk-filter-column&lt;/code&gt; プラグインの時と同じように、今度は MySQL の出力用のプラグインの &lt;code&gt;embulk-output-mysql&lt;/code&gt; をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk gem install embulk-output-mysql
2016-09-05 16:50:54.513 +0000: Embulk v0.8.13
Fetching: embulk-output-mysql-0.6.3.gem (100%)
Successfully installed embulk-output-mysql-0.6.3
1 gem installed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プラグインのインストールが完了したら &lt;code&gt;config.yml&lt;/code&gt; の &lt;code&gt;out&lt;/code&gt; に &lt;code&gt;embulk-output-mysql&lt;/code&gt; プラグイン用の設定を記述していきます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;config.yml&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;out:
  type: mysql
  host: localhost
  user: root
  password: uhsd!Aid;3Zt
  database: testdb
  table: ratings
  mode: replace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;mode&lt;/code&gt; という部分は &lt;code&gt;insert&lt;/code&gt; も選択することができ、Embulk を繰り返した時に、&lt;code&gt;insert&lt;/code&gt; だと追記、&lt;code&gt;replace&lt;/code&gt; だと置き換えになります。今回は &lt;code&gt;replace&lt;/code&gt; を選択しました。&lt;/p&gt;

&lt;p&gt;データベースは事前に作成しておく必要がありますが、テーブルやスキーマの作成は Embulk 側で自動で作成してくれるので、事前に作成する必要はありません。&lt;/p&gt;

&lt;p&gt;それでは &lt;code&gt;embulk run&lt;/code&gt; コマンドでデータの取り込みを開始したいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ embulk run config.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;20万件以上のデータなので、少し時間がかかると思います。&lt;/p&gt;

&lt;p&gt;※ 私の環境では完了するまで 5 分ほどかかりました。&lt;/p&gt;

&lt;p&gt;データの取り込みが完了したので、MySQL のデータを確認してます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;mysql&amp;gt; select count(*) from ratings;
+----------+
| count(*) |
+----------+
|   205805 |
+----------+
1 row in set (0.04 sec)

mysql&amp;gt; select * from ratings limit 20;
+--------+---------------+----------+-------+---------------------+
| id     | restaurant_id | user_id  | total | created_on          |
+--------+---------------+----------+-------+---------------------+
| 156445 |        310595 | ee02f26a |     5 | 2006-10-07 05:06:09 |
|   3842 |         10237 | fcc21401 |     1 | 2004-10-20 00:34:28 |
| 144379 |          3334 | 06412af7 |     2 | 2006-06-03 16:07:43 |
| 144377 |         15163 | 06412af7 |     5 | 2006-06-03 15:14:45 |
|  75967 |           567 | 4ceec99d |     3 | 2004-12-01 23:12:29 |
| 104898 |          1026 | 4ceec99d |     5 | 2005-01-04 03:57:02 |
|  86073 |          1058 | 4ceec99d |     5 | 2004-11-09 00:34:17 |
|  13968 |          2569 | 4ceec99d |     3 | 2004-09-22 23:29:57 |
|  97833 |          3309 | 4ceec99d |     4 | 2005-05-28 23:17:16 |
|  13991 |          3648 | 4ceec99d |     4 | 2004-09-27 11:14:50 |
|  69284 |          4226 | 4ceec99d |     5 | 2004-10-31 16:32:43 |
|   5658 |          4659 | 4ceec99d |     4 | 2004-09-22 23:04:12 |
|  89226 |          5075 | 4ceec99d |     5 | 2005-03-21 22:56:45 |
|  15001 |          5099 | 4ceec99d |     3 | 2004-09-24 11:42:10 |
| 116898 |          5219 | 4ceec99d |     5 | 2005-09-20 00:53:40 |
|  21991 |          5449 | 4ceec99d |     5 | 2004-11-10 00:13:09 |
|  68974 |          6033 | 4ceec99d |     4 | 2004-11-03 23:45:02 |
|  15434 |          6899 | 4ceec99d |     5 | 2004-09-22 22:29:51 |
| 116890 |          8638 | 4ceec99d |     4 | 2005-09-20 00:34:25 |
|  13997 |          8895 | 4ceec99d |     5 | 2004-09-27 10:54:32 |
+--------+---------------+----------+-------+---------------------+
20 rows in set (0.00 sec)

mysql&amp;gt; select total, count(*) from ratings group by total;
+-------+----------+
| total | count(*) |
+-------+----------+
|     0 |     7159 |
|     1 |     4975 |
|     2 |    14565 |
|     3 |    64743 |
|     4 |    79593 |
|     5 |    34770 |
+-------+----------+
6 rows in set (0.10 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Embulk を使って CSV から MySQL へデータを投入してみました。&lt;/p&gt;

&lt;p&gt;もう一度 Embulk を使うことによって、今度は MySQL から ElasticSearch などにデータを投入することもできるので、いろいろな使い方を考えていきたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CentOS 7 に MySQL 5.7 を yum インストールして初期設定までやってみた</title>
      <link>http://enomotodev.github.io/post/centos7_mysql57/</link>
      <pubDate>Thu, 01 Sep 2016 22:52:35 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/centos7_mysql57/</guid>
      <description>

&lt;p&gt;CentOS 7.2 上に MySQL 5.7 を yum インストールして、初期設定まで行ったので、その手順を記していきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;CentOS 7 よりデータベースサーバの MySQL が MariaDB に置き換えられました。&lt;/p&gt;

&lt;p&gt;もしすでに MariaDB がインストールされている場合はこれからインストールする MySQL と競合を起こさないように削除しましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum remove mariadb-libs
$ sudo rm -rf /var/lib/mysql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで MariaDB 本体とデータフォルダを削除できました。&lt;/p&gt;

&lt;h2 id=&#34;yum-リポジトリの追加&#34;&gt;yum リポジトリの追加&lt;/h2&gt;

&lt;p&gt;CentOS 7 に &lt;a href=&#34;http://dev.mysql.com/downloads/repo/yum/&#34; target=&#34;_blank&#34;&gt;MySQL 公式の yum リポジトリ&lt;/a&gt;を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-のインストール&#34;&gt;MySQL のインストール&lt;/h2&gt;

&lt;p&gt;MySQL 公式の yum リポジトリが追加できたので、&lt;code&gt;yum install&lt;/code&gt; コマンドでインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo yum install mysql-community-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysqld --version
mysqld  Ver 5.7.14 for Linux on x86_64 (MySQL Community Server (GPL))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事 MySQL 5.7 がインストールできました！&lt;/p&gt;

&lt;h2 id=&#34;mysql-の起動&#34;&gt;MySQL の起動&lt;/h2&gt;

&lt;p&gt;MySQL がインストールできたので、早速起動させましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl start mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl enable mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-の初期パスワード確認&#34;&gt;MySQL の初期パスワード確認&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 では、初回起動時に初期パスワードが生成されるので、ログファイルから生成されたパスワードを確認する必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ $ sudo cat /var/log/mysqld.log | grep password
2016-09-01T13:09:03.337119Z 1 [Note] A temporary password is generated for root@localhost: uhsd!Aid;3Zt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回の場合、&lt;strong&gt;uhsd!Aid;3Zt&lt;/strong&gt; の部分が初期パスワードになります。&lt;/p&gt;

&lt;h2 id=&#34;mysql-のセキュリティ設定&#34;&gt;MySQL のセキュリティ設定&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;mysql_secure_installation&lt;/code&gt; コマンドを実行して、MySQL のセキュリティ設定を行っていきます。&lt;/p&gt;

&lt;p&gt;対話形式なので、比較的簡単に最低限必要と考えられるセキュリティの設定ができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql_secure_installation

Securing the MySQL server deployment.

Enter password for user root: # ログファイルから取得した初期パスワードを入力します

The existing password for the user account root has expired. Please set a new password.

New password: # root ユーザの新規パスワードを入力します

Re-enter new password: # 確認用にもう一度入力します
The &#39;validate_password&#39; plugin is installed on the server.
The subsequent steps will run with the existing configuration
of the plugin.
Using existing password for root.

Estimated strength of the password: 100
Change the password for root ? ((Press y|Y for Yes, any other key for No) : y

By default, a MySQL installation has an anonymous user,
allowing anyone to log into MySQL without having to have
a user account created for them. This is intended only for
testing, and to make the installation go a bit smoother.
You should remove them before moving into a production
environment.

Remove anonymous users? (Press y|Y for Yes, any other key for No) : y # 匿名ユーザーアカウントを削除
Success.


Normally, root should only be allowed to connect from
&#39;localhost&#39;. This ensures that someone cannot guess at
the root password from the network.

Disallow root login remotely? (Press y|Y for Yes, any other key for No) : y # ローカルホスト以外からアクセス可能な root アカウントを削除
Success.

By default, MySQL comes with a database named &#39;test&#39; that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.


Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y # test データベースの削除
 - Dropping test database...
Success.

 - Removing privileges on test database...
Success.

Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.

Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y
Success.

All done!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysql-へのログイン確認&#34;&gt;MySQL へのログイン確認&lt;/h2&gt;

&lt;p&gt;さきほど設定した新しいパスワードでログインできるかどうか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mysql -u root -p
Enter password: # 新しいパスワードを入力
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 11
Server version: 5.7.14 MySQL Community Server (GPL)

Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type &#39;help;&#39; or &#39;\h&#39; for help. Type &#39;\c&#39; to clear the current input statement.
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sys                |
+--------------------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定変更&#34;&gt;設定変更&lt;/h2&gt;

&lt;p&gt;MySQL 5.7 からパスワードの有効期限がデフォルトで360日になり、360日を経過するとパスワードの変更を促されて MySQL にログインできなくなります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;default_password_lifetime&lt;/code&gt; の値を &lt;code&gt;0&lt;/code&gt; に変更して、この有効期限の設定を無効にしたいと思います。&lt;/p&gt;

&lt;p&gt;また、デフォルトの文字コードも UTF-8 に変更します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/etc/my.cnf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;[mysqld]
.
.
.
character-set-server = utf8
default_password_lifetime = 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL を再起動させ、設定内容を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo systemctl restart mysqld.service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上で設定は完了となります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;CentOS 7 に MySQL 5.7 を yum インストールし、最低限の設定を行いました。&lt;/p&gt;

&lt;p&gt;本番環境で運用する際は、チューニングも含めて、さらに細かい設定が必要になってくると思いますが、サービスに合わせて適切な設定を考えていきたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ECMAScript について調べてみた</title>
      <link>http://enomotodev.github.io/post/learn-ecmascript/</link>
      <pubDate>Sat, 06 Aug 2016 23:28:39 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/learn-ecmascript/</guid>
      <description>

&lt;p&gt;最近、ECMAScript2015 や ES6 などの言葉をよく聞くようになってきたので、復習も兼ねて、ECMAScript について調べてみました。&lt;/p&gt;

&lt;h2 id=&#34;ecmascript-とは&#34;&gt;ECMAScript とは？&lt;/h2&gt;

&lt;p&gt;ECMAScript とは、標準化団体である &lt;a href=&#34;http://www.ecma-international.org/&#34;&gt;Ecma International&lt;/a&gt; が策定している、JavaScript の標準規格のことです。&lt;/p&gt;

&lt;p&gt;開発当初の JavaScript は、各ベンダーのブラウザによって独自拡張が数多く実装されており、互換性が低かったため、&lt;a href=&#34;http://www.ecma-international.org/&#34;&gt;Ecma International&lt;/a&gt; が中心となり標準規格である ECMAScript が策定されました。&lt;/p&gt;

&lt;h2 id=&#34;ecmascript-6-2015-って何&#34;&gt;ECMAScript 6 / 2015 って何？&lt;/h2&gt;

&lt;p&gt;正式名称は『ECMAScript 2015』（省略して『ES2015』とも呼ばれる）。&lt;/p&gt;

&lt;p&gt;リリースは2015年6月。&lt;/p&gt;

&lt;p&gt;ECMAScript の 6th Edition である為、当初は『ES6』と呼ばれていたが、正式名称を『ECMAScript 2015』とし、今後年単位のリリースとし、バージョンを年（ES2017, ES2018, &amp;hellip;）にしていく予定のようです。&lt;/p&gt;

&lt;p&gt;なお、最新のバージョンは2016年6月にリリースされた『ECMAScript 2016（ES2016）』になります。&lt;/p&gt;

&lt;p&gt;公式へのリンクはこちらです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/&#34; target=&#34;_blank&#34;&gt;ECMAScript 2015 Language Specification &amp;ndash; ECMA-262 6th Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ecma-international.org/ecma-262/7.0/&#34; target=&#34;_blank&#34;&gt;ECMAScript® 2016 Language Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;es2015-の新機能&#34;&gt;ES2015 の新機能&lt;/h2&gt;

&lt;p&gt;ES2015 で追加された主な機能は下記になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; ・ &lt;code&gt;const&lt;/code&gt; キーワードによる変数宣言&lt;/li&gt;
&lt;li&gt;クラス構文&lt;/li&gt;
&lt;li&gt;アロー関数&lt;/li&gt;
&lt;li&gt;分割代入&lt;/li&gt;
&lt;li&gt;配列展開&lt;/li&gt;
&lt;li&gt;可変長引数&lt;/li&gt;
&lt;li&gt;関数のデフォルト引数&lt;/li&gt;
&lt;li&gt;テンプレート文字列&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここから1つひとつ見ていきましょう。&lt;/p&gt;

&lt;h3 id=&#34;let-const-キーワードによる変数宣言&#34;&gt;&lt;code&gt;let&lt;/code&gt; ・ &lt;code&gt;const&lt;/code&gt; キーワードによる変数宣言&lt;/h3&gt;

&lt;p&gt;これまでの &lt;code&gt;var&lt;/code&gt; で変数を宣言した場合と違い、&lt;code&gt;let&lt;/code&gt; ・ &lt;code&gt;const&lt;/code&gt; で変数を宣言すると、その変数のスコープは宣言したブロック内になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if (1) {
    var foo = &#39;foo&#39;;
    let bar = &#39;bar&#39;;
    const baz = &#39;baz&#39;;
}

console.log(foo);  // foo
console.log(bar);  // エラー
console.log(baz);  // エラー
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、&lt;code&gt;const&lt;/code&gt; は定数を宣言したい時に使用され、&lt;code&gt;const&lt;/code&gt; で宣言された変数は、宣言時を除いて値の代入が不可能になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = &#39;foo&#39;;
let bar = &#39;bar&#39;;
const baz = &#39;baz&#39;;

foo = &#39;foo2&#39;;  // 代入可能
bar = &#39;bar2&#39;;  // 代入可能
baz = &#39;baz2&#39;;  // エラー
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;クラス構文&#34;&gt;クラス構文&lt;/h3&gt;

&lt;p&gt;ES2015 以前までは、&lt;code&gt;prototype&lt;/code&gt; を利用することで、クラスのようなものを作成していました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Human(name) {
    this.name = name;
}

Human.prototype.hello = function () {
    console.log(&#39;私の名前は &#39; + this.name + &#39; です。&#39;);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;obj = new Human(&#39;enomotodev&#39;);
obj.hello();
//=&amp;gt; &#39;私の名前は enomotodev です。&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これをクラス構文を使用すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Human {
    constructor(name) {
        this.name = name;
    }
    hello() {
        console.log(&#39;私の名前は &#39; + this.name + &#39; です。&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;obj = new Human(&#39;enomotodev&#39;);
obj.hello();
//=&amp;gt; &#39;私の名前は enomotodev です。&#39; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このように書くことができます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;extends&lt;/code&gt; を使用してクラスの継承を行うことも可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Human {
    constructor(name) {
        this.name = name;
    }
    hello() {
        console.log(&#39;私の名前は &#39; + this.name + &#39; です。&#39;);
    }
}

class Engineer extends Human {
    constructor(name) {
        super(name);
        this.occupation = &#39;エンジニア&#39;;
    }
    hello() {
        super.hello();
        console.log(&#39;職業は &#39; + this.occupation + &#39; です。&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;obj = new Engineer(&#39;enomotodev&#39;);
obj.hello();
//=&amp;gt; &#39;私の名前は enomotodev です。&#39; 
//=&amp;gt; &#39;職業は エンジニア です。&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、上記のように子クラスでは &lt;code&gt;super()&lt;/code&gt; で親クラスの &lt;code&gt;constructor&lt;/code&gt; の実行、&lt;code&gt;super.メソッド名()&lt;/code&gt; で親クラスのメソッドの実行ができます。&lt;/p&gt;

&lt;h3 id=&#34;アロー関数&#34;&gt;アロー関数&lt;/h3&gt;

&lt;p&gt;これまでの &lt;code&gt;funciton&lt;/code&gt; を使った関数宣言に加えて、&lt;code&gt;=&amp;gt;&lt;/code&gt;（アロー）を用いた関数宣言が可能になりました。&lt;/p&gt;

&lt;p&gt;アロー関数による関数宣言の特徴としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;引数が1つの場合は &lt;code&gt;()&lt;/code&gt; が省略可能&lt;/li&gt;
&lt;li&gt;関数の中身が単一式の場合は、&lt;code&gt;{}&lt;/code&gt; や &lt;code&gt;return&lt;/code&gt; を省略できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というものになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// これまでの function を使った関数宣言
var foo = function(x, y) {
  return x * y;
};

// アロー関数
var bar = (x, y) =&amp;gt; {
  return x * y;
};

// 単一式の場合は {} や return を省略可能
var baz = (x, y) =&amp;gt; x * y;

// 引数が1つの場合は () が省略可能
var qux = x =&amp;gt; x * 2;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;分割代入&#34;&gt;分割代入&lt;/h3&gt;

&lt;p&gt;複数の変数に、複数の値をまとめて代入できるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// これまで複数にの変数に代入する場合
var foo = &#39;abc&#39;;
var bar = 123;

// 分割代入を使用した場合
var [foo, bar] = [&#39;abc&#39;, 123];
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;配列展開&#34;&gt;配列展開&lt;/h3&gt;

&lt;p&gt;関数の呼び出し、配列への代入などに対して、&lt;code&gt;...&lt;/code&gt; を使用することにより、配列を展開して使用する事ができるようになりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;関数の呼び出し&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var array = [1, 2, 3];
var foo = function(x, y, z) {
    console.log(x, y, z);
}

f(...array);
//=&amp;gt; 1 2 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;[1, 2, 3]&lt;/code&gt; という配列を展開しているので、&lt;code&gt;f(...array)&lt;/code&gt; は &lt;code&gt;foo(1, 2, 3)&lt;/code&gt; という引数での関数 &lt;code&gt;foo&lt;/code&gt; の呼び出しと同じになります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;配列への代入&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;var array = [1, 2, 3];
var foo = [...array, 4, 5, 6];

console.log(foo);
//=&amp;gt; [1, 2, 3, 4, 5, 6]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;可変長引数&#34;&gt;可変長引数&lt;/h3&gt;

&lt;p&gt;関数を定義する際に、&lt;code&gt;...&lt;/code&gt; を使用することによって、引数に可変長引数を指定することができるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = function(x, ...args) {
    console.log(x, args);
};

foo(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;);
//=&amp;gt; a [&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;]

foo(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, 1, 2, 3);
//=&amp;gt; a [&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;, 1, 2, 3]

foo(&#39;a&#39;);
//=&amp;gt; a []
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デフォルト引数&#34;&gt;デフォルト引数&lt;/h3&gt;

&lt;p&gt;関数宣言時に変数に代入を行うことで、デフォルト値を設定できるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = function(a, b = 1) {
  console.log(a + b);
};

foo(10);
//=&amp;gt; 11
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;テンプレート文字列&#34;&gt;テンプレート文字列&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;``&lt;/code&gt; で文字列を囲むことで、文字列内での変数展開が &lt;code&gt;${}&lt;/code&gt; で行うことができ、改行もそのまま反映することができるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var name = &#39;enomotodev&#39;;
var hello = `私の名前は
${name} です`;

console.log(hello);
//=&amp;gt; 私の名前は
//=&amp;gt; enomotodev です
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;es2016-の新機能&#34;&gt;ES2016 の新機能&lt;/h2&gt;

&lt;p&gt;ここまで ES2015 で追加された主な機能を確認してきましたが、ES2016 の新機能についても見ていきましょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;べき乗演算子&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt; メソッド&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;べき乗演算子&#34;&gt;べき乗演算子&lt;/h3&gt;

&lt;p&gt;これまでべき乗の計算は、&lt;code&gt;Math.pow()&lt;/code&gt; を使用してきましたが、&lt;code&gt;**&lt;/code&gt; で簡単に記述できるようになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// これまでの場合（2の5乗）
var foo = Math.pow(2, 5);

console.log(foo);
//=&amp;gt; 32

// ** を使用した場合（2の5乗）
var bar = 2 ** 5;

console.log(bar);
//=&amp;gt; 32
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;array-prototype-includes-メソッド&#34;&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt; メソッド&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Array.prototype.includes()&lt;/code&gt; メソッドは、配列内にある要素が含まれているかどうかを調べるためのメソッドです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var foo = [1, 2, 3, 4, 5];

// 配列に 1 が含まれているかどうか
console.log(foo.includes(1));
//=&amp;gt; true

// 配列に 6 が含まれているかどうか
console.log(foo.includes(6));
//=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;新機能の紹介がメインとなりましたが、ES2015（ES6）と ES2016 について改めて調べてみました。&lt;/p&gt;

&lt;p&gt;もちろん他にもたくさんの新機能がありますので、改めてきちんと学び直してみるのも良いと思います。&lt;/p&gt;

&lt;p&gt;一部のブラウザによっては未対応の機能もあるので、&lt;a href=&#34;https://babeljs.io/&#34; target=&#34;_blank&#34;&gt;Babel&lt;/a&gt; などを使いコンパイルする必要がありますが、それらについてはまた別の機会に記事にしたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【 Composer 編】Mac に Docker インストールしてみた</title>
      <link>http://enomotodev.github.io/post/docker-mac-composer/</link>
      <pubDate>Fri, 29 Apr 2016 14:33:00 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/docker-mac-composer/</guid>
      <description>

&lt;p&gt;前回の『&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-phpfpm/&#34;&gt;【 php-fpm 編】Mac に Docker インストールしてみた&lt;/a&gt;』の続きです&lt;/p&gt;

&lt;p&gt;Database と連携する前に、Composer と連携し、PHP フレームワークの &lt;a href=&#34;https://laravel.com/&#34; target=&#34;_blank&#34;&gt;Laravel&lt;/a&gt; をインストールしてみようと思います&lt;/p&gt;

&lt;h2 id=&#34;composer-のイメージを-pull-する&#34;&gt;Composer のイメージを pull する&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull composer/composer
...（略）
Status: Downloaded newer image for composer/composer:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;composer-コンテナを起動する&#34;&gt;Composer コンテナを起動する&lt;/h2&gt;

&lt;p&gt;Composer で Laravel をインストールする前に、前回作成した &lt;code&gt;index.php&lt;/code&gt; を削除しておきましょう&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/docker/www &amp;amp;&amp;amp; rm index.php
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは Composer で　Laravel をインストールしてみます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --rm -v /Users/enomotodev/docker/www:/app composer/composer create-project --prefer-dist laravel/laravel ./
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで Laravel がインストールされました&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--rm&lt;/code&gt; オプションを使用することによって、コンテナを起動して終了するとコンテナを破棄してくれます&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/nginx/nginx.conf&lt;/code&gt; を下記のように編集して、Nginx のコンテナを再起動させます&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/nginx/nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;root /var/www/html;
↓
root /var/www/html/public;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Nginx コンテナを再起動&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ docker restart nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次にパーミッションを整えます&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod -R 777 ~/docker/www/storage ~/docker/www/bootstrap/cache
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで確認してみましょう&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/docker-composer.png&#34; alt=&#34;Docker Composer Laravel ブラウザ確認&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事 Laravel が起動できました！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;PHP 開発に欠かせない Composer も Docker で簡単に導入することができました&lt;/p&gt;

&lt;p&gt;Composer は install や update 時にしか使わないので、&lt;code&gt;docker run&lt;/code&gt; のときに &lt;code&gt;--rm&lt;/code&gt; オプションを使用し、コンテナの終了時にコンテナを破棄するのがポイントになります&lt;/p&gt;

&lt;p&gt;次回は MySQL と連携していきたいと思います&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>【 php-fpm 編】Mac に Docker インストールしてみた</title>
      <link>http://enomotodev.github.io/post/docker-mac-phpfpm/</link>
      <pubDate>Sun, 24 Apr 2016 02:06:12 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/docker-mac-phpfpm/</guid>
      <description>

&lt;p&gt;前回の『&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-nginx/&#34;&gt;【 Nginx 編】Mac に Docker インストールしてみた&lt;/a&gt;』の続きです。&lt;/p&gt;

&lt;h2 id=&#34;コンテナを削除する&#34;&gt;コンテナを削除する&lt;/h2&gt;

&lt;p&gt;Nginx のコンテナなどが稼働していると思うので、一旦全て削除します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker rm -f `docker ps -a -q`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;php-fpm-のイメージを-pull-する&#34;&gt;php-fpm のイメージを pull する&lt;/h2&gt;

&lt;p&gt;公式の php-fpm のイメージを pull します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull php:fpm
...（略）
Status: Downloaded newer image for php:fpm
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;php-fpm-のコンテナを起動する&#34;&gt;php-fpm のコンテナを起動する&lt;/h2&gt;

&lt;p&gt;最初に Document Root に配置する PHP ファイルを作成します&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/docker/www/index.php&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
    phpinfo();
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PHP ファイルの準備ができたら php-fpm のコンテナを起動しましょう&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --name fpm -p 9000:9000 -v /Users/enomotodev/docker/www:/var/www/html -d php:fpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--name&lt;/code&gt; オプションで &lt;code&gt;fpm&lt;/code&gt; と指定することによって、&lt;code&gt;fpm&lt;/code&gt; という名前でコンテナを起動しています&lt;/p&gt;

&lt;p&gt;続けて、Nginx のコンテナを起動するのですが、先に前回作成した conf ファイルを編集しましょう&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/docker/nginx/nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen 8080;

    root /var/www/html;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_pass fpm:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;

        include fastcgi_params;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;conf ファイルの準備ができたので、Nginx のコンテナを起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run --name nginx -p 9090:8080 -v /Users/enomotodev/docker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf --link fpm -d nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--link&lt;/code&gt; オプションで &lt;code&gt;fpm&lt;/code&gt; を指定することによって、Nginx コンテナから php-fpm コンテナへの接続ができるようになります&lt;/p&gt;

&lt;p&gt;つまり、conf ファイルの &lt;code&gt;fastcgi_pass fpm:9000;&lt;/code&gt; の部分は php-fpm コンテナの &lt;code&gt;9000&lt;/code&gt; 番ポートに接続するという意味になります&lt;/p&gt;

&lt;p&gt;それでは、ブラウザで確認してみましょう&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/docker-phpfpm.png&#34; alt=&#34;Docker php-fpm ブラウザ確認&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;phpinfo が表示されました！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Nginx と PHP の連携ができたので、次は Database との連携も行い、Docker で PHP 開発環境を構築したいと思います&lt;/p&gt;

&lt;h2 id=&#34;つづき&#34;&gt;つづき&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-composer/&#34;&gt;【 Composer 編】Mac に Docker インストールしてみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【 Nginx 編】Mac に Docker インストールしてみた</title>
      <link>http://enomotodev.github.io/post/docker-mac-nginx/</link>
      <pubDate>Mon, 04 Apr 2016 23:33:12 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/docker-mac-nginx/</guid>
      <description>

&lt;p&gt;前回の『&lt;a href=&#34;http://enomotodev.github.io/post/install-docker-mac/&#34;&gt;Mac に Docker インストールしてみた&lt;/a&gt;』の続きです。&lt;/p&gt;

&lt;p&gt;実際に Nginx + PHP + MySQL 環境を構築するにあたって、今回は Nginx コンテナを起動させて、静的コンテンツの表示までを行いたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;docker-machine-の起動&#34;&gt;Docker Machine の起動&lt;/h2&gt;

&lt;p&gt;前回から、PC をシャットダウンしたり、再起動している場合は、もう一度 Docker Machine を起動させなければいけないので、下記のコマンドで起動させてください。（それ以外の方は次の『Nginx コンテナを起動させる』から読んでください）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine start dev-machine
Starting &amp;quot;dev-machine&amp;quot;...
(dev-machine) Waiting for an IP...
Machine &amp;quot;dev-machine&amp;quot; was started.
Waiting for SSH to be available...
Detecting the provisioner...
Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前回と同じ手順を踏んで、Docker Machine に接続できるようにしていきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine env dev-machine
export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://192.168.99.101:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/Users/enomotodev/.docker/machine/machines/dev-machine&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;dev-machine&amp;quot;
# Run this command to configure your shell:
# eval $(docker-machine env dev-machine)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(docker-machine env dev-machine)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              97434d46f197        2 weeks ago         188 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;無事 &lt;code&gt;docker images&lt;/code&gt; コマンドが実行できました。&lt;/p&gt;

&lt;h2 id=&#34;nginx-コンテナを起動させる&#34;&gt;Nginx コンテナを起動させる&lt;/h2&gt;

&lt;p&gt;まずは &lt;code&gt;docker pull&lt;/code&gt; コマンドを実行して、Nginx のイメージを取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull nginx:latest
latest: Pulling from library/nginx
fdd5d7827f33: Pull complete
a3ed95caeb02: Pull complete
716f7a5f3082: Pull complete
7b10f03a0309: Pull complete
Digest: sha256:f6a001272d5d324c4c9f3f183e1b69e9e0ff12debeb7a092730d638c33e0de3e
Status: Downloaded newer image for nginx:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt; コマンドで確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              97434d46f197        2 weeks ago         188 MB
nginx               latest              af4b3d7d5401        3 weeks ago         190.5 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt; コマンドで Nginx のコンテナが起動するのですが、先に Nginx の設定ファイルと Document Root に置く HTML ファイルを準備します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/docker/nginx/nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen 8080 default_server;

    root /var/www;
    index index.html index.htm;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/docker/www/index.html&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;h1&amp;gt;Hello Docker!&amp;lt;/h1&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最低限の設定ですが、必要なファイルが準備できたので、&lt;code&gt;docker run&lt;/code&gt; コマンドで Nginx コンテナを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -p 9090:8080 -v /Users/enomotodev/docker/nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf -v /Users/enomotodev/docker/www:/var/www -d nginx
0902e290559b4a054d72b4cf2615334079cfa879df1cc35d9655d0f0e217c462
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで &lt;code&gt;docker run&lt;/code&gt; コマンドのオプションを少し確認したいと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; オプション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;-p&lt;/code&gt; オプションでポートマッピングの設定ができます。&lt;/p&gt;

&lt;p&gt;『Mac -&amp;gt; Docker Machine -&amp;gt; Nginx コンテナ』という流れで Nginx に接続していて、今回は &lt;code&gt;9090:8080&lt;/code&gt; と設定しているので、『Mac -&amp;gt; Docker Machine』の接続に &lt;code&gt;9090&lt;/code&gt; ポート、『Docker Machine -&amp;gt; Nginx コンテナ』の接続に &lt;code&gt;8080&lt;/code&gt; ポートを使用するという設定になっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-v&lt;/code&gt; オプション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;-v&lt;/code&gt;　オプションでは、Docker Machine と Nginx コンテナ間で共有するファイル・ディレクトリを指定できます。&lt;/p&gt;

&lt;p&gt;Docker Machine には、Mac の &lt;code&gt;/Users&lt;/code&gt; ディレクトリがマウントされているので、例えば Mac 上の &lt;code&gt;/Users/enomotodev/hoge&lt;/code&gt; ディレクトリは、Docker Machine 上でも &lt;code&gt;/Users/enomotodev/hoge&lt;/code&gt; ディレクトリになります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-v foo:bar&lt;/code&gt; と書くと、Docker Machine の &lt;code&gt;foo&lt;/code&gt; ディレクトリを Nginx コンテナの &lt;code&gt;bar&lt;/code&gt; にマウントさせることができ、それによってファイルやディレクトリを共有できます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d&lt;/code&gt; オプション&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;-d&lt;/code&gt; オプションを使用するとコンテナをバックグラウンドモードで起動することができます。&lt;/p&gt;

&lt;h2 id=&#34;nginx-コンテナの起動確認&#34;&gt;Nginx コンテナの起動確認&lt;/h2&gt;

&lt;p&gt;Nginx コンテナを起動させたので Docker Machine の IP を確認して、接続してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ip dev-machine
192.168.99.101
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker Machine の IP が &lt;code&gt;192.168.99.101&lt;/code&gt; とわかったので、Nginx コンテナを起動するときに指定した &lt;code&gt;9090&lt;/code&gt; ポートで接続してみます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://192.168.99.101:9090&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/docker-nginx.png&#34; alt=&#34;Docker Nginx ブラウザ確認&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事に表示されました！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Nginx コンテナを起動し、静的コンテンツの表示までできました。&lt;/p&gt;

&lt;p&gt;次回は PHP と連携して、動的なコンテンツの表示も行いたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;つづき&#34;&gt;つづき&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-phpfpm/&#34;&gt;【 php-fpm 編】Mac に Docker インストールしてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-composer/&#34;&gt;【 Composer 編】Mac に Docker インストールしてみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Mac に Docker インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-docker-mac/</link>
      <pubDate>Mon, 28 Mar 2016 12:48:00 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-docker-mac/</guid>
      <description>

&lt;h2 id=&#34;docker-docker-machine-のインストール&#34;&gt;Docker + Docker Machine のインストール&lt;/h2&gt;

&lt;p&gt;まずは、Docker 本体と Docker Machine をインストールします。&lt;/p&gt;

&lt;p&gt;Mac だと Docker を直接的に実行できないのですが、Docker Machine を使用すると、一旦VM上で CoreOS や boot2docker を実行して、その上で簡単に Docker を実行できるようになります。&lt;/p&gt;

&lt;p&gt;インストール自体はどちらも Homebrew で簡単にインストールすることができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install docker docker-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;machine-の作成&#34;&gt;Machine の作成&lt;/h2&gt;

&lt;p&gt;docker-machine コマンドで新しく Machine を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine create -d virtualbox dev-machine
・・・（省略）
Setting Docker configuration on the remote daemon...
Checking connection to Docker...
Docker is up and running!
To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env dev-machine
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の &lt;code&gt;dev-machine&lt;/code&gt; の部分は Machine の名前になるので、好きな名前をつけてかまいません。&lt;/p&gt;

&lt;p&gt;出力の最終行にVM上の Docker Machine に接続するために &lt;code&gt;docker-machine env dev-machine&lt;/code&gt; を実行してくださいと書かれているので、これを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine env dev-machine
export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot;
export DOCKER_HOST=&amp;quot;tcp://192.168.99.100:2376&amp;quot;
export DOCKER_CERT_PATH=&amp;quot;/path/to/.docker/machine/machines/dev-machine&amp;quot;
export DOCKER_MACHINE_NAME=&amp;quot;dev-machine&amp;quot;
# Run this command to configure your shell:
# eval $(docker-machine env dev-machine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker-machine env dev-machine&lt;/code&gt; を実行すると、環境によって多少異なりますが、このようなかたちで色々表示されるかと思います。&lt;/p&gt;

&lt;p&gt;これは要するに最終行の &lt;code&gt;eval $(docker-machine env dev-machine)&lt;/code&gt; というコマンドを実行すると、Docker に接続するための環境変数が設定されるということです。&lt;/p&gt;

&lt;p&gt;それでは、早速コマンドを実行してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval $(docker-machine env dev-machine)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特に何も出力されませんが、これで Docker Machine に接続できるようになりました。&lt;/p&gt;

&lt;h2 id=&#34;docker-machine-に接続する&#34;&gt;Docker Machine に接続する&lt;/h2&gt;

&lt;p&gt;Docker Machine に接続してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker-machine ssh dev-machine
                        ##         .
                  ## ## ##        ==
               ## ## ## ## ##    ===
           /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;\___/ ===
      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
           \______ o           __/
             \    \         __/
              \____\_______/
 _                 _   ____     _            _
| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __
| &#39;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &#39;__|
| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &amp;lt;  __/ |
|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|
Boot2Docker version 1.10.3, build master : 625117e - Thu Mar 10 22:09:02 UTC 2016
Docker version 1.10.3, build 20f81dd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker Machine に接続することができたので、&lt;code&gt;docker pull&lt;/code&gt; コマンドを実行して、Ubuntu のイメージを取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull ubuntu:latest
latest: Pulling from library/ubuntu
203137e8afd5: Pull complete
2ff1bbbe9310: Pull complete
933ae2486129: Pull complete
a3ed95caeb02: Pull complete
Digest: sha256:1bea66e185d3464fec1abda32ffaf2a11de69833cfcf81bd2b9a5be147776814
Status: Downloaded newer image for ubuntu:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt; コマンドを実行すると Docker Machine 内のイメージ一覧が見れるので、先ほど取得した Ubuntu のイメージがきちんと表示されるか確認してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              97434d46f197        3 days ago          188 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題なく Ubuntu のイメージが取得できたのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;mac-から-docker-コマンド実行&#34;&gt;Mac から Docker コマンド実行&lt;/h2&gt;

&lt;p&gt;ここまでは Docker Machine 内で docker コマンドを実行していたので、exit 等して Mac に戻りましょう。&lt;/p&gt;

&lt;p&gt;少し前に &lt;code&gt;eval $(docker-machine env dev-machine)&lt;/code&gt; を実行しましたが、これを実行していれば Mac からも docker コマンドが実行できるので、Docker Machine 内のイメージ一覧を表示させて、docker コマンドがきちんと実行できるか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              97434d46f197        3 days ago          188 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mac からも docker コマンドが実行できました！&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;これで Mac に docker の環境を整えることができました。&lt;/p&gt;

&lt;p&gt;ですが、このままでは docker をどのように使うのかイメージがつきづらいと思いますので、次回以降で PHP の開発環境を実際に構築していきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;つづき&#34;&gt;つづき&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-nginx/&#34;&gt;【 Nginx 編】Mac に Docker インストールしてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-phpfpm/&#34;&gt;【 php-fpm 編】Mac に Docker インストールしてみた&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://enomotodev.github.io/post/docker-mac-composer/&#34;&gt;【 Composer 編】Mac に Docker インストールしてみた&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CentOS に Jenkins インストールしてみた</title>
      <link>http://enomotodev.github.io/post/install-jenkins/</link>
      <pubDate>Thu, 04 Feb 2016 22:33:24 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-jenkins/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;今まで Jenkins を使う機会はたくさんあったのですが、インストールや設定周りなどをやったことがなかったので、今回 CentOS 6.7 に実際にインストールして軽く触ってみました。&lt;/p&gt;

&lt;h2 id=&#34;java-をインストールする&#34;&gt;Java をインストールする&lt;/h2&gt;

&lt;p&gt;Jenkins は Java で書かれているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java がちゃんとインストールできているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version
openjdk version &amp;quot;1.8.0_71&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_71-b15)
OpenJDK 64-Bit Server VM (build 25.71-b15, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-のインストール&#34;&gt;Jenkins のインストール&lt;/h2&gt;

&lt;p&gt;Java のインストールが確認できたので、Jenkins のインストールに入っていきます。&lt;/p&gt;

&lt;p&gt;まずは、Jenkins のレポジトリを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
$ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins のレポジトリを追加できたので、Jenkins をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install jenkins
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jenkins-の起動&#34;&gt;Jenkins の起動&lt;/h2&gt;

&lt;p&gt;Jenkins のインストールが完了したので、起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/jenkins start
Starting Jenkins                                           [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再起動時にも自動で起動するように設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chkconfig jenkins on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jenkins はデフォルトでは 8080 ポートを使用するようなので、http://[ドメイン名]:8080 にアクセスすると、下記のような画面が表示されると思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_jenkins.png&#34; alt=&#34;Jenkinsスタート画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;※ アクセスできない人は、SELinux や iptables などの設定を確認してみてください。&lt;/p&gt;

&lt;h2 id=&#34;ジョブの作成&#34;&gt;ジョブの作成&lt;/h2&gt;

&lt;p&gt;インストールも無事にできたので、早速簡単なジョブを追加してみましょう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;画面左上の「新規ジョブ作成」をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job.png&#34; alt=&#34;Jenkinsジョブ作成&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ジョブ名を「test」にして、「フリースタイル・プロジェクトのビルド」を選択して OK をクリック。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job2.png&#34; alt=&#34;Jenkinsジョブ作成2&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「ビルド」の「ビルド手順の追加」から「シェルの実行」を追加。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job3.png&#34; alt=&#34;Jenkinsジョブ作成3&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;シェルスクリプトのテキストエリアに「echo &amp;lsquo;Hello Jenkins !!&amp;lsquo;」と入力して、保存します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins の TOP に戻るとジョブの一覧が表示されているので、ここから今作成した test ジョブのビルドを実行します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job4.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;すぐにビルドが完了すると思いますので、「最新の成功ビルド」から「コンソール出力」を選択します。
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job5.png&#34; alt=&#34;Jenkinsジョブ作成5&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;「Hello Jenkins !!」と出力されているのが確認できました！
&lt;img src=&#34;http://enomotodev.github.io/images/jenkins_new_job6.png&#34; alt=&#34;Jenkinsジョブ作成6&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Jenkins をインストールして、簡単なジョブをつくってみました。&lt;/p&gt;

&lt;p&gt;実際にはいろんなライブラリを入れたり、ユーザーの設定を行ったりなど色々ありますが、インストール自体はそれほど難しくないのかなという印象を受けました。&lt;/p&gt;

&lt;p&gt;Jenkins の機能はあまり詳しくないので、これから勉強していきたいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>閉包テーブル（Closure Table）を試してみた</title>
      <link>http://enomotodev.github.io/post/closure-table/</link>
      <pubDate>Thu, 19 Nov 2015 23:53:29 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/closure-table/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;SQLアンチパターンという本を読んでいたら、再帰的なデータに対して『閉包テーブル（Closure Table）』という考え方があっったので、MySQL 5.6 で試してみました。&lt;br /&gt;
再帰的なデータとは、例えば上司を1人までもつことができ、部下は複数持つことができる、下記の組織図のようなツリー構造のデータのことを指します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/soshikizu.png&#34; alt=&#34;組織図&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;テーブル作成&#34;&gt;テーブル作成&lt;/h2&gt;

&lt;p&gt;それでは早速テーブルを作成してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE `Employees` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `TreePaths` (
  `ancestor` bigint(20) NOT NULL,
  `descendant` bigint(20) NOT NULL,
  PRIMARY KEY (`ancestor`,`descendant`),
  KEY `descendant` (`descendant`),
  CONSTRAINT `TreePaths_ibfk_1` FOREIGN KEY (`ancestor`) REFERENCES `Employees` (`id`),
  CONSTRAINT `TreePaths_ibfk_2` FOREIGN KEY (`descendant`) REFERENCES `Employees` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;閉包テーブルでは、Employees テーブルに自分自身の id を親に持つカラムを設けるのではなく、別のテーブルを用いて、ツリー構造の情報を格納します。&lt;br /&gt;
このテーブルには親子関係の組み合わせを格納するのですが、直接の子ではない（2つ以上離れている）場合も子と見なすのと、自分自身も子と見なします。&lt;br /&gt;
下の図の場合、１の子は１〜８の全てになり、３の子は３〜４、５の子は５〜８といった感じになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/soshikizu_num.png&#34; alt=&#34;組織図（番号）&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;一応、テーブルにまとめました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;親&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;子&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;データ作成&#34;&gt;データ作成&lt;/h2&gt;

&lt;p&gt;このあと実際にクエリを発行したりするので、テストデータを INSERT しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO `Employees` (`id`, `name`) VALUES
(1, &amp;quot;遠藤&amp;quot;), (2, &amp;quot;田中&amp;quot;), (3, &amp;quot;佐藤&amp;quot;), (4, &amp;quot;原田&amp;quot;),
(5, &amp;quot;吉田&amp;quot;), (6, &amp;quot;古田&amp;quot;), (7, &amp;quot;鈴木&amp;quot;), (8, &amp;quot;松井&amp;quot;);

INSERT INTO `TreePaths` (`ancestor`, `descendant`) VALUES
(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8),
(2, 2), (3, 3), (3, 4), (4, 4), (5, 5), (5, 6), (5, 7), (5, 8),
(6, 6), (6, 7), (7, 7), (8, 8);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;子を全取得&#34;&gt;子を全取得&lt;/h2&gt;

&lt;p&gt;子を全取得するのはとても簡単にできます。&lt;br /&gt;
例えば５の子を全部取得するには TreePaths テーブルで親が５の行を探すだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SELECT e.*
    -&amp;gt; FROM Employees AS e
    -&amp;gt;   INNER JOIN TreePaths AS t ON e.id = t.descendant
    -&amp;gt; WHERE t.ancestor = 5;
+----+--------+
| id | name   |
+----+--------+
|  5 | 吉田   |
|  6 | 古田   |
|  7 | 鈴木   |
|  8 | 松井   |
+----+--------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;親を全取得&#34;&gt;親を全取得&lt;/h2&gt;

&lt;p&gt;次に、７の親を全部取得してみます。
先ほどとは逆に TreePaths テーブルで子が７の行を探すだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; SELECT e.*
    -&amp;gt; FROM Employees AS e
    -&amp;gt;   INNER JOIN TreePaths AS t ON e.id = t.ancestor
    -&amp;gt; WHERE t.descendant = 7;
+----+--------+
| id | name   |
+----+--------+
|  1 | 遠藤   |
|  5 | 吉田   |
|  6 | 古田   |
|  7 | 鈴木   |
+----+--------+
4 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;データを登録&#34;&gt;データを登録&lt;/h2&gt;

&lt;p&gt;IDが４のデータに子をひとつ登録してみましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INSERT INTO Employees (`name`) VALUES (&amp;quot;本田&amp;quot;);  // LAST_INSERT_ID() = 9

INSERT INTO TreePaths (ancestor, descendant)
  SELECT t.ancestor, 9
  FROM TreePaths AS t
  WHERE t.descendant = 4
UNION ALL
  SELECT 9, 9;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;少しわかりづらいかもしれませんが、考え方としてはIDが４の親全てに新規で追加した子のIDを持たせるといった感じです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;親一覧の取得、子一覧の取得、データの登録を実際にやってみましたが、どれも比較的簡単なSQLで対応できました。&lt;br /&gt;
他のメリットとしては、どれだけ階層が深くなっても特に問題がないということです。SQLもどれだけ階層が深くなっても変わりません。&lt;/p&gt;

&lt;p&gt;階層構造のデータを格納するときは、この閉包テーブル（Closure Table）を試してみてはいかがでしょうか。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache &#43; fluentd &#43; Elasticsearch &#43; Kibana を連携させてみた</title>
      <link>http://enomotodev.github.io/post/install-elasticsearch/</link>
      <pubDate>Sat, 14 Nov 2015 18:07:46 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-elasticsearch/</guid>
      <description>

&lt;h2 id=&#34;elasticsearch-とは&#34;&gt;Elasticsearch とは&lt;/h2&gt;

&lt;p&gt;Elasticsearch とは2010年に OSS としてリリースされた分散型全文検索サーバです。&lt;br /&gt;
実際に CentOS 6.7 にインストールしてつかってみることで Elasticsearch の基本を学んでいきたいと思います。
&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回の記事&lt;/a&gt;で設定した内容をそのまま使用するので、まだ見てない方はぜひ参照してみてください。&lt;/p&gt;

&lt;h2 id=&#34;elasticsearch-のインストール&#34;&gt;Elasticsearch のインストール&lt;/h2&gt;

&lt;p&gt;Elasticsearch は Java で実装されているので、まずは Java をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo yum install -y java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールできているか確認します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -version

openjdk version &amp;quot;1.8.0_65&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_65-b17)
OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を yum でインストールするので、レポジトリのGPGキーをインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;レポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/elasticsearch.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[elasticsearch-2.x]
name=Elasticsearch repository for 2.x packages
baseurl=http://packages.elastic.co/elasticsearch/2.x/centos
gpgcheck=1
gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum でインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install -y elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定も行っておきましょう&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig --add elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;config を編集してコメントアウトを外します。&lt;/p&gt;

&lt;p&gt;/etc/elasticsearch/elasticsearch.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# http.port: 9200
↓
http.port: 9200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elasticsearch を起動させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/elasticsearch start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl コマンドを利用して、Elasticsearch にアクセスして起動の確認を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET http://localhost:9200/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のようなレスポンスが返ってきたら Elasticsearch がきちんと起動しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot; : &amp;quot;Red Nine&amp;quot;,
  &amp;quot;cluster_name&amp;quot; : &amp;quot;elasticsearch&amp;quot;,
  &amp;quot;version&amp;quot; : {
    &amp;quot;number&amp;quot; : &amp;quot;2.0.0&amp;quot;,
    &amp;quot;build_hash&amp;quot; : &amp;quot;de54438d6af8f9340d50c5c786151783ce7d6be5&amp;quot;,
    &amp;quot;build_timestamp&amp;quot; : &amp;quot;2015-10-22T08:09:48Z&amp;quot;,
    &amp;quot;build_snapshot&amp;quot; : false,
    &amp;quot;lucene_version&amp;quot; : &amp;quot;5.2.1&amp;quot;
  },
  &amp;quot;tagline&amp;quot; : &amp;quot;You Know, for Search&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fluentd のプラグインをインストールしたり、事前準備を行います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum groupinstall &#39;Development tools&#39;
sudo /opt/td-agent/embedded/bin/fluent-gem install fluent-plugin-elasticsearch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://enomotodev.github.io/post/install-fluentd/&#34;&gt;前回&lt;/a&gt;で設定した ad-agent の設定を変更します。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    type elasticsearch
    type_name access_log
    host localhost
    port 9200

    logstash_format true
    logstash_prefix apache-log
    logstash_dateformat %Y%m%d
    include_tag_key true
    tag_key @log_name
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent を再起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは apache のログが elasticsearch に送られているか確認します。&lt;br /&gt;
まずは存在するインデックス情報一覧を取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/_aliases?pretty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記のような結果が返ってきたらOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;apache-log-20151114&amp;quot; : {
    &amp;quot;aliases&amp;quot; : { }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、11月14日のログを全部取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -XGET http://localhost:9200/apache-log-20151114/_search -d &#39;
{
  &amp;quot;query&amp;quot;: {
    &amp;quot;match_all&amp;quot; : {}
  }
}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実際にログを確認できたでしょうか？&lt;br /&gt;
次はいよいよ Kibana と連携し、ログの可視化について学んでみましょう。&lt;/p&gt;

&lt;h2 id=&#34;kibana-とは&#34;&gt;Kibana とは&lt;/h2&gt;

&lt;p&gt;Kibana は Elasticsearch に格納されたデータを検索し、グラフなど様々な形で可視化できるツールです。&lt;br /&gt;
単なる可視化ツールというわけではなく、データの集計・可視化・分析までを統合的にできるツールです。&lt;/p&gt;

&lt;h2 id=&#34;kibana-のインストール&#34;&gt;Kibana のインストール&lt;/h2&gt;

&lt;p&gt;Kibana をインストールします&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sL https://download.elastic.co/kibana/kibana/kibana-4.2.0-linux-x64.tar.gz  | sudo tar zxf - -C /tmp
sudo mv /tmp/kibana-4.2.0-linux-x64 /usr/share/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが完了したので、Kibana を起動します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/share/kibana/bin/kibana
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動したので http://[ドメイン名]:5601 にアクセスしてみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://enomotodev.github.io/images/start_kibana.png&#34; alt=&#34;Kibana初期画面&#34; class=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;無事 Kibana の画面が表示されました&lt;/p&gt;

&lt;h2 id=&#34;kibana-の設定&#34;&gt;Kibana の設定&lt;/h2&gt;

&lt;p&gt;上の画像のページで『index names or pattern』を &lt;code&gt;apache-log-*&lt;/code&gt; に変更して Create ボタンを押します。&lt;/p&gt;

&lt;p&gt;画面上の Discover にアクセスすると最新のログがみれるかと思います。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最後の方、かなり駆け足になってしまいましたが、Elasticsearch と Kibana をインストールして、Apache と fluentd と連携してみました。&lt;br /&gt;
他にも便利な機能があり、色々とできるみたいなので、私自身もこれからこれらのツールについてさらに学んでいきたいと思います。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>fluentdつかってみた</title>
      <link>http://enomotodev.github.io/post/install-fluentd/</link>
      <pubDate>Sat, 14 Nov 2015 14:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-fluentd/</guid>
      <description>

&lt;h2 id=&#34;fluentd-とは&#34;&gt;fluentd とは&lt;/h2&gt;

&lt;p&gt;fluentd とは&lt;a href=&#34;http://www.treasuredata.com/&#34;&gt;Treasure Data&lt;/a&gt;という会社が開発している、さまざまなログの収集手段を提供するログ管理ツールです。&lt;br /&gt;
今回は CentOS 6.7 で実際にインストールしてつかってみることによって基本的な設定を学んでいきたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;td-agent-をインストール&#34;&gt;td-agent をインストール&lt;/h2&gt;

&lt;p&gt;td-agent ？ となるかと思いますが、td-agent には以下のものが同梱されています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;コアライブラリ&lt;/li&gt;
&lt;li&gt;fluentd とプラグイン&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、ad-agent の中に fluentd が入っていて、プラグインなども一緒に入っているので、通常は td-agent をインストールします。&lt;/p&gt;

&lt;p&gt;インストールにあたっては公式にインストールスクリプトが公開されているので今回はそちらをつかってインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動は次のコマンドでできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo /etc/init.d/td-agent start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;設定ファイルの編集&#34;&gt;設定ファイルの編集&lt;/h2&gt;

&lt;p&gt;それでは設定ファイルを編集してみましょう。&lt;br /&gt;
まずは、ログ収集の設定を行います。なお、デフォルトの設定はすべて削除してしまって問題ありません。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;
    # 入力に in_tail プラグインを指定
    type tail
    # 監視するログファイルのパスを指定
    path /var/log/httpd/access_log
    # ログにつけるタグを指定
    tag apache.access
    # 監視するファイルをどの行まで読み込んだかを記録するファイルの指定
    pos_file /var/log/td-agent/httpd-access_log.pos
    # ログの書式を指定
    format apache2
&amp;lt;/source&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に上記の記述の下にログ出力の設定を追記していきます。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# 上で指定したタグを設定
&amp;lt;match apache.access&amp;gt;
    # 出力に out_file プラグインを指定
    type file
    # 出力先のファイルを指定
    path /var/log/td-agent/httpd/access.log
    # ファイル名に含める日時情報を指定
    time_slice_format %Y%m%d
    # ログファイルの更新後に旧ログファイルへのログ記録を継続する時間を指定
    time_slice_wait 10m
    # ログをgzip形式で圧縮
    compress gzip
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このままだと /var/log/httpd ディレクトリのパーミッションエラーになってしまうので、/var/log/httpd　ディレクトリに一般ユーザー実行権限を与えます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod o+x /var/log/httpd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定は以上となるので、td-agent をリロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで apache にアクセスした後に実際にログが保存されるか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls /var/log/td-agent/httpd/
access.log.20151114.b524785e8e3b0d946
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent によってログが保存されたのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;ログをmongodbに保存&#34;&gt;ログをMongoDBに保存&lt;/h2&gt;

&lt;p&gt;まずは MongoDB をインストールするのでレポジトリを追加します。&lt;/p&gt;

&lt;p&gt;/etc/yum.repos.d/10gen.repo&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[10gen]
name=10gen Repository
baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/i686
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yum インストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install mongo-10gen mongo-10gen-server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB を起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;自動起動の設定もしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chkconfig mongod on
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB にアクセスして fluentd という名前のデータベースを作成します&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type &amp;quot;help&amp;quot;.
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB の設定はこれで完了したので、td-agent の設定を変更してログの出力先を MongoDBに変更しましょう。&lt;/p&gt;

&lt;p&gt;/etc/td-agent/td-agnet.conf&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;match apache.access&amp;gt;
    # 出力に out_mongo プラグインを指定
    type mongo
    # ホスト指定
    host localhost
    # ポート指定
    port 27017
    # データベースを指定
    database fluentd
    # Collectionを指定
    collection apache_access
    # Capped Collection 機能を利用する
    capped
    # Collection の上限サイズを 1G に設定
    capped_size 1024m
    # 10秒おきにログを MongoDB に flush する
    flush_interval 10s
&amp;lt;/match&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;td-agent をリロードして設定を反映させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /etc/init.d/td-agent reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;それでは MongoDB にアクセスして『/』というパスへのアクセスのログ件数を確認することで、ログが MongoDB に保存されているか確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo

MongoDB shell version: 2.6.11
connecting to: test

&amp;gt; use fluentd

switched to db fluentd

&amp;gt; db.apache_access.count({path: &amp;quot;/&amp;quot;});

23
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ログが23件保存されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;fluentd はリモートのサーバにログを送ることもでき、本番環境ではそのような構成になりますが、今回 fluentd の最低限の知識や基本的な設定はこれである程度学ぶことができたかと思います。&lt;br /&gt;
ここから先の細い設定などは&lt;a href=&#34;http://www.fluentd.org/&#34;&gt;公式サイト&lt;/a&gt;などでさらに学習していきましょう！&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Gooseつかってみた</title>
      <link>http://enomotodev.github.io/post/use-goose/</link>
      <pubDate>Wed, 11 Nov 2015 19:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/use-goose/</guid>
      <description>

&lt;h2 id=&#34;gooseとは&#34;&gt;Gooseとは&lt;/h2&gt;

&lt;p&gt;GooseとはGo言語で作られたDBマイグレーションツールです。&lt;br /&gt;
develop環境やproduction環境など各環境に簡単に設定を変更でき、かなり便利そうなので実際にMySQLで試してみました。&lt;/p&gt;

&lt;h2 id=&#34;gooseパッケージの取得&#34;&gt;Gooseパッケージの取得&lt;/h2&gt;

&lt;p&gt;まずは go get して Goose パッケージを取得します。&lt;br /&gt;
※ Goをインストールしていない人や、GOPATHを設定していない人は&lt;a href=&#34;http://golang-jp.org/doc/install#install&#34; target=&#34;_blank&#34;&gt;公式ドキュメント&lt;/a&gt;を参考に導入してみてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go get bitbucket.org/liamstask/goose/cmd/goose
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dbディレクトリの作成&#34;&gt;dbディレクトリの作成&lt;/h2&gt;

&lt;p&gt;プロジェクトのルート直下に db ディレクトリを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir db
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの作成&#34;&gt;configファイルの作成&lt;/h2&gt;

&lt;p&gt;取得したGooseパッケージのサンプルからconfigファイルをコピーします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp $GOPATH/src/bitbucket.org/liamstask/goose/db-sample/dbconf.yml db/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configファイルの編集&#34;&gt;configファイルの編集&lt;/h2&gt;

&lt;p&gt;まずは先ほどコピーしてきたconfigファイルの中身をのぞいてみます。&lt;br /&gt;
デフォルトで test / develop / production のそれぞれの環境に PostgreSQL の driver が設定してあるのが、なんとなくわかるかと思います。&lt;/p&gt;

&lt;p&gt;db/dbconf.yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;test:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

development:
    driver: postgres
    open: user=liam dbname=tester sslmode=disable

production:
    driver: postgres
    open: user=liam dbname=tester sslmode=verify-full

customimport:
    driver: customdriver
    open: customdriver open
    import: github.com/custom/driver
    dialect: mysql

environment_variable_config:
    driver: $DB_DRIVER
    open: $DATABASE_URL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回は試すだけなので、developの部分のみ編集してみます。&lt;br /&gt;
MySQL のdriverは mymysql とのことなので、 driver には mymysql を設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: user=liam dbname=tester sslmode=disable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に DB に接続するために open の箇所にユーザ名やデータベース名を設定します。&lt;br /&gt;
何種類か設定の仕方があるようなので下記を参考にしてみてください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;unix:SOCKPATH,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;tcp:ADDR,OPTIONS*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;li&gt;cloudsql:INSTANCE*DBNAME/USER/PASSWD&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考までに下記のような場合の設定を載せておきます。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Host：localhost&lt;br /&gt;
Port：3306&lt;br /&gt;
データベース：test&lt;br /&gt;
ユーザ：root&lt;br /&gt;
パスワード：pass&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;development:
    driver: mymysql
    open: tcp:localhost:3306*test/root/pass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでDBの設定は完了です。&lt;/p&gt;

&lt;h2 id=&#34;db接続確認&#34;&gt;DB接続確認&lt;/h2&gt;

&lt;p&gt;goose status コマンドでDBに問題なく接続できているか確認できます。&lt;br /&gt;
これ以降の goose コマンドも全てプロジェクトルートで実行してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose status
goose: status for environment &#39;development&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記のようにエラーなく表示されたらOKです。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションファイルの作成&#34;&gt;マイグレーションファイルの作成&lt;/h2&gt;

&lt;p&gt;それではDB接続もOKなので、早速マイグレーションファイルを作りましょう。&lt;/p&gt;

&lt;p&gt;マイグレーションファイルは Go または SQL で書けるようなので、今回は簡単なSQLで書いてみます。&lt;/p&gt;

&lt;p&gt;それでは、goose create コマンドでマイグレーションファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose create CreateUsersTable sql
goose: created /project/db/migrations/20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これだけでマイグレーションファイルのひな型が作成されました。&lt;br /&gt;
早速中身を見てみましょう。&lt;/p&gt;

&lt;p&gt;db/migrations/20151111194459_CreateUsersTable.sql&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied


-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このファイルにCREATE文とDROP文をそれぞれ書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-- +goose Up
-- SQL in section &#39;Up&#39; is executed when this migration is applied
CREATE TABLE IF NOT EXISTS `users` (
    `id` INT NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(255) NOT NULL COMMENT &#39;ユーザ名&#39;,
    PRIMARY KEY (`id`)
) ENGINE = InnoDB;

-- +goose Down
-- SQL section &#39;Down&#39; is executed when this migration is rolled back
DROP TABLE `users`;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでマイグレーションファイルの準備はできたので、実際に実行してテーブルが作成されるか確認してみましょう。&lt;/p&gt;

&lt;h2 id=&#34;マイグレーションの実行&#34;&gt;マイグレーションの実行&lt;/h2&gt;

&lt;p&gt;goose up コマンドでマイグレーションが実行されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose up
goose: migrating db environment &#39;development&#39;, current version: 0, target: 20151111194459
OK    20151111194459_CreateUsersTable.sql.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーブルが作成されているか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
| users            |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; desc goose_db_version;
+------------+---------------------+------+-----+-------------------+----------------+
| Field      | Type                | Null | Key | Default           | Extra          |
+------------+---------------------+------+-----+-------------------+----------------+
| id         | bigint(20) unsigned | NO   | PRI | NULL              | auto_increment |
| version_id | bigint(20)          | NO   |     | NULL              |                |
| is_applied | tinyint(1)          | NO   |     | NULL              |                |
| tstamp     | timestamp           | YES  |     | CURRENT_TIMESTAMP |                |
+------------+---------------------+------+-----+-------------------+----------------+
4 rows in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
+----+----------------+------------+---------------------+
2 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが作成されているのと、マイグレーションのバージョン管理用の goose_db_version テーブルが作成されているのが確認できました。&lt;br /&gt;
次に今実行したマイグレーションをロールバックしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ goose down
goose: migrating db environment &#39;development&#39;, current version: 20151111194459, target: 0
OK    20151111194459_CreateUsersTable.sql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql&amp;gt; show tables;
+------------------+
| Tables_in_test   |
+------------------+
| goose_db_version |
+------------------+
1 row in set (0.00 sec)

mysql&amp;gt; select * from goose_db_version;
+----+----------------+------------+---------------------+
| id | version_id     | is_applied | tstamp              |
+----+----------------+------------+---------------------+
|  1 |              0 |          1 | 2015-11-11 19:49:59 |
|  2 | 20151111194459 |          1 | 2015-11-11 19:49:59 |
|  3 | 20151111194459 |          0 | 2015-11-11 19:53:28 |
+----+----------------+------------+---------------------+
3 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;usersテーブルが削除されているのが確認できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;goose をつかうことによって、簡単にマイグレーションすることができました。&lt;br /&gt;
最近、Go言語を使ったプロジェクトも増えてきているようなので、goose もこれからさらに活躍する場面が増えるのではないでしょうか。&lt;/p&gt;

&lt;hr /&gt;
</description>
    </item>
    
  </channel>
</rss>