<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>

    <link>http://enomotodev.github.io/post/</link>
    <description>Recent content in Posts on enomotodev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja_JP</language>
    <managingEditor>enomoto.dev@gmail.com (Takafumi Enomoto)</managingEditor>
    <webMaster>enomoto.dev@gmail.com (Takafumi Enomoto)</webMaster>
    <copyright>(c) 2016 enomotodev</copyright>
    <lastBuildDate>Wed, 26 Apr 2017 21:43:58 +0900</lastBuildDate>
    
	<atom:link href="http://enomotodev.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>

      <link>http://enomotodev.github.io/post/ionic-sample-app/</link>
      <pubDate>Wed, 26 Apr 2017 21:43:58 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/ionic-sample-app/</guid>
      <description>開発環境  macOS 10.12.4 Node.js 7.9.0  ionic のインストール・プロジェクト作成 Ionic2 で簡単なカウンターアプリを作成したので、まとめてみました。
まずは npm install で cordova と ionic をグローバルインストールします。
$ npm install -g cordova ionic  ionic がインストールできたので、ionic start コマンドでプロジェクトを作成してみます。
$ ionic start SampleApp blank --v2  blank の部分はテンプレートの種類で、他にも tabs や sidemenu などが指定できるようです。
それでは ionic serve コマンドでプロジェクトを起動してみます。
$ cd SampleApp $ ionic serve  http://localhost:8100/ionic-lab を開くと、各モバイル端末でどのように表示されるかが見れるので、こちらを確認しながら開発していきたいと思います。
コードが変更されると自動で更新されるので、タイトルを変更してみます。
 src/pages/home/home.html  &amp;lt;ion-title&amp;gt; Ionic Blank &amp;lt;/ion-title&amp;gt; ↓ &amp;lt;ion-title&amp;gt; サンプルアプリ &amp;lt;/ion-title&amp;gt;  ブラウザが自動で更新され、タイトル部分が更新されたのがわかるかと思います。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-aerospike/</link>
      <pubDate>Thu, 30 Mar 2017 22:21:54 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-aerospike/</guid>
      <description>Aerospike とは Aerospike（エアロスパイク）とは、米 Aerospike 社によって開発されている NoSQL データベースです
とにかく高速であると言われており、最近では日本の企業でも採用事例が増えてきています
今回は OSS 版を CentOS 上に構築してみたいと思います
作業環境  CentOS 7.3  Aerospike のインストール 公式ドキュメントを参考に Aerospike をインストールします
$ wget -O aerospike.tgz &#39;http://aerospike.com/download/server/latest/artifact/el7&#39; $ tar -xvf aerospike.tgz $ cd aerospike-server-community-3.12.0-el7/ $ sudo ./asinstall  自動起動設定をして、Aerospike を起動します
$ sudo systemctl enable aerospike $ sudo systemctl start aerospike  Aerospike が起動したのでステータスを確認してみましょう
$ sudo systemctl status aerospike ● aerospike.service - Aerospike Server Loaded: loaded (/usr/lib/systemd/system/aerospike.service; enabled; vendor preset: disabled) Drop-In: /etc/systemd/system/aerospike.</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-pyenv/</link>
      <pubDate>Thu, 29 Dec 2016 14:29:02 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-pyenv/</guid>
      <description>pyenv とは pyenv とは Python のバージョン管理を行なうコマンドラインツールで、複数のバージョンの Python のインストールや、インストールしたバージョンの変更を簡単に行うことができます。
Ruby では rbenv + ruby-build が有名ですが、それの Python 版だと考えていただけたらと思います。
作業環境  CentOS 7.3  pyenv のインストール まずは依存パッケージを yum でインストールします。
$ sudo yum install gcc zlib-devel bzip2 bzip2-devel readline readline-devel sqlite sqlite-devel openssl openssl-devel git  pyenv を ~/.pyenv に git clone します。
$ git clone https://github.com/yyuu/pyenv.git ~/.pyenv  ~/.bash_profile に環境変数などを設定します。
$ echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile $ echo &#39;export PATH=&amp;quot;$PYENV_ROOT/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profile $ echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-hologram/</link>
      <pubDate>Sun, 09 Oct 2016 01:49:06 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-hologram/</guid>
      <description>Hologram とは Hologram は Ruby 環境で動くスタイルガイドジェネレータです。
.css、.scss、.sass、.less、.styl などの多様な形式のファイルに書かれたコメントから、自動でスタイルガイドを作ってくれます。
スタイルガイドは、静的な HTML ファイルとして出力され、独自のテンプレートを使ってスタイルガイドをカスタマイズすることもできます。
作業環境  CentOS 7.2 Ruby 2.3.1 Bundler 1.13.2 Sass 3.4.22  Hologram のインストール プロジェクトの Gemfile に gem &amp;quot;hologram&amp;quot; を追記します。
source &amp;quot;https://rubygems.org&amp;quot; gem &amp;quot;sass&amp;quot; gem &amp;quot;hologram&amp;quot;  追記したら bundle install しましょう。
$ bundle install  インストールが完了したので、バージョンを確認してみましょう。
$ hologram -v hologram 1.4.0  Hologram の始め方 hologram init コマンドで hologram の設定ファイルなどが作成されるので、hologram init を実行してみます。
$ hologram init Created the following files and directories: hologram_config.</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/systemd-original-service/</link>
      <pubDate>Sat, 24 Sep 2016 01:42:59 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/systemd-original-service/</guid>
      <description>作業環境  CentOS 7.2  systemd とは systemd とは、Lennart Poettering と Kay Sievers を中心に開発された、Linux の起動処理やシステム管理を行う仕組みのことです。
2011年5月にメジャー Linux ディストリビューションの Fedora に採用され、2014年12月にリリースされた CentOS 7 にも採用されました。
systemd はこれまで使われてきたデーモンごとの起動シェルスクリプトに代わり、『ユニットファイル』と呼ばれる設定ファイルに各デーモン用の初期化命令を記述します。
コマンドを作る まずは systemd に登録して動作させるスクリプトを用意します。
今回は1秒ごとに現在時刻をログに追記していくスクリプトで試してみたいと思います。
 /opt/date.sh  #!/bin/bash while true do date &amp;gt;&amp;gt; /tmp/date.log sleep 1 done  実行権限を与えます。
sudo chmod 0755 /opt/date.sh  ユニットファイルを作成する  /etc/systemd/system/date.service  [Unit] Description = date log daemon [Service] ExecStart = /opt/date.sh Restart = always Type = simple [Install] WantedBy = multi-user.</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-redash/</link>
      <pubDate>Mon, 12 Sep 2016 23:23:16 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-redash/</guid>
      <description>作業環境  CentOS 7.2 Java 1.8.0_101 MySQL 5.7.14 Git 1.8.3.1  Docker + Docker Compose のインストール Re:dash は CentOS では Docker のコンテナ上で起動させるので、まずは Docker をインストールします。
Kernel のバージョンを確認する CentOS 7 に Docker をインストールするには Kernel が 3.10 以上ではないといけないようなので Kernel のバージョンを確認します。
$ uname -r 3.10.0-327.el7.x86_64  3.10 以上なので、Docker のインストールを進めていきます。
Docker のインストール まずは root ユーザに変更します。
$ sudo su -  ここからは root ユーザでの作業にになります。
次のコマンドで Docker のインストールができます。
# curl -fsSL https://get.docker.com/ | sh  インストールが完了したので、バージョンを確認します。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/embulk_csv_mysql/</link>
      <pubDate>Tue, 06 Sep 2016 23:19:17 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/embulk_csv_mysql/</guid>
      <description>今回は Embulk を使って、CSV から MySQL にデータを投入してみたいと思います。
Embulk とは Embulk とはバルクデータローダーと呼ばれる、データ転送ツールです。
Fluentd を開発した Tresure Data によって開発され、Fluentd を知っている方は、Fluentd のバッチ版だと考えると理解しやすいと思います。
（Fluentd についてはこちらで記事にしています）
Fluentd のように入力・出力のプラグインは多数公開されており、例えば、MySQL の入力プラグインと、ElasticSearch の出力プラグインを組み合わせることによって、MySQL のデータを ElasticSearch に移したりなど、異なるデータストア間でのデータの交換が容易に行うことができます。
作業環境  CentOS 7.2 Java 1.8.0_101 MySQL 5.7.14  ※ Embulk の実行には Java が必須となるので、事前にインストールしておきましょう。
Embulk のインストール GitHub に記載されている通りにコマンドを叩いていきます。
$ curl --create-dirs -o ~/.embulk/bin/embulk -L &amp;quot;http://dl.embulk.org/embulk-latest.jar&amp;quot; $ chmod +x ~/.embulk/bin/embulk $ echo &#39;export PATH=&amp;quot;$HOME/.embulk/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc $ source ~/.bashrc  以上で完了となるので、バージョンを確認してみます。
$ embulk --version embulk 0.</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/centos7_mysql57/</link>
      <pubDate>Thu, 01 Sep 2016 22:52:35 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/centos7_mysql57/</guid>
      <description>CentOS 7.2 上に MySQL 5.7 を yum インストールして、初期設定まで行ったので、その手順を記していきたいと思います。
はじめに CentOS 7 よりデータベースサーバの MySQL が MariaDB に置き換えられました。
もしすでに MariaDB がインストールされている場合はこれからインストールする MySQL と競合を起こさないように削除しましょう。
$ sudo yum remove mariadb-libs $ sudo rm -rf /var/lib/mysql  これで MariaDB 本体とデータフォルダを削除できました。
yum リポジトリの追加 CentOS 7 に MySQL 公式の yum リポジトリを追加します。
$ sudo rpm -ivh http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm  MySQL のインストール MySQL 公式の yum リポジトリが追加できたので、yum install コマンドでインストールしましょう。
$ sudo yum install mysql-community-server  バージョンを確認します。
$ mysqld --version mysqld Ver 5.</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/learn-ecmascript/</link>
      <pubDate>Sat, 06 Aug 2016 23:28:39 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/learn-ecmascript/</guid>
      <description>最近、ECMAScript2015 や ES6 などの言葉をよく聞くようになってきたので、復習も兼ねて、ECMAScript について調べてみました。
ECMAScript とは？ ECMAScript とは、標準化団体である Ecma International が策定している、JavaScript の標準規格のことです。
開発当初の JavaScript は、各ベンダーのブラウザによって独自拡張が数多く実装されており、互換性が低かったため、Ecma International が中心となり標準規格である ECMAScript が策定されました。
ECMAScript 6 / 2015 って何？ 正式名称は『ECMAScript 2015』（省略して『ES2015』とも呼ばれる）。
リリースは2015年6月。
ECMAScript の 6th Edition である為、当初は『ES6』と呼ばれていたが、正式名称を『ECMAScript 2015』とし、今後年単位のリリースとし、バージョンを年（ES2017, ES2018, &amp;hellip;）にしていく予定のようです。
なお、最新のバージョンは2016年6月にリリースされた『ECMAScript 2016（ES2016）』になります。
公式へのリンクはこちらです。
 ECMAScript 2015 Language Specification &amp;ndash; ECMA-262 6th Edition ECMAScript® 2016 Language Specification  ES2015 の新機能 ES2015 で追加された主な機能は下記になります。
 let ・ const キーワードによる変数宣言 クラス構文 アロー関数 分割代入 配列展開 可変長引数 関数のデフォルト引数 テンプレート文字列  ここから1つひとつ見ていきましょう。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/docker-mac-composer/</link>
      <pubDate>Fri, 29 Apr 2016 14:33:00 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/docker-mac-composer/</guid>
      <description>前回の『【 php-fpm 編】Mac に Docker インストールしてみた』の続きです
Database と連携する前に、Composer と連携し、PHP フレームワークの Laravel をインストールしてみようと思います
Composer のイメージを pull する $ docker pull composer/composer ...（略） Status: Downloaded newer image for composer/composer:latest  Composer コンテナを起動する Composer で Laravel をインストールする前に、前回作成した index.php を削除しておきましょう
cd ~/docker/www &amp;amp;&amp;amp; rm index.php  それでは Composer で　Laravel をインストールしてみます
$ docker run --rm -v /Users/enomotodev/docker/www:/app composer/composer create-project --prefer-dist laravel/laravel ./  これで Laravel がインストールされました
--rm オプションを使用することによって、コンテナを起動して終了するとコンテナを破棄してくれます
~/nginx/nginx.conf を下記のように編集して、Nginx のコンテナを再起動させます
 ~/nginx/nginx.conf  root /var/www/html; ↓ root /var/www/html/public;   Nginx コンテナを再起動  $ docker restart nginx  次にパーミッションを整えます</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/docker-mac-phpfpm/</link>
      <pubDate>Sun, 24 Apr 2016 02:06:12 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/docker-mac-phpfpm/</guid>
      <description>前回の『【 Nginx 編】Mac に Docker インストールしてみた』の続きです。
コンテナを削除する Nginx のコンテナなどが稼働していると思うので、一旦全て削除します
$ docker rm -f `docker ps -a -q`  php-fpm のイメージを pull する 公式の php-fpm のイメージを pull します
$ docker pull php:fpm ...（略） Status: Downloaded newer image for php:fpm  php-fpm のコンテナを起動する 最初に Document Root に配置する PHP ファイルを作成します
 ~/docker/www/index.php  &amp;lt;?php phpinfo(); ?&amp;gt;  PHP ファイルの準備ができたら php-fpm のコンテナを起動しましょう
$ docker run --name fpm -p 9000:9000 -v /Users/enomotodev/docker/www:/var/www/html -d php:fpm  --name オプションで fpm と指定することによって、fpm という名前でコンテナを起動しています</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/docker-mac-nginx/</link>
      <pubDate>Mon, 04 Apr 2016 23:33:12 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/docker-mac-nginx/</guid>
      <description>前回の『Mac に Docker インストールしてみた』の続きです。
実際に Nginx + PHP + MySQL 環境を構築するにあたって、今回は Nginx コンテナを起動させて、静的コンテンツの表示までを行いたいと思います。
Docker Machine の起動 前回から、PC をシャットダウンしたり、再起動している場合は、もう一度 Docker Machine を起動させなければいけないので、下記のコマンドで起動させてください。（それ以外の方は次の『Nginx コンテナを起動させる』から読んでください）
$ docker-machine start dev-machine Starting &amp;quot;dev-machine&amp;quot;... (dev-machine) Waiting for an IP... Machine &amp;quot;dev-machine&amp;quot; was started. Waiting for SSH to be available... Detecting the provisioner... Started machines may have new IP addresses. You may need to re-run the `docker-machine env` command.  前回と同じ手順を踏んで、Docker Machine に接続できるようにしていきます。
$ docker-machine env dev-machine export DOCKER_TLS_VERIFY=&amp;quot;1&amp;quot; export DOCKER_HOST=&amp;quot;tcp://192.</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-docker-mac/</link>
      <pubDate>Mon, 28 Mar 2016 12:48:00 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-docker-mac/</guid>
      <description>Docker + Docker Machine のインストール まずは、Docker 本体と Docker Machine をインストールします。
Mac だと Docker を直接的に実行できないのですが、Docker Machine を使用すると、一旦VM上で CoreOS や boot2docker を実行して、その上で簡単に Docker を実行できるようになります。
インストール自体はどちらも Homebrew で簡単にインストールすることができます。
$ brew install docker docker-machine  Machine の作成 docker-machine コマンドで新しく Machine を作成します。
$ docker-machine create -d virtualbox dev-machine ・・・（省略） Setting Docker configuration on the remote daemon... Checking connection to Docker... Docker is up and running! To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env dev-machine  上記の dev-machine の部分は Machine の名前になるので、好きな名前をつけてかまいません。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-jenkins/</link>
      <pubDate>Thu, 04 Feb 2016 22:33:24 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-jenkins/</guid>
      <description>はじめに 今まで Jenkins を使う機会はたくさんあったのですが、インストールや設定周りなどをやったことがなかったので、今回 CentOS 6.7 に実際にインストールして軽く触ってみました。
Java をインストールする Jenkins は Java で書かれているので、まずは Java をインストールします。
$ sudo yum install java-1.8.0-openjdk java-1.8.0-openjdk-devel  Java がちゃんとインストールできているか確認します。
$ java -version openjdk version &amp;quot;1.8.0_71&amp;quot; OpenJDK Runtime Environment (build 1.8.0_71-b15) OpenJDK 64-Bit Server VM (build 25.71-b15, mixed mode)  Jenkins のインストール Java のインストールが確認できたので、Jenkins のインストールに入っていきます。
まずは、Jenkins のレポジトリを追加します。
$ sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo $ sudo rpm --import http://pkg.jenkins-ci.org/redhat/jenkins-ci.org.key  Jenkins のレポジトリを追加できたので、Jenkins をインストールします。
$ sudo yum install jenkins  Jenkins の起動 Jenkins のインストールが完了したので、起動させます。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/closure-table/</link>
      <pubDate>Thu, 19 Nov 2015 23:53:29 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/closure-table/</guid>
      <description>はじめに SQLアンチパターンという本を読んでいたら、再帰的なデータに対して『閉包テーブル（Closure Table）』という考え方があっったので、MySQL 5.6 で試してみました。
再帰的なデータとは、例えば上司を1人までもつことができ、部下は複数持つことができる、下記の組織図のようなツリー構造のデータのことを指します。
テーブル作成 それでは早速テーブルを作成してみましょう。
CREATE TABLE `Employees` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `name` varchar(255) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE TABLE `TreePaths` ( `ancestor` bigint(20) NOT NULL, `descendant` bigint(20) NOT NULL, PRIMARY KEY (`ancestor`,`descendant`), KEY `descendant` (`descendant`), CONSTRAINT `TreePaths_ibfk_1` FOREIGN KEY (`ancestor`) REFERENCES `Employees` (`id`), CONSTRAINT `TreePaths_ibfk_2` FOREIGN KEY (`descendant`) REFERENCES `Employees` (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8;  閉包テーブルでは、Employees テーブルに自分自身の id を親に持つカラムを設けるのではなく、別のテーブルを用いて、ツリー構造の情報を格納します。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-elasticsearch/</link>
      <pubDate>Sat, 14 Nov 2015 18:07:46 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-elasticsearch/</guid>
      <description>Elasticsearch とは Elasticsearch とは2010年に OSS としてリリースされた分散型全文検索サーバです。
実際に CentOS 6.7 にインストールしてつかってみることで Elasticsearch の基本を学んでいきたいと思います。 前回の記事で設定した内容をそのまま使用するので、まだ見てない方はぜひ参照してみてください。
Elasticsearch のインストール Elasticsearch は Java で実装されているので、まずは Java をインストールします。
$ sudo yum install -y java  インストールできているか確認します
$ java -version openjdk version &amp;quot;1.8.0_65&amp;quot; OpenJDK Runtime Environment (build 1.8.0_65-b17) OpenJDK 64-Bit Server VM (build 25.65-b01, mixed mode)  Elasticsearch を yum でインストールするので、レポジトリのGPGキーをインストールします
sudo rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch  レポジトリを追加します。
/etc/yum.repos.d/elasticsearch.repo
[elasticsearch-2.x] name=Elasticsearch repository for 2.x packages baseurl=http://packages.elastic.co/elasticsearch/2.x/centos gpgcheck=1 gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch enabled=1  yum でインストールします。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/install-fluentd/</link>
      <pubDate>Sat, 14 Nov 2015 14:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/install-fluentd/</guid>
      <description>fluentd とは fluentd とはTreasure Dataという会社が開発している、さまざまなログの収集手段を提供するログ管理ツールです。
今回は CentOS 6.7 で実際にインストールしてつかってみることによって基本的な設定を学んでいきたいと思います。
td-agent をインストール td-agent ？ となるかと思いますが、td-agent には以下のものが同梱されています。
 Ruby コアライブラリ fluentd とプラグイン  つまり、ad-agent の中に fluentd が入っていて、プラグインなども一緒に入っているので、通常は td-agent をインストールします。
インストールにあたっては公式にインストールスクリプトが公開されているので今回はそちらをつかってインストールします。
$ curl -L https://toolbelt.treasuredata.com/sh/install-redhat-td-agent2.sh | sh  起動は次のコマンドでできます。
$ sudo /etc/init.d/td-agent start  設定ファイルの編集 それでは設定ファイルを編集してみましょう。
まずは、ログ収集の設定を行います。なお、デフォルトの設定はすべて削除してしまって問題ありません。
/etc/td-agent/td-agnet.conf
&amp;lt;source&amp;gt; # 入力に in_tail プラグインを指定 type tail # 監視するログファイルのパスを指定 path /var/log/httpd/access_log # ログにつけるタグを指定 tag apache.access # 監視するファイルをどの行まで読み込んだかを記録するファイルの指定 pos_file /var/log/td-agent/httpd-access_log.pos # ログの書式を指定 format apache2 &amp;lt;/source&amp;gt;  次に上記の記述の下にログ出力の設定を追記していきます。</description>
    </item>
    
    <item>

      <link>http://enomotodev.github.io/post/use-goose/</link>
      <pubDate>Wed, 11 Nov 2015 19:17:08 +0900</pubDate>
      <author>enomoto.dev@gmail.com (Takafumi Enomoto)</author>
      <guid>http://enomotodev.github.io/post/use-goose/</guid>
      <description>Gooseとは GooseとはGo言語で作られたDBマイグレーションツールです。
develop環境やproduction環境など各環境に簡単に設定を変更でき、かなり便利そうなので実際にMySQLで試してみました。
Gooseパッケージの取得 まずは go get して Goose パッケージを取得します。
※ Goをインストールしていない人や、GOPATHを設定していない人は公式ドキュメントを参考に導入してみてください。
$ go get bitbucket.org/liamstask/goose/cmd/goose  dbディレクトリの作成 プロジェクトのルート直下に db ディレクトリを作成します。
$ mkdir db  configファイルの作成 取得したGooseパッケージのサンプルからconfigファイルをコピーします。
$ cp $GOPATH/src/bitbucket.org/liamstask/goose/db-sample/dbconf.yml db/  configファイルの編集 まずは先ほどコピーしてきたconfigファイルの中身をのぞいてみます。
デフォルトで test / develop / production のそれぞれの環境に PostgreSQL の driver が設定してあるのが、なんとなくわかるかと思います。
db/dbconf.yml
test: driver: postgres open: user=liam dbname=tester sslmode=disable development: driver: postgres open: user=liam dbname=tester sslmode=disable production: driver: postgres open: user=liam dbname=tester sslmode=verify-full customimport: driver: customdriver open: customdriver open import: github.</description>
    </item>
    
  </channel>
</rss>